
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080062e8  080062e8  000072e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800671c  0800671c  000080ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800671c  0800671c  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006724  08006724  000080ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006724  08006724  00007724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006728  08006728  00007728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  0800672c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200000ac  080067d8  000080ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080067d8  0000848c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f60  00000000  00000000  000080d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003815  00000000  00000000  0001b035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001e850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbf  00000000  00000000  0001fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a240  00000000  00000000  000207df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001773f  00000000  00000000  0003aa1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea50  00000000  00000000  0005215e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0bae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e2c  00000000  00000000  000e0bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e5a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	080062d0 	.word	0x080062d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	080062d0 	.word	0x080062d0

0800014c <__gesf2>:
 800014c:	f04f 3cff 	mov.w	ip, #4294967295
 8000150:	e006      	b.n	8000160 <__cmpsf2+0x4>
 8000152:	bf00      	nop

08000154 <__lesf2>:
 8000154:	f04f 0c01 	mov.w	ip, #1
 8000158:	e002      	b.n	8000160 <__cmpsf2+0x4>
 800015a:	bf00      	nop

0800015c <__cmpsf2>:
 800015c:	f04f 0c01 	mov.w	ip, #1
 8000160:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800016c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000170:	bf18      	it	ne
 8000172:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000176:	d011      	beq.n	800019c <__cmpsf2+0x40>
 8000178:	b001      	add	sp, #4
 800017a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800017e:	bf18      	it	ne
 8000180:	ea90 0f01 	teqne	r0, r1
 8000184:	bf58      	it	pl
 8000186:	ebb2 0003 	subspl.w	r0, r2, r3
 800018a:	bf88      	it	hi
 800018c:	17c8      	asrhi	r0, r1, #31
 800018e:	bf38      	it	cc
 8000190:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000194:	bf18      	it	ne
 8000196:	f040 0001 	orrne.w	r0, r0, #1
 800019a:	4770      	bx	lr
 800019c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001a0:	d102      	bne.n	80001a8 <__cmpsf2+0x4c>
 80001a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001a6:	d105      	bne.n	80001b4 <__cmpsf2+0x58>
 80001a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001ac:	d1e4      	bne.n	8000178 <__cmpsf2+0x1c>
 80001ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001b2:	d0e1      	beq.n	8000178 <__cmpsf2+0x1c>
 80001b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__aeabi_cfrcmple>:
 80001bc:	4684      	mov	ip, r0
 80001be:	4608      	mov	r0, r1
 80001c0:	4661      	mov	r1, ip
 80001c2:	e7ff      	b.n	80001c4 <__aeabi_cfcmpeq>

080001c4 <__aeabi_cfcmpeq>:
 80001c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80001c6:	f7ff ffc9 	bl	800015c <__cmpsf2>
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf48      	it	mi
 80001ce:	f110 0f00 	cmnmi.w	r0, #0
 80001d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001d4 <__aeabi_fcmpeq>:
 80001d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001d8:	f7ff fff4 	bl	80001c4 <__aeabi_cfcmpeq>
 80001dc:	bf0c      	ite	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	2000      	movne	r0, #0
 80001e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80001e6:	bf00      	nop

080001e8 <__aeabi_fcmplt>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff ffea 	bl	80001c4 <__aeabi_cfcmpeq>
 80001f0:	bf34      	ite	cc
 80001f2:	2001      	movcc	r0, #1
 80001f4:	2000      	movcs	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmple>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffe0 	bl	80001c4 <__aeabi_cfcmpeq>
 8000204:	bf94      	ite	ls
 8000206:	2001      	movls	r0, #1
 8000208:	2000      	movhi	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmpge>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffd2 	bl	80001bc <__aeabi_cfrcmple>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpgt>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffc8 	bl	80001bc <__aeabi_cfrcmple>
 800022c:	bf34      	ite	cc
 800022e:	2001      	movcc	r0, #1
 8000230:	2000      	movcs	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b98c 	b.w	8000568 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a0:	fa1f fc87 	uxth.w	ip, r7
 80002a4:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a8:	fb01 f20c 	mul.w	r2, r1, ip
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80eb 	bcs.w	8000496 <__udivmoddi4+0x22e>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e8 	bls.w	8000496 <__udivmoddi4+0x22e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d0:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d8:	b2a3      	uxth	r3, r4
 80002da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d7 	bcs.w	800049a <__udivmoddi4+0x232>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d4 	bls.w	800049a <__udivmoddi4+0x232>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	eba3 030c 	sub.w	r3, r3, ip
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	2200      	movs	r2, #0
 8000304:	40f3      	lsrs	r3, r6
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8108 	bhi.w	8000540 <__udivmoddi4+0x2d8>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8091 	beq.w	800046c <__udivmoddi4+0x204>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a5 	bne.w	800049e <__udivmoddi4+0x236>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	2101      	movs	r1, #1
 8000358:	0c03      	lsrs	r3, r0, #16
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	b280      	uxth	r0, r0
 8000360:	b2bc      	uxth	r4, r7
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e3 	bhi.w	800054a <__udivmoddi4+0x2e2>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	fb02 f404 	mul.w	r4, r2, r4
 8000394:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80cd 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa2e fa06 	lsr.w	sl, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	fbba f8f9 	udiv	r8, sl, r9
 80003cc:	fa0e fe01 	lsl.w	lr, lr, r1
 80003d0:	fa20 f306 	lsr.w	r3, r0, r6
 80003d4:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	ea43 030e 	orr.w	r3, r3, lr
 80003e0:	fa00 fe01 	lsl.w	lr, r0, r1
 80003e4:	fb08 f00c 	mul.w	r0, r8, ip
 80003e8:	0c1c      	lsrs	r4, r3, #16
 80003ea:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ee:	42a0      	cmp	r0, r4
 80003f0:	fa02 f201 	lsl.w	r2, r2, r1
 80003f4:	d90a      	bls.n	800040c <__udivmoddi4+0x1a4>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 809e 	bcs.w	800053c <__udivmoddi4+0x2d4>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 809b 	bls.w	800053c <__udivmoddi4+0x2d4>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	443c      	add	r4, r7
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	b298      	uxth	r0, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	fb03 fc0c 	mul.w	ip, r3, ip
 800041c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000420:	45a4      	cmp	ip, r4
 8000422:	d909      	bls.n	8000438 <__udivmoddi4+0x1d0>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 30ff 	add.w	r0, r3, #4294967295
 800042a:	f080 8085 	bcs.w	8000538 <__udivmoddi4+0x2d0>
 800042e:	45a4      	cmp	ip, r4
 8000430:	f240 8082 	bls.w	8000538 <__udivmoddi4+0x2d0>
 8000434:	3b02      	subs	r3, #2
 8000436:	443c      	add	r4, r7
 8000438:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	fba0 8c02 	umull	r8, ip, r0, r2
 8000444:	4564      	cmp	r4, ip
 8000446:	4643      	mov	r3, r8
 8000448:	46e1      	mov	r9, ip
 800044a:	d364      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 800044c:	d061      	beq.n	8000512 <__udivmoddi4+0x2aa>
 800044e:	b15d      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000450:	ebbe 0203 	subs.w	r2, lr, r3
 8000454:	eb64 0409 	sbc.w	r4, r4, r9
 8000458:	fa04 f606 	lsl.w	r6, r4, r6
 800045c:	fa22 f301 	lsr.w	r3, r2, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e74e      	b.n	800030a <__udivmoddi4+0xa2>
 800046c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000476:	b280      	uxth	r0, r0
 8000478:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047c:	463b      	mov	r3, r7
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	4638      	mov	r0, r7
 8000484:	463c      	mov	r4, r7
 8000486:	46b8      	mov	r8, r7
 8000488:	46be      	mov	lr, r7
 800048a:	2620      	movs	r6, #32
 800048c:	eba2 0208 	sub.w	r2, r2, r8
 8000490:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000494:	e765      	b.n	8000362 <__udivmoddi4+0xfa>
 8000496:	4601      	mov	r1, r0
 8000498:	e717      	b.n	80002ca <__udivmoddi4+0x62>
 800049a:	4610      	mov	r0, r2
 800049c:	e72b      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049e:	f1c6 0120 	rsb	r1, r6, #32
 80004a2:	fa2e fc01 	lsr.w	ip, lr, r1
 80004a6:	40b7      	lsls	r7, r6
 80004a8:	fa0e fe06 	lsl.w	lr, lr, r6
 80004ac:	fa20 f101 	lsr.w	r1, r0, r1
 80004b0:	ea41 010e 	orr.w	r1, r1, lr
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	fbbc f8fe 	udiv	r8, ip, lr
 80004bc:	b2bc      	uxth	r4, r7
 80004be:	fb0e cc18 	mls	ip, lr, r8, ip
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	0c0a      	lsrs	r2, r1, #16
 80004c8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80004cc:	40b0      	lsls	r0, r6
 80004ce:	4591      	cmp	r9, r2
 80004d0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	d93e      	bls.n	8000556 <__udivmoddi4+0x2ee>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f108 3cff 	add.w	ip, r8, #4294967295
 80004de:	d201      	bcs.n	80004e4 <__udivmoddi4+0x27c>
 80004e0:	4591      	cmp	r9, r2
 80004e2:	d81f      	bhi.n	8000524 <__udivmoddi4+0x2bc>
 80004e4:	eba2 0209 	sub.w	r2, r2, r9
 80004e8:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ec:	fb09 f804 	mul.w	r8, r9, r4
 80004f0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80004f4:	b28a      	uxth	r2, r1
 80004f6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80004fa:	4542      	cmp	r2, r8
 80004fc:	d229      	bcs.n	8000552 <__udivmoddi4+0x2ea>
 80004fe:	18ba      	adds	r2, r7, r2
 8000500:	f109 31ff 	add.w	r1, r9, #4294967295
 8000504:	d2c2      	bcs.n	800048c <__udivmoddi4+0x224>
 8000506:	4542      	cmp	r2, r8
 8000508:	d2c0      	bcs.n	800048c <__udivmoddi4+0x224>
 800050a:	f1a9 0102 	sub.w	r1, r9, #2
 800050e:	443a      	add	r2, r7
 8000510:	e7bc      	b.n	800048c <__udivmoddi4+0x224>
 8000512:	45c6      	cmp	lr, r8
 8000514:	d29b      	bcs.n	800044e <__udivmoddi4+0x1e6>
 8000516:	ebb8 0302 	subs.w	r3, r8, r2
 800051a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800051e:	3801      	subs	r0, #1
 8000520:	46e1      	mov	r9, ip
 8000522:	e794      	b.n	800044e <__udivmoddi4+0x1e6>
 8000524:	eba7 0909 	sub.w	r9, r7, r9
 8000528:	444a      	add	r2, r9
 800052a:	fbb2 f9fe 	udiv	r9, r2, lr
 800052e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7db      	b.n	80004f0 <__udivmoddi4+0x288>
 8000538:	4603      	mov	r3, r0
 800053a:	e77d      	b.n	8000438 <__udivmoddi4+0x1d0>
 800053c:	46d0      	mov	r8, sl
 800053e:	e765      	b.n	800040c <__udivmoddi4+0x1a4>
 8000540:	4608      	mov	r0, r1
 8000542:	e6fa      	b.n	800033a <__udivmoddi4+0xd2>
 8000544:	443b      	add	r3, r7
 8000546:	3a02      	subs	r2, #2
 8000548:	e730      	b.n	80003ac <__udivmoddi4+0x144>
 800054a:	f1ac 0c02 	sub.w	ip, ip, #2
 800054e:	443b      	add	r3, r7
 8000550:	e719      	b.n	8000386 <__udivmoddi4+0x11e>
 8000552:	4649      	mov	r1, r9
 8000554:	e79a      	b.n	800048c <__udivmoddi4+0x224>
 8000556:	eba2 0209 	sub.w	r2, r2, r9
 800055a:	fbb2 f9fe 	udiv	r9, r2, lr
 800055e:	46c4      	mov	ip, r8
 8000560:	fb09 f804 	mul.w	r8, r9, r4
 8000564:	e7c4      	b.n	80004f0 <__udivmoddi4+0x288>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f002 fd6b 	bl	8003050 <HAL_ADCEx_Calibration_Start>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <ADC_Init+0x18>
    {
        Error_Handler();
 8000580:	f000 fc90 	bl	8000ea4 <Error_Handler>
    }
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 800058c:	b490      	push	{r4, r7}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4604      	mov	r4, r0
 8000594:	4608      	mov	r0, r1
 8000596:	4611      	mov	r1, r2
 8000598:	461a      	mov	r2, r3
 800059a:	4623      	mov	r3, r4
 800059c:	71fb      	strb	r3, [r7, #7]
 800059e:	4603      	mov	r3, r0
 80005a0:	71bb      	strb	r3, [r7, #6]
 80005a2:	460b      	mov	r3, r1
 80005a4:	717b      	strb	r3, [r7, #5]
 80005a6:	4613      	mov	r3, r2
 80005a8:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	f023 030f 	bic.w	r3, r3, #15
 80005b6:	b25a      	sxtb	r2, r3
 80005b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005bc:	4313      	orrs	r3, r2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 80005c2:	793b      	ldrb	r3, [r7, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <map_nibble_ctrl+0x40>
 80005c8:	2208      	movs	r2, #8
 80005ca:	e000      	b.n	80005ce <map_nibble_ctrl+0x42>
 80005cc:	2200      	movs	r2, #0
 80005ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 80005d8:	797b      	ldrb	r3, [r7, #5]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <map_nibble_ctrl+0x56>
 80005de:	2204      	movs	r2, #4
 80005e0:	e000      	b.n	80005e4 <map_nibble_ctrl+0x58>
 80005e2:	2200      	movs	r2, #0
 80005e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	b25a      	sxtb	r2, r3
 80005fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000600:	4313      	orrs	r3, r2
 8000602:	b25b      	sxtb	r3, r3
 8000604:	73fb      	strb	r3, [r7, #15]
    return b;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bc90      	pop	{r4, r7}
 8000610:	4770      	bx	lr
	...

08000614 <expander_write>:

static void expander_write(uint8_t data)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af02      	add	r7, sp, #8
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 800061e:	1dfa      	adds	r2, r7, #7
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	214e      	movs	r1, #78	@ 0x4e
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <expander_write+0x24>)
 800062a:	f003 f9b3 	bl	8003994 <HAL_I2C_Master_Transmit>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000108 	.word	0x20000108

0800063c <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	b2db      	uxtb	r3, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffe0 	bl	8000614 <expander_write>
    HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 fa6b 	bl	8002b30 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f023 0304 	bic.w	r3, r3, #4
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffd6 	bl	8000614 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f002 fa61 	bl	8002b30 <HAL_Delay>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	460b      	mov	r3, r1
 8000682:	71bb      	strb	r3, [r7, #6]
 8000684:	4613      	mov	r3, r2
 8000686:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	79b9      	ldrb	r1, [r7, #6]
 800068c:	79f8      	ldrb	r0, [r7, #7]
 800068e:	2201      	movs	r2, #1
 8000690:	f7ff ff7c 	bl	800058c <map_nibble_ctrl>
 8000694:	4603      	mov	r3, r0
 8000696:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ffba 	bl	8000614 <expander_write>
    pulse_enable(x);
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffca 	bl	800063c <pulse_enable>
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 80006b6:	2308      	movs	r3, #8
 80006b8:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa9 	bl	8000614 <expander_write>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f023 030f 	bic.w	r3, r3, #15
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2201      	movs	r2, #1
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffc8 	bl	8000676 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2201      	movs	r2, #1
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffc0 	bl	8000676 <write4bits>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	4603      	mov	r3, r0
 8000706:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f023 030f 	bic.w	r3, r3, #15
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2201      	movs	r2, #1
 8000712:	2101      	movs	r1, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ffae 	bl	8000676 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2201      	movs	r2, #1
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffa6 	bl	8000676 <write4bits>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <lcd_clear>:

void lcd_clear(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff ffc7 	bl	80006ca <lcd_send_cmd>
    HAL_Delay(2);
 800073c:	2002      	movs	r0, #2
 800073e:	f002 f9f7 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(0x80);
 8000742:	2080      	movs	r0, #128	@ 0x80
 8000744:	f7ff ffc1 	bl	80006ca <lcd_send_cmd>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d901      	bls.n	8000766 <lcd_put_cur+0x1a>
 8000762:	2301      	movs	r3, #1
 8000764:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <lcd_put_cur+0x40>)
 800076a:	5cd2      	ldrb	r2, [r2, r3]
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	4413      	add	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	b25b      	sxtb	r3, r3
 8000774:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000778:	b25b      	sxtb	r3, r3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ffa4 	bl	80006ca <lcd_send_cmd>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	08006674 	.word	0x08006674

08000790 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8000798:	e006      	b.n	80007a8 <lcd_send_string+0x18>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ffab 	bl	80006fe <lcd_send_data>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f4      	bne.n	800079a <lcd_send_string+0xa>
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <lcd_init>:

void lcd_init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 80007be:	2032      	movs	r0, #50	@ 0x32
 80007c0:	f002 f9b6 	bl	8002b30 <HAL_Delay>
    lcd_backlight_on();
 80007c4:	f7ff ff74 	bl	80006b0 <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2100      	movs	r1, #0
 80007cc:	2030      	movs	r0, #48	@ 0x30
 80007ce:	f7ff ff52 	bl	8000676 <write4bits>
 80007d2:	2005      	movs	r0, #5
 80007d4:	f002 f9ac 	bl	8002b30 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 80007d8:	2201      	movs	r2, #1
 80007da:	2100      	movs	r1, #0
 80007dc:	2030      	movs	r0, #48	@ 0x30
 80007de:	f7ff ff4a 	bl	8000676 <write4bits>
 80007e2:	2001      	movs	r0, #1
 80007e4:	f002 f9a4 	bl	8002b30 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2100      	movs	r1, #0
 80007ec:	2030      	movs	r0, #48	@ 0x30
 80007ee:	f7ff ff42 	bl	8000676 <write4bits>
 80007f2:	2001      	movs	r0, #1
 80007f4:	f002 f99c 	bl	8002b30 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2100      	movs	r1, #0
 80007fc:	2020      	movs	r0, #32
 80007fe:	f7ff ff3a 	bl	8000676 <write4bits>
 8000802:	2001      	movs	r0, #1
 8000804:	f002 f994 	bl	8002b30 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8000808:	2028      	movs	r0, #40	@ 0x28
 800080a:	f7ff ff5e 	bl	80006ca <lcd_send_cmd>
 800080e:	2001      	movs	r0, #1
 8000810:	f002 f98e 	bl	8002b30 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8000814:	2008      	movs	r0, #8
 8000816:	f7ff ff58 	bl	80006ca <lcd_send_cmd>
 800081a:	2001      	movs	r0, #1
 800081c:	f002 f988 	bl	8002b30 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8000820:	f7ff ff87 	bl	8000732 <lcd_clear>
 8000824:	2002      	movs	r0, #2
 8000826:	f002 f983 	bl	8002b30 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 800082a:	2006      	movs	r0, #6
 800082c:	f7ff ff4d 	bl	80006ca <lcd_send_cmd>
 8000830:	2001      	movs	r0, #1
 8000832:	f002 f97d 	bl	8002b30 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8000836:	200c      	movs	r0, #12
 8000838:	f7ff ff47 	bl	80006ca <lcd_send_cmd>
 800083c:	2001      	movs	r0, #1
 800083e:	f002 f977 	bl	8002b30 <HAL_Delay>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <LED_ClearAllIntents>:
        }
    }
}

void LED_ClearAllIntents(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e00d      	b.n	8000870 <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8000854:	4a0b      	ldr	r2, [pc, #44]	@ (8000884 <LED_ClearAllIntents+0x3c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2100      	movs	r1, #0
 800085a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 800085e:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <LED_ClearAllIntents+0x3c>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	2200      	movs	r2, #0
 8000868:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3301      	adds	r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b03      	cmp	r3, #3
 8000874:	ddee      	ble.n	8000854 <LED_ClearAllIntents+0xc>
    }
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	200000c8 	.word	0x200000c8

08000888 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	460b      	mov	r3, r1
 8000894:	71bb      	strb	r3, [r7, #6]
 8000896:	4613      	mov	r3, r2
 8000898:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b03      	cmp	r3, #3
 800089e:	d80b      	bhi.n	80008b8 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4908      	ldr	r1, [pc, #32]	@ (80008c4 <LED_SetIntent+0x3c>)
 80008a4:	79ba      	ldrb	r2, [r7, #6]
 80008a6:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4a05      	ldr	r2, [pc, #20]	@ (80008c4 <LED_SetIntent+0x3c>)
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	88ba      	ldrh	r2, [r7, #4]
 80008b4:	805a      	strh	r2, [r3, #2]
 80008b6:	e000      	b.n	80008ba <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80008b8:	bf00      	nop
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	200000c8 	.word	0x200000c8

080008c8 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <LoRa_WriteReg>:


//uint8_t rxBuffer[256]; // Buffer for received data

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	733b      	strb	r3, [r7, #12]
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008f8:	480a      	ldr	r0, [pc, #40]	@ (8000924 <LoRa_WriteReg+0x50>)
 80008fa:	f002 fed6 	bl	80036aa <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 80008fe:	f107 010c 	add.w	r1, r7, #12
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	2202      	movs	r2, #2
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <LoRa_WriteReg+0x54>)
 800090a:	f004 f9ce 	bl	8004caa <HAL_SPI_Transmit>
    NSS_HIGH();
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <LoRa_WriteReg+0x50>)
 8000916:	f002 fec8 	bl	80036aa <HAL_GPIO_WritePin>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010800 	.word	0x40010800
 8000928:	20000170 	.word	0x20000170

0800092c <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800093c:	b2db      	uxtb	r3, r3
 800093e:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800094a:	480f      	ldr	r0, [pc, #60]	@ (8000988 <LoRa_ReadReg+0x5c>)
 800094c:	f002 fead 	bl	80036aa <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8000950:	f107 010f 	add.w	r1, r7, #15
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	2201      	movs	r2, #1
 800095a:	480c      	ldr	r0, [pc, #48]	@ (800098c <LoRa_ReadReg+0x60>)
 800095c:	f004 f9a5 	bl	8004caa <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8000960:	f107 010e 	add.w	r1, r7, #14
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	2201      	movs	r2, #1
 800096a:	4808      	ldr	r0, [pc, #32]	@ (800098c <LoRa_ReadReg+0x60>)
 800096c:	f004 fae1 	bl	8004f32 <HAL_SPI_Receive>
    NSS_HIGH();
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000976:	4804      	ldr	r0, [pc, #16]	@ (8000988 <LoRa_ReadReg+0x5c>)
 8000978:	f002 fe97 	bl	80036aa <HAL_GPIO_WritePin>
    return rx;
 800097c:	7bbb      	ldrb	r3, [r7, #14]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40010800 	.word	0x40010800
 800098c:	20000170 	.word	0x20000170

08000990 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* --- reset --- */
void LoRa_Reset(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2140      	movs	r1, #64	@ 0x40
 8000998:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <LoRa_Reset+0x28>)
 800099a:	f002 fe86 	bl	80036aa <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800099e:	2002      	movs	r0, #2
 80009a0:	f002 f8c6 	bl	8002b30 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2140      	movs	r1, #64	@ 0x40
 80009a8:	4803      	ldr	r0, [pc, #12]	@ (80009b8 <LoRa_Reset+0x28>)
 80009aa:	f002 fe7e 	bl	80036aa <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f002 f8be 	bl	8002b30 <HAL_Delay>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010c00 	.word	0x40010c00

080009bc <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80009bc:	b5b0      	push	{r4, r5, r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	2000      	movs	r0, #0
 80009c8:	460a      	mov	r2, r1
 80009ca:	4603      	mov	r3, r0
 80009cc:	0b55      	lsrs	r5, r2, #13
 80009ce:	04d4      	lsls	r4, r2, #19
 80009d0:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <LoRa_SetFrequency+0x78>)
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	4620      	mov	r0, r4
 80009d8:	4629      	mov	r1, r5
 80009da:	f7ff fc2d 	bl	8000238 <__aeabi_uldivmod>
 80009de:	4602      	mov	r2, r0
 80009e0:	460b      	mov	r3, r1
 80009e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 80009e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009ea:	f04f 0200 	mov.w	r2, #0
 80009ee:	f04f 0300 	mov.w	r3, #0
 80009f2:	0c02      	lsrs	r2, r0, #16
 80009f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009f8:	0c0b      	lsrs	r3, r1, #16
 80009fa:	b2d3      	uxtb	r3, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	2006      	movs	r0, #6
 8000a00:	f7ff ff68 	bl	80008d4 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8000a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	f04f 0300 	mov.w	r3, #0
 8000a10:	0a02      	lsrs	r2, r0, #8
 8000a12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a16:	0a0b      	lsrs	r3, r1, #8
 8000a18:	b2d3      	uxtb	r3, r2
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2007      	movs	r0, #7
 8000a1e:	f7ff ff59 	bl	80008d4 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8000a22:	7a3b      	ldrb	r3, [r7, #8]
 8000a24:	4619      	mov	r1, r3
 8000a26:	2008      	movs	r0, #8
 8000a28:	f7ff ff54 	bl	80008d4 <LoRa_WriteReg>
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bdb0      	pop	{r4, r5, r7, pc}
 8000a34:	01e84800 	.word	0x01e84800

08000a38 <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 8000a3c:	f7ff ffa8 	bl	8000990 <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 8000a40:	2100      	movs	r1, #0
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff ff46 	bl	80008d4 <LoRa_WriteReg>
    HAL_Delay(5);
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f002 f871 	bl	8002b30 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff ff3f 	bl	80008d4 <LoRa_WriteReg>
    HAL_Delay(5);
 8000a56:	2005      	movs	r0, #5
 8000a58:	f002 f86a 	bl	8002b30 <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(LORA_FREQUENCY);
 8000a5c:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <LoRa_Init+0x88>)
 8000a5e:	f7ff ffad 	bl	80009bc <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 8000a62:	218f      	movs	r1, #143	@ 0x8f
 8000a64:	2009      	movs	r0, #9
 8000a66:	f7ff ff35 	bl	80008d4 <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 8000a6a:	2187      	movs	r1, #135	@ 0x87
 8000a6c:	204d      	movs	r0, #77	@ 0x4d
 8000a6e:	f7ff ff31 	bl	80008d4 <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 8000a72:	2123      	movs	r1, #35	@ 0x23
 8000a74:	200c      	movs	r0, #12
 8000a76:	f7ff ff2d 	bl	80008d4 <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 8000a7a:	2172      	movs	r1, #114	@ 0x72
 8000a7c:	201d      	movs	r0, #29
 8000a7e:	f7ff ff29 	bl	80008d4 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 8000a82:	2174      	movs	r1, #116	@ 0x74
 8000a84:	201e      	movs	r0, #30
 8000a86:	f7ff ff25 	bl	80008d4 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	2026      	movs	r0, #38	@ 0x26
 8000a8e:	f7ff ff21 	bl	80008d4 <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 8000a92:	2100      	movs	r1, #0
 8000a94:	2020      	movs	r0, #32
 8000a96:	f7ff ff1d 	bl	80008d4 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	2021      	movs	r0, #33	@ 0x21
 8000a9e:	f7ff ff19 	bl	80008d4 <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 8000aa2:	2122      	movs	r1, #34	@ 0x22
 8000aa4:	2039      	movs	r0, #57	@ 0x39
 8000aa6:	f7ff ff15 	bl	80008d4 <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2040      	movs	r0, #64	@ 0x40
 8000aae:	f7ff ff11 	bl	80008d4 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 8000ab2:	21ff      	movs	r1, #255	@ 0xff
 8000ab4:	2012      	movs	r0, #18
 8000ab6:	f7ff ff0d 	bl	80008d4 <LoRa_WriteReg>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	19cf0e40 	.word	0x19cf0e40

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f001 ffcf 	bl	8002a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f82f 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f000 f953 	bl	8000d7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ad6:	f000 f885 	bl	8000be4 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8000ada:	f000 f8ef 	bl	8000cbc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ade:	f000 f923 	bl	8000d28 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000ae2:	f000 f8bd 	bl	8000c60 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000ae6:	f7ff fe68 	bl	80007ba <lcd_init>
  ADC_Init(&hadc1);
 8000aea:	4810      	ldr	r0, [pc, #64]	@ (8000b2c <main+0x68>)
 8000aec:	f7ff fd3e 	bl	800056c <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 8000af0:	f7ff ffa2 	bl	8000a38 <LoRa_Init>
//  I2C_Scan();
  Screen_Init();
 8000af4:	f001 f97a 	bl	8001dec <Screen_Init>
  UART_Init(); // Initialize UART reception (starts the first IT)
 8000af8:	f001 ff74 	bl	80029e4 <UART_Init>
  Switches_Init();
 8000afc:	f001 fede 	bl	80028bc <Switches_Init>
//
//  Debug_Print("System Initialized\r\n");
  uint8_t modem = LoRa_ReadReg(0x1D);
 8000b00:	201d      	movs	r0, #29
 8000b02:	f7ff ff13 	bl	800092c <LoRa_ReadReg>
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 8000b0a:	201e      	movs	r0, #30
 8000b0c:	f7ff ff0e 	bl	800092c <LoRa_ReadReg>
 8000b10:	4603      	mov	r3, r0
 8000b12:	71bb      	strb	r3, [r7, #6]
//
//      }
//  }

         // Process all active modes
         ModelHandle_Process();
 8000b14:	f000 fc00 	bl	8001318 <ModelHandle_Process>
  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
         while (1)
         {
             /* --- UI handling (switches + LCD) --- */
             Screen_HandleSwitches();  // Check buttons and update UI state
 8000b18:	f001 fcd4 	bl	80024c4 <Screen_HandleSwitches>
             Screen_Update();          // Refresh display and cursor blink
 8000b1c:	f000 ff4a 	bl	80019b4 <Screen_Update>
//             ModelHandle_Process();   // compute intents for motor, relays, LEDs, timers
//             Relay_All(false);        // Example: you can still drive relays individually in model
//             LED_Task();              // blink patterns / status LEDs

             /* --- Cooperative delay for smoothness --- */
             HAL_Delay(10);           // ~100Hz loop rate (good for UI responsiveness)
 8000b20:	200a      	movs	r0, #10
 8000b22:	f002 f805 	bl	8002b30 <HAL_Delay>
             Screen_HandleSwitches();  // Check buttons and update UI state
 8000b26:	bf00      	nop
 8000b28:	e7f6      	b.n	8000b18 <main+0x54>
 8000b2a:	bf00      	nop
 8000b2c:	200000d8 	.word	0x200000d8

08000b30 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */


void SystemClock_Config(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b094      	sub	sp, #80	@ 0x50
 8000b34:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3a:	2228      	movs	r2, #40	@ 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 ff38 	bl	80059b4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2; // HSI/2 = 4 MHz
 8000b70:	2300      	movs	r3, #0
 8000b72:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;             // 4*16 = 64 MHz
 8000b74:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8000b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fa60 	bl	8004044 <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x5e>
 8000b8a:	f000 f98b 	bl	8000ea4 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Updated line
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9e:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 fccc 	bl	8004548 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x8a>
 8000bb6:	f000 f975 	bl	8000ea4 <Error_Handler>

    // Use LSI (internal ~40 kHz) for RTC, and HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bc2:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bc8:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fe49 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0xac>
 8000bd8:	f000 f964 	bl	8000ea4 <Error_Handler>
}
 8000bdc:	bf00      	nop
 8000bde:	3750      	adds	r7, #80	@ 0x50
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000bf6:	4a19      	ldr	r2, [pc, #100]	@ (8000c5c <MX_ADC1_Init+0x78>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c00:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000c0e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c20:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000c22:	f001 ffa9 	bl	8002b78 <HAL_ADC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c2c:	f000 f93a 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_ADC1_Init+0x74>)
 8000c42:	f002 f871 	bl	8002d28 <HAL_ADC_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c4c:	f000 f92a 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000d8 	.word	0x200000d8
 8000c5c:	40012400 	.word	0x40012400

08000c60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <MX_I2C2_Init+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c6c:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <MX_I2C2_Init+0x58>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c9e:	f002 fd35 	bl	800370c <HAL_I2C_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ca8:	f000 f8fc 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000108 	.word	0x20000108
 8000cb4:	40005800 	.word	0x40005800
 8000cb8:	000186a0 	.word	0x000186a0

08000cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cc2:	4a18      	ldr	r2, [pc, #96]	@ (8000d24 <MX_SPI1_Init+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cf0:	2218      	movs	r2, #24
 8000cf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d08:	220a      	movs	r2, #10
 8000d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d0e:	f003 ff48 	bl	8004ba2 <HAL_SPI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d18:	f000 f8c4 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000170 	.word	0x20000170
 8000d24:	40013000 	.word	0x40013000

08000d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <MX_USART1_UART_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d60:	f004 fcb5 	bl	80056ce <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6a:	f000 f89b 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200001c8 	.word	0x200001c8
 8000d78:	40013800 	.word	0x40013800

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d90:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a3f      	ldr	r2, [pc, #252]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da8:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a39      	ldr	r2, [pc, #228]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b37      	ldr	r3, [pc, #220]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a33      	ldr	r2, [pc, #204]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <MX_GPIO_Init+0x118>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8000df0:	2200      	movs	r2, #0
 8000df2:	f240 3147 	movw	r1, #839	@ 0x347
 8000df6:	4828      	ldr	r0, [pc, #160]	@ (8000e98 <MX_GPIO_Init+0x11c>)
 8000df8:	f002 fc57 	bl	80036aa <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8000e02:	4826      	ldr	r0, [pc, #152]	@ (8000e9c <MX_GPIO_Init+0x120>)
 8000e04:	f002 fc51 	bl	80036aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8000e08:	23c0      	movs	r3, #192	@ 0xc0
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4821      	ldr	r0, [pc, #132]	@ (8000e9c <MX_GPIO_Init+0x120>)
 8000e18:	f002 faac 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8000e1c:	f240 3347 	movw	r3, #839	@ 0x347
 8000e20:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	4818      	ldr	r0, [pc, #96]	@ (8000e98 <MX_GPIO_Init+0x11c>)
 8000e36:	f002 fa9d 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8000e3a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_GPIO_Init+0x124>)
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <MX_GPIO_Init+0x11c>)
 8000e50:	f002 fa90 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8000e54:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <MX_GPIO_Init+0x120>)
 8000e6e:	f002 fa81 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <MX_GPIO_Init+0x11c>)
 8000e86:	f002 fa75 	bl	8003374 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	10310000 	.word	0x10310000

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <Error_Handler+0x8>

08000eb0 <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL; // 2h
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	f001 fe32 	bl	8002b1c <HAL_GetTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <motor_apply>:
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
}

/* ===== Motor ===== */
static void motor_apply(bool on)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 fa42 	bl	8001358 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <motor_apply+0x1e>
 8000eda:	2201      	movs	r2, #1
 8000edc:	e000      	b.n	8000ee0 <motor_apply+0x20>
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <motor_apply+0x58>)
 8000ee2:	701a      	strb	r2, [r3, #0]

    if (on) {
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00f      	beq.n	8000f0a <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <motor_apply+0x5c>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f083 0301 	eor.w	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00b      	beq.n	8000f10 <motor_apply+0x50>
            maxRunTimerArmed = true;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <motor_apply+0x5c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8000efe:	f7ff ffd7 	bl	8000eb0 <now_ms>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <motor_apply+0x60>)
 8000f06:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8000f08:	e002      	b.n	8000f10 <motor_apply+0x50>
        maxRunTimerArmed = false;
 8000f0a:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <motor_apply+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000248 	.word	0x20000248
 8000f1c:	20000294 	.word	0x20000294
 8000f20:	20000298 	.word	0x20000298

08000f24 <countdown_tick>:
    if (onMode) motor_apply(true);
    else        motor_apply(false);
}

static void countdown_tick(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <countdown_tick+0x74>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d12a      	bne.n	8000f90 <countdown_tick+0x6c>

    uint32_t tnow = now_ms();
 8000f3a:	f7ff ffb9 	bl	8000eb0 <now_ms>
 8000f3e:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <countdown_tick+0x78>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	dc12      	bgt.n	8000f72 <countdown_tick+0x4e>
        if (countdownMode) motor_apply(false);
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <countdown_tick+0x7c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <countdown_tick+0x3a>
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ffb2 	bl	8000ec0 <motor_apply>
 8000f5c:	e002      	b.n	8000f64 <countdown_tick+0x40>
        else               motor_apply(true);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f7ff ffae 	bl	8000ec0 <motor_apply>
        countdownActive   = false;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <countdown_tick+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <countdown_tick+0x80>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
        return;
 8000f70:	e00f      	b.n	8000f92 <countdown_tick+0x6e>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <countdown_tick+0x78>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8000f82:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <countdown_tick+0x84>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	099b      	lsrs	r3, r3, #6
 8000f8a:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <countdown_tick+0x80>)
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e000      	b.n	8000f92 <countdown_tick+0x6e>
    if (!countdownActive) return;
 8000f90:	bf00      	nop
}
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000249 	.word	0x20000249
 8000f9c:	20000250 	.word	0x20000250
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	2000024c 	.word	0x2000024c
 8000fa8:	10624dd3 	.word	0x10624dd3

08000fac <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) return;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <twist_tick+0x90>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d137      	bne.n	8001030 <twist_tick+0x84>

    uint32_t tnow = now_ms();
 8000fc0:	f7ff ff76 	bl	8000eb0 <now_ms>
 8000fc4:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <twist_tick+0x94>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dc30      	bgt.n	8001034 <twist_tick+0x88>

    twist_on_phase = !twist_on_phase;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <twist_tick+0x98>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bf14      	ite	ne
 8000fda:	2301      	movne	r3, #1
 8000fdc:	2300      	moveq	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <twist_tick+0x98>)
 8000fee:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <twist_tick+0x98>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00d      	beq.n	8001014 <twist_tick+0x68>
        motor_apply(true);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ff61 	bl	8000ec0 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <twist_tick+0x90>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001006:	fb03 f202 	mul.w	r2, r3, r2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <twist_tick+0x94>)
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e010      	b.n	8001036 <twist_tick+0x8a>
    } else {
        motor_apply(false);
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff ff53 	bl	8000ec0 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <twist_tick+0x90>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001022:	fb03 f202 	mul.w	r2, r3, r2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <twist_tick+0x94>)
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e002      	b.n	8001036 <twist_tick+0x8a>
    if (!twistSettings.twistActive) return;
 8001030:	bf00      	nop
 8001032:	e000      	b.n	8001036 <twist_tick+0x8a>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001034:	bf00      	nop
    }
}
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000010 	.word	0x20000010
 8001040:	200002a0 	.word	0x200002a0
 8001044:	2000029c 	.word	0x2000029c

08001048 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) return;
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <search_tick+0x84>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d131      	bne.n	80010c0 <search_tick+0x78>

    uint32_t tnow = now_ms();
 800105c:	f7ff ff28 	bl	8000eb0 <now_ms>
 8001060:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <search_tick+0x88>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	dc2a      	bgt.n	80010c4 <search_tick+0x7c>

    if (!search_in_test) {
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <search_tick+0x8c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d010      	beq.n	800109e <search_tick+0x56>
        search_in_test = true;
 800107c:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <search_tick+0x8c>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
        motor_apply(true);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff ff1c 	bl	8000ec0 <motor_apply>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8001088:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <search_tick+0x84>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001090:	fb03 f202 	mul.w	r2, r3, r2
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <search_tick+0x88>)
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e013      	b.n	80010c6 <search_tick+0x7e>
    } else {
        motor_apply(false);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff0e 	bl	8000ec0 <motor_apply>
        search_in_test = false;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <search_tick+0x8c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
        search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <search_tick+0x84>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b2:	fb03 f202 	mul.w	r2, r3, r2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <search_tick+0x88>)
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e002      	b.n	80010c6 <search_tick+0x7e>
    if (!searchSettings.searchActive) return;
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <search_tick+0x7e>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 80010c4:	bf00      	nop
    }
}
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000004 	.word	0x20000004
 80010d0:	200002a8 	.word	0x200002a8
 80010d4:	200002a4 	.word	0x200002a4

080010d8 <seconds_since_midnight>:

/* ===== Timer (daily window) ===== */
static uint32_t seconds_since_midnight(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    /* TODO: replace with RTC if available */
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 80010de:	f7ff fee7 	bl	8000eb0 <now_ms>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <seconds_since_midnight+0x30>)
 80010e6:	fba2 1203 	umull	r1, r2, r2, r3
 80010ea:	0e12      	lsrs	r2, r2, #24
 80010ec:	4907      	ldr	r1, [pc, #28]	@ (800110c <seconds_since_midnight+0x34>)
 80010ee:	fb01 f202 	mul.w	r2, r1, r2
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <seconds_since_midnight+0x38>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	099b      	lsrs	r3, r3, #6
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	31b5d43b 	.word	0x31b5d43b
 800110c:	05265c00 	.word	0x05265c00
 8001110:	10624dd3 	.word	0x10624dd3

08001114 <timer_tick>:

static void timer_tick(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
    uint32_t nowS = seconds_since_midnight();
 800111a:	f7ff ffdd 	bl	80010d8 <seconds_since_midnight>
 800111e:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	e045      	b.n	80011b2 <timer_tick+0x9e>
        TimerSlot* s = &timerSlots[i];
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4a24      	ldr	r2, [pc, #144]	@ (80011c4 <timer_tick+0xb0>)
 8001132:	4413      	add	r3, r2
 8001134:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	7a1b      	ldrb	r3, [r3, #8]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d132      	bne.n	80011aa <timer_tick+0x96>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d812      	bhi.n	8001176 <timer_tick+0x62>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d306      	bcc.n	8001168 <timer_tick+0x54>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d201      	bcs.n	8001168 <timer_tick+0x54>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <timer_tick+0x56>
 8001168:	2300      	movs	r3, #0
 800116a:	72fb      	strb	r3, [r7, #11]
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	72fb      	strb	r3, [r7, #11]
 8001174:	e011      	b.n	800119a <timer_tick+0x86>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	d204      	bcs.n	800118a <timer_tick+0x76>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d201      	bcs.n	800118e <timer_tick+0x7a>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <timer_tick+0x7c>
 800118e:	2300      	movs	r3, #0
 8001190:	72fb      	strb	r3, [r7, #11]
 8001192:	7afb      	ldrb	r3, [r7, #11]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <timer_tick+0x98>
            motor_apply(inWindow);
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe8c 	bl	8000ec0 <motor_apply>
 80011a8:	e000      	b.n	80011ac <timer_tick+0x98>
        if (!s->active) continue;
 80011aa:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	ddb6      	ble.n	8001126 <timer_tick+0x12>
        }
    }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000254 	.word	0x20000254

080011c8 <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    if (senseDryRun && motorStatus == 1U) {
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <protections_tick+0x78>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <protections_tick+0x1e>
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <protections_tick+0x7c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d102      	bne.n	80011e6 <protections_tick+0x1e>
        motor_apply(false);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fe6d 	bl	8000ec0 <motor_apply>
    }

    if (senseOverLoad && motorStatus == 1U) {
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <protections_tick+0x80>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <protections_tick+0x38>
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <protections_tick+0x7c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <protections_tick+0x38>
        motor_apply(false);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fe60 	bl	8000ec0 <motor_apply>
    }

    if (senseOverUnderVolt) {
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <protections_tick+0x84>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <protections_tick+0x48>
        motor_apply(false);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fe58 	bl	8000ec0 <motor_apply>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <protections_tick+0x88>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d011      	beq.n	800123c <protections_tick+0x74>
 8001218:	f7ff fe4a 	bl	8000eb0 <now_ms>
 800121c:	4602      	mov	r2, r0
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <protections_tick+0x8c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <protections_tick+0x90>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d308      	bcc.n	800123c <protections_tick+0x74>
        motor_apply(false);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fe48 	bl	8000ec0 <motor_apply>
        senseMaxRunReached = true;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <protections_tick+0x94>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <protections_tick+0x88>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    }
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000290 	.word	0x20000290
 8001244:	20000248 	.word	0x20000248
 8001248:	20000291 	.word	0x20000291
 800124c:	20000292 	.word	0x20000292
 8001250:	20000294 	.word	0x20000294
 8001254:	20000298 	.word	0x20000298
 8001258:	006ddd00 	.word	0x006ddd00
 800125c:	20000293 	.word	0x20000293

08001260 <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 8001264:	f7ff faf0 	bl	8000848 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <leds_from_model+0x9c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d104      	bne.n	800127c <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2101      	movs	r1, #1
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fb06 	bl	8000888 <LED_SetIntent>
    }
    if (countdownActive && countdownMode) {
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <leds_from_model+0xa0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <leds_from_model+0x3c>
 8001286:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <leds_from_model+0xa4>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <leds_from_model+0x3c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 8001290:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001294:	2102      	movs	r1, #2
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff faf6 	bl	8000888 <LED_SetIntent>
    }
    if (senseDryRun) {
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <leds_from_model+0xa8>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <leds_from_model+0x50>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2101      	movs	r1, #1
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff faec 	bl	8000888 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <leds_from_model+0xac>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <leds_from_model+0x66>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 80012ba:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012be:	2102      	movs	r1, #2
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fae1 	bl	8000888 <LED_SetIntent>
    }
    if (senseOverLoad) {
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <leds_from_model+0xb0>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <leds_from_model+0x7c>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 80012d0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80012d4:	2102      	movs	r1, #2
 80012d6:	2002      	movs	r0, #2
 80012d8:	f7ff fad6 	bl	8000888 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 80012dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <leds_from_model+0xb4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <leds_from_model+0x92>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 80012e6:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80012ea:	2102      	movs	r1, #2
 80012ec:	2003      	movs	r0, #3
 80012ee:	f7ff facb 	bl	8000888 <LED_SetIntent>
    }

    LED_ApplyIntents();
 80012f2:	f7ff fae9 	bl	80008c8 <LED_ApplyIntents>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000248 	.word	0x20000248
 8001300:	20000249 	.word	0x20000249
 8001304:	20000000 	.word	0x20000000
 8001308:	20000290 	.word	0x20000290
 800130c:	20000293 	.word	0x20000293
 8001310:	20000291 	.word	0x20000291
 8001314:	20000292 	.word	0x20000292

08001318 <ModelHandle_Process>:
void ModelHandle_SetOverUnderVolt(bool on) { senseOverUnderVolt = on; }
void ModelHandle_ClearMaxRunFlag(void)     { senseMaxRunReached = false; }

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    countdown_tick();
 800131c:	f7ff fe02 	bl	8000f24 <countdown_tick>
    twist_tick();
 8001320:	f7ff fe44 	bl	8000fac <twist_tick>
    search_tick();
 8001324:	f7ff fe90 	bl	8001048 <search_tick>
    timer_tick();
 8001328:	f7ff fef4 	bl	8001114 <timer_tick>
    protections_tick();
 800132c:	f7ff ff4c 	bl	80011c8 <protections_tick>
    leds_from_model();
 8001330:	f7ff ff96 	bl	8001260 <leds_from_model>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <Motor_GetStatus>:

/* ===== UI helper ===== */
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <Motor_GetStatus+0x1c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000248 	.word	0x20000248

08001358 <Relay_Set>:
    /* Ensure off on start (change if your relay is active-low) */
    HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin|Relay2_Pin|Relay3_Pin, GPIO_PIN_RESET);
}

void Relay_Set(uint8_t relay_no, bool on)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
    switch (relay_no) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d014      	beq.n	8001398 <Relay_Set+0x40>
 800136e:	2b03      	cmp	r3, #3
 8001370:	dc19      	bgt.n	80013a6 <Relay_Set+0x4e>
 8001372:	2b01      	cmp	r3, #1
 8001374:	d002      	beq.n	800137c <Relay_Set+0x24>
 8001376:	2b02      	cmp	r3, #2
 8001378:	d007      	beq.n	800138a <Relay_Set+0x32>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        default: break;
 800137a:	e014      	b.n	80013a6 <Relay_Set+0x4e>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	461a      	mov	r2, r3
 8001380:	2101      	movs	r1, #1
 8001382:	480b      	ldr	r0, [pc, #44]	@ (80013b0 <Relay_Set+0x58>)
 8001384:	f002 f991 	bl	80036aa <HAL_GPIO_WritePin>
 8001388:	e00e      	b.n	80013a8 <Relay_Set+0x50>
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	461a      	mov	r2, r3
 800138e:	2102      	movs	r1, #2
 8001390:	4807      	ldr	r0, [pc, #28]	@ (80013b0 <Relay_Set+0x58>)
 8001392:	f002 f98a 	bl	80036aa <HAL_GPIO_WritePin>
 8001396:	e007      	b.n	80013a8 <Relay_Set+0x50>
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	461a      	mov	r2, r3
 800139c:	2104      	movs	r1, #4
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <Relay_Set+0x58>)
 80013a0:	f002 f983 	bl	80036aa <HAL_GPIO_WritePin>
 80013a4:	e000      	b.n	80013a8 <Relay_Set+0x50>
        default: break;
 80013a6:	bf00      	nop
    }
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40010c00 	.word	0x40010c00

080013b4 <lcd_line>:
static uint16_t edit_search_gap_s = 60, edit_search_dry_s = 10;
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;

/* ===== LCD Helpers (16 chars) ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    // ensure exactly 16 chars (pad with spaces)
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 80013c0:	f107 000c 	add.w	r0, r7, #12
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <lcd_line+0x38>)
 80013c8:	2111      	movs	r1, #17
 80013ca:	f004 fabd 	bl	8005948 <sniprintf>
    lcd_put_cur(row, 0);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f9ba 	bl	800074c <lcd_put_cur>
    lcd_send_string(ln);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f9d7 	bl	8000790 <lcd_send_string>
}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	08006344 	.word	0x08006344

080013f0 <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff ffda 	bl	80013b4 <lcd_line>
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff ffce 	bl	80013b4 <lcd_line>
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    lastUserAction = HAL_GetTick();
 8001424:	f001 fb7a 	bl	8002b1c <HAL_GetTick>
 8001428:	4603      	mov	r3, r0
 800142a:	4a02      	ldr	r2, [pc, #8]	@ (8001434 <refreshInactivityTimer+0x14>)
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200002b8 	.word	0x200002b8

08001438 <goto_menu_top>:
static void goto_menu_top(void){
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
    menu_idx = 0;
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <goto_menu_top+0x18>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
    menu_view_top = 0;
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <goto_menu_top+0x1c>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200002c0 	.word	0x200002c0
 8001454:	200002c4 	.word	0x200002c4

08001458 <format_menu_line>:

/* ===== Helper: format menu line (no nested functions) ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	70fb      	strb	r3, [r7, #3]
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b06      	cmp	r3, #6
 800146a:	d820      	bhi.n	80014ae <format_menu_line+0x56>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db1d      	blt.n	80014ae <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <format_menu_line+0x24>
 8001478:	233e      	movs	r3, #62	@ 0x3e
 800147a:	e000      	b.n	800147e <format_menu_line+0x26>
 800147c:	2320      	movs	r3, #32
 800147e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 8001482:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <format_menu_line+0x6c>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	f107 0014 	add.w	r0, r7, #20
 800148e:	4a0e      	ldr	r2, [pc, #56]	@ (80014c8 <format_menu_line+0x70>)
 8001490:	2110      	movs	r1, #16
 8001492:	f004 fa59 	bl	8005948 <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 8001496:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4613      	mov	r3, r2
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <format_menu_line+0x74>)
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f004 fa4e 	bl	8005948 <sniprintf>
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 80014ac:	e005      	b.n	80014ba <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                "); // blank line
 80014ae:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <format_menu_line+0x78>)
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f004 fa48 	bl	8005948 <sniprintf>
    }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	@ 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000020 	.word	0x20000020
 80014c8:	08006350 	.word	0x08006350
 80014cc:	0800635c 	.word	0x0800635c
 80014d0:	08006364 	.word	0x08006364

080014d4 <show_welcome>:

/* ===== Render functions ===== */

static void show_welcome(void){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    lcd_clear();
 80014d8:	f7ff f92b 	bl	8000732 <lcd_clear>
    lcd_line0(" Welcome to HELONIX");
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <show_welcome+0x18>)
 80014de:	f7ff ff87 	bl	80013f0 <lcd_line0>
    lcd_line1("  Embedded System   ");
 80014e2:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <show_welcome+0x1c>)
 80014e4:	f7ff ff90 	bl	8001408 <lcd_line1>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	08006378 	.word	0x08006378
 80014f0:	0800638c 	.word	0x0800638c

080014f4 <show_dash>:

static void show_dash(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	@ 0x38
 80014f8:	af02      	add	r7, sp, #8
    char line0[17], line1[17];

    // Line0: Motor status + Countdown status
    const char* motor = Motor_GetStatus() ? "ON" : "OFF";
 80014fa:	f7ff ff1d 	bl	8001338 <Motor_GetStatus>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <show_dash+0x14>
 8001504:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <show_dash+0xd4>)
 8001506:	e000      	b.n	800150a <show_dash+0x16>
 8001508:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <show_dash+0xd8>)
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const char* cnt = countdownActive ? (countdownMode ? "ON" : "ONF") : "NA"; // ONF => running in off mode (approx)
 800150c:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <show_dash+0xdc>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <show_dash+0x34>
 8001516:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <show_dash+0xe0>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <show_dash+0x30>
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <show_dash+0xd4>)
 8001522:	e002      	b.n	800152a <show_dash+0x36>
 8001524:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <show_dash+0xe4>)
 8001526:	e000      	b.n	800152a <show_dash+0x36>
 8001528:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <show_dash+0xe8>)
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
    snprintf(line0, sizeof(line0), "Motor:%-3s Cnt:%-3s", motor, cnt);
 800152c:	f107 0014 	add.w	r0, r7, #20
 8001530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001536:	4a2a      	ldr	r2, [pc, #168]	@ (80015e0 <show_dash+0xec>)
 8001538:	2111      	movs	r1, #17
 800153a:	f004 fa05 	bl	8005948 <sniprintf>

    // Line1: Water voltage or current mode
    if (adcData.voltages[0] > 2.5f) snprintf(line1,sizeof(line1),"Water: Full       ");
 800153e:	4b29      	ldr	r3, [pc, #164]	@ (80015e4 <show_dash+0xf0>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4929      	ldr	r1, [pc, #164]	@ (80015e8 <show_dash+0xf4>)
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe6d 	bl	8000224 <__aeabi_fcmpgt>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <show_dash+0x6a>
 8001550:	463b      	mov	r3, r7
 8001552:	4a26      	ldr	r2, [pc, #152]	@ (80015ec <show_dash+0xf8>)
 8001554:	2111      	movs	r1, #17
 8001556:	4618      	mov	r0, r3
 8001558:	f004 f9f6 	bl	8005948 <sniprintf>
 800155c:	e026      	b.n	80015ac <show_dash+0xb8>
    else if (adcData.voltages[0] > 1.0f) snprintf(line1,sizeof(line1),"Water: Half       ");
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <show_dash+0xf0>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fe5c 	bl	8000224 <__aeabi_fcmpgt>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <show_dash+0x8c>
 8001572:	463b      	mov	r3, r7
 8001574:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <show_dash+0xfc>)
 8001576:	2111      	movs	r1, #17
 8001578:	4618      	mov	r0, r3
 800157a:	f004 f9e5 	bl	8005948 <sniprintf>
 800157e:	e015      	b.n	80015ac <show_dash+0xb8>
    else if (adcData.voltages[0] > 0.1f) snprintf(line1,sizeof(line1),"Water: Low        ");
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <show_dash+0xf0>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	491b      	ldr	r1, [pc, #108]	@ (80015f4 <show_dash+0x100>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe4c 	bl	8000224 <__aeabi_fcmpgt>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <show_dash+0xac>
 8001592:	463b      	mov	r3, r7
 8001594:	4a18      	ldr	r2, [pc, #96]	@ (80015f8 <show_dash+0x104>)
 8001596:	2111      	movs	r1, #17
 8001598:	4618      	mov	r0, r3
 800159a:	f004 f9d5 	bl	8005948 <sniprintf>
 800159e:	e005      	b.n	80015ac <show_dash+0xb8>
    else snprintf(line1,sizeof(line1),"Water: Empty      ");
 80015a0:	463b      	mov	r3, r7
 80015a2:	4a16      	ldr	r2, [pc, #88]	@ (80015fc <show_dash+0x108>)
 80015a4:	2111      	movs	r1, #17
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 f9ce 	bl	8005948 <sniprintf>

    lcd_line0(line0);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff1d 	bl	80013f0 <lcd_line0>
    lcd_line1(line1);
 80015b6:	463b      	mov	r3, r7
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff25 	bl	8001408 <lcd_line1>
}
 80015be:	bf00      	nop
 80015c0:	3730      	adds	r7, #48	@ 0x30
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	080063a4 	.word	0x080063a4
 80015cc:	080063a8 	.word	0x080063a8
 80015d0:	20000249 	.word	0x20000249
 80015d4:	20000000 	.word	0x20000000
 80015d8:	080063ac 	.word	0x080063ac
 80015dc:	080063b0 	.word	0x080063b0
 80015e0:	080063b4 	.word	0x080063b4
 80015e4:	20000210 	.word	0x20000210
 80015e8:	40200000 	.word	0x40200000
 80015ec:	080063c8 	.word	0x080063c8
 80015f0:	080063dc 	.word	0x080063dc
 80015f4:	3dcccccd 	.word	0x3dcccccd
 80015f8:	080063f0 	.word	0x080063f0
 80015fc:	08006404 	.word	0x08006404

08001600 <show_menu>:

static void show_menu(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0
    // Show two menu items (top: menu_view_top, bottom: menu_view_top+1)
    char line0[17], line1[17];

    // Ensure menu_view_top keeps cursor visible
    if (menu_idx < menu_view_top) {
 8001606:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <show_menu+0xac>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <show_menu+0xb0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	da04      	bge.n	800161c <show_menu+0x1c>
        menu_view_top = menu_idx;
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <show_menu+0xac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a26      	ldr	r2, [pc, #152]	@ (80016b0 <show_menu+0xb0>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <show_menu+0x34>
    } else if (menu_idx > menu_view_top + 1) {
 800161c:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <show_menu+0xb0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <show_menu+0xac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	da04      	bge.n	8001634 <show_menu+0x34>
        menu_view_top = menu_idx - 1;
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <show_menu+0xac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3b01      	subs	r3, #1
 8001630:	4a1f      	ldr	r2, [pc, #124]	@ (80016b0 <show_menu+0xb0>)
 8001632:	6013      	str	r3, [r2, #0]
    }

    int top = menu_view_top;
 8001634:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <show_menu+0xb0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int bottom = top + 1;
 800163a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800163c:	3301      	adds	r3, #1
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28

    format_menu_line(line0, sizeof(line0), top, menu_idx == top && cursorVisible);
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <show_menu+0xac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001646:	429a      	cmp	r2, r3
 8001648:	d105      	bne.n	8001656 <show_menu+0x56>
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <show_menu+0xb4>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <show_menu+0x56>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <show_menu+0x58>
 8001656:	2300      	movs	r3, #0
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f107 0014 	add.w	r0, r7, #20
 8001662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001664:	2111      	movs	r1, #17
 8001666:	f7ff fef7 	bl	8001458 <format_menu_line>
    format_menu_line(line1, sizeof(line1), bottom, menu_idx == bottom && cursorVisible);
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <show_menu+0xac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001670:	429a      	cmp	r2, r3
 8001672:	d105      	bne.n	8001680 <show_menu+0x80>
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <show_menu+0xb4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <show_menu+0x80>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <show_menu+0x82>
 8001680:	2300      	movs	r3, #0
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4638      	mov	r0, r7
 800168a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800168c:	2111      	movs	r1, #17
 800168e:	f7ff fee3 	bl	8001458 <format_menu_line>

    lcd_line0(line0);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff feaa 	bl	80013f0 <lcd_line0>
    lcd_line1(line1);
 800169c:	463b      	mov	r3, r7
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff feb2 	bl	8001408 <lcd_line1>
}
 80016a4:	bf00      	nop
 80016a6:	3730      	adds	r7, #48	@ 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200002c0 	.word	0x200002c0
 80016b0:	200002c4 	.word	0x200002c4
 80016b4:	2000001d 	.word	0x2000001d

080016b8 <show_manual>:

/* Manual mode screen */
static void show_manual(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode       ");
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <show_manual+0x54>)
 80016c4:	2111      	movs	r1, #17
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 f93e 	bl	8005948 <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop           Back");
 80016cc:	f7ff fe34 	bl	8001338 <Motor_GetStatus>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <show_manual+0x2c>
 80016d6:	463b      	mov	r3, r7
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <show_manual+0x58>)
 80016da:	2111      	movs	r1, #17
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 f933 	bl	8005948 <sniprintf>
 80016e2:	e005      	b.n	80016f0 <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start          Back");
 80016e4:	463b      	mov	r3, r7
 80016e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <show_manual+0x5c>)
 80016e8:	2111      	movs	r1, #17
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 f92c 	bl	8005948 <sniprintf>
    lcd_line0(line0);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fe7b 	bl	80013f0 <lcd_line0>
    lcd_line1(line1);
 80016fa:	463b      	mov	r3, r7
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe83 	bl	8001408 <lcd_line1>
}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	@ 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	08006418 	.word	0x08006418
 8001710:	0800642c 	.word	0x0800642c
 8001714:	08006444 	.word	0x08006444

08001718 <show_semi_auto>:

static void show_semi_auto(void){
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode    ");
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4a11      	ldr	r2, [pc, #68]	@ (8001768 <show_semi_auto+0x50>)
 8001724:	2111      	movs	r1, #17
 8001726:	4618      	mov	r0, r3
 8001728:	f004 f90e 	bl	8005948 <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable        Back");
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <show_semi_auto+0x54>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <show_semi_auto+0x2a>
 8001734:	463b      	mov	r3, r7
 8001736:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <show_semi_auto+0x58>)
 8001738:	2111      	movs	r1, #17
 800173a:	4618      	mov	r0, r3
 800173c:	f004 f904 	bl	8005948 <sniprintf>
 8001740:	e005      	b.n	800174e <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable         Back");
 8001742:	463b      	mov	r3, r7
 8001744:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <show_semi_auto+0x5c>)
 8001746:	2111      	movs	r1, #17
 8001748:	4618      	mov	r0, r3
 800174a:	f004 f8fd 	bl	8005948 <sniprintf>
    lcd_line0(line0);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe4c 	bl	80013f0 <lcd_line0>
    lcd_line1(line1);
 8001758:	463b      	mov	r3, r7
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe54 	bl	8001408 <lcd_line1>
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	@ 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	0800645c 	.word	0x0800645c
 800176c:	200002bc 	.word	0x200002bc
 8001770:	08006470 	.word	0x08006470
 8001774:	08006488 	.word	0x08006488

08001778 <show_timer>:

/* Timer mode display */
static void show_timer(void){
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	@ 0x30
 800177c:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Timer1 ON %02d:%02d   ", edit_timer_on_h, edit_timer_on_m);
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <show_timer+0x54>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <show_timer+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	f107 0014 	add.w	r0, r7, #20
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4613      	mov	r3, r2
 8001790:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <show_timer+0x5c>)
 8001792:	2111      	movs	r1, #17
 8001794:	f004 f8d8 	bl	8005948 <sniprintf>
    snprintf(l1,sizeof(l1),"Timer1 OFF %02d:%02d  ", edit_timer_off_h, edit_timer_off_m);
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <show_timer+0x60>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <show_timer+0x64>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4638      	mov	r0, r7
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4613      	mov	r3, r2
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <show_timer+0x68>)
 80017aa:	2111      	movs	r1, #17
 80017ac:	f004 f8cc 	bl	8005948 <sniprintf>
    lcd_line0(l0);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fe1b 	bl	80013f0 <lcd_line0>
    lcd_line1(l1);
 80017ba:	463b      	mov	r3, r7
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fe23 	bl	8001408 <lcd_line1>
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000003c 	.word	0x2000003c
 80017d0:	2000003d 	.word	0x2000003d
 80017d4:	080064a0 	.word	0x080064a0
 80017d8:	2000003e 	.word	0x2000003e
 80017dc:	2000003f 	.word	0x2000003f
 80017e0:	080064b8 	.word	0x080064b8

080017e4 <show_search>:

/* Search mode display */
static void show_search(void){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	@ 0x30
 80017e8:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Gap:%3ds Dry:%3ds  ", edit_search_gap_s, edit_search_dry_s);
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <show_search+0x48>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <show_search+0x4c>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f107 0014 	add.w	r0, r7, #20
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	4613      	mov	r3, r2
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <show_search+0x50>)
 80017fe:	2111      	movs	r1, #17
 8001800:	f004 f8a2 	bl	8005948 <sniprintf>
    snprintf(l1,sizeof(l1),">Edit           Back");
 8001804:	463b      	mov	r3, r7
 8001806:	4a0c      	ldr	r2, [pc, #48]	@ (8001838 <show_search+0x54>)
 8001808:	2111      	movs	r1, #17
 800180a:	4618      	mov	r0, r3
 800180c:	f004 f89c 	bl	8005948 <sniprintf>
    lcd_line0(l0);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fdeb 	bl	80013f0 <lcd_line0>
    lcd_line1(l1);
 800181a:	463b      	mov	r3, r7
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fdf3 	bl	8001408 <lcd_line1>
}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	@ 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000040 	.word	0x20000040
 8001830:	20000042 	.word	0x20000042
 8001834:	080064d0 	.word	0x080064d0
 8001838:	080064e4 	.word	0x080064e4

0800183c <show_countdown>:

/* Countdown display */
static void show_countdown(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	b090      	sub	sp, #64	@ 0x40
 8001840:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    if (countdownActive) {
 8001842:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <show_countdown+0x84>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01e      	beq.n	800188a <show_countdown+0x4e>
        // Show remaining minutes:seconds if possible
        uint32_t sec = countdownDuration;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <show_countdown+0x88>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec / 60;
 8001852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001854:	4a1c      	ldr	r2, [pc, #112]	@ (80018c8 <show_countdown+0x8c>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s = sec % 60;
 800185e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <show_countdown+0x8c>)
 8001862:	fba3 1302 	umull	r1, r3, r3, r2
 8001866:	0959      	lsrs	r1, r3, #5
 8001868:	460b      	mov	r3, r1
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	1a5b      	subs	r3, r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Countdown %02d:%02d   ", (int)min, (int)s);
 8001874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	f107 0018 	add.w	r0, r7, #24
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <show_countdown+0x90>)
 8001882:	2111      	movs	r1, #17
 8001884:	f004 f860 	bl	8005948 <sniprintf>
 8001888:	e006      	b.n	8001898 <show_countdown+0x5c>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inactive ");
 800188a:	f107 0318 	add.w	r3, r7, #24
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <show_countdown+0x94>)
 8001890:	2111      	movs	r1, #17
 8001892:	4618      	mov	r0, r3
 8001894:	f004 f858 	bl	8005948 <sniprintf>
    }
    snprintf(l1,sizeof(l1),">Set        Start Back");
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <show_countdown+0x98>)
 800189c:	2111      	movs	r1, #17
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 f852 	bl	8005948 <sniprintf>
    lcd_line0(l0);
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fda1 	bl	80013f0 <lcd_line0>
    lcd_line1(l1);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fda9 	bl	8001408 <lcd_line1>
}
 80018b6:	bf00      	nop
 80018b8:	3738      	adds	r7, #56	@ 0x38
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000249 	.word	0x20000249
 80018c4:	2000024c 	.word	0x2000024c
 80018c8:	88888889 	.word	0x88888889
 80018cc:	080064fc 	.word	0x080064fc
 80018d0:	08006514 	.word	0x08006514
 80018d4:	08006528 	.word	0x08006528

080018d8 <show_twist>:

/* Twist mode display */
static void show_twist(void){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Twist ON:%3ds      ", edit_twist_on_s);
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <show_twist+0x40>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	f107 0014 	add.w	r0, r7, #20
 80018e6:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <show_twist+0x44>)
 80018e8:	2111      	movs	r1, #17
 80018ea:	f004 f82d 	bl	8005948 <sniprintf>
    snprintf(l1,sizeof(l1),"Twist OFF:%3ds     ", edit_twist_off_s);
 80018ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <show_twist+0x48>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	4638      	mov	r0, r7
 80018f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <show_twist+0x4c>)
 80018f6:	2111      	movs	r1, #17
 80018f8:	f004 f826 	bl	8005948 <sniprintf>
    lcd_line0(l0);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fd75 	bl	80013f0 <lcd_line0>
    lcd_line1(l1);
 8001906:	463b      	mov	r3, r7
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd7d 	bl	8001408 <lcd_line1>
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	@ 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000044 	.word	0x20000044
 800191c:	08006540 	.word	0x08006540
 8001920:	20000046 	.word	0x20000046
 8001924:	08006554 	.word	0x08006554

08001928 <apply_search_settings>:

/* ===== Apply functions (write edits to real settings) ===== */
static void apply_search_settings(void){
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <apply_search_settings+0x20>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <apply_search_settings+0x24>)
 8001934:	605a      	str	r2, [r3, #4]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <apply_search_settings+0x28>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <apply_search_settings+0x24>)
 800193e:	609a      	str	r2, [r3, #8]
    // If you need to call any apply function or save to non-volatile, do it here.
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000040 	.word	0x20000040
 800194c:	20000004 	.word	0x20000004
 8001950:	20000042 	.word	0x20000042

08001954 <apply_twist_settings>:

static void apply_twist_settings(void){
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <apply_twist_settings+0x20>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <apply_twist_settings+0x24>)
 8001960:	605a      	str	r2, [r3, #4]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <apply_twist_settings+0x28>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <apply_twist_settings+0x24>)
 800196a:	609a      	str	r2, [r3, #8]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000044 	.word	0x20000044
 8001978:	20000010 	.word	0x20000010
 800197c:	20000046 	.word	0x20000046

08001980 <apply_countdown_settings>:

static void apply_countdown_settings(void){
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <apply_countdown_settings+0x20>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	461a      	mov	r2, r3
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <apply_countdown_settings+0x24>)
 8001996:	601a      	str	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000048 	.word	0x20000048
 80019a4:	2000024c 	.word	0x2000024c

080019a8 <apply_timer_settings>:

static void apply_timer_settings(void){
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
    (void)edit_timer_on_h;
    (void)edit_timer_on_m;
    (void)edit_timer_off_h;
    (void)edit_timer_off_m;
    // e.g. timerSlots[0].onHour = edit_timer_on_h; ...
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <Screen_Update>:

/* ===== Core Update Loop ===== */

void Screen_Update(void){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0dc      	sub	sp, #368	@ 0x170
 80019b8:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80019ba:	f001 f8af 	bl	8002b1c <HAL_GetTick>
 80019be:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168

    // Cursor blink on menu and all edit screens
    bool cursorBlinkActive = false;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
    switch (ui) {
 80019c8:	4bbd      	ldr	r3, [pc, #756]	@ (8001cc0 <Screen_Update+0x30c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b11      	cmp	r3, #17
 80019ce:	bf8c      	ite	hi
 80019d0:	2201      	movhi	r2, #1
 80019d2:	2200      	movls	r2, #0
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d10f      	bne.n	80019fa <Screen_Update+0x46>
 80019da:	4aba      	ldr	r2, [pc, #744]	@ (8001cc4 <Screen_Update+0x310>)
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <Screen_Update+0x46>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
            break;
 80019f8:	e006      	b.n	8001a08 <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
            cursorVisible = true; // always visible outside blinking screens
 8001a00:	4bb1      	ldr	r3, [pc, #708]	@ (8001cc8 <Screen_Update+0x314>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
            break;
 8001a06:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 8001a08:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01e      	beq.n	8001a4e <Screen_Update+0x9a>
 8001a10:	4bae      	ldr	r3, [pc, #696]	@ (8001ccc <Screen_Update+0x318>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d315      	bcc.n	8001a4e <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 8001a22:	4ba9      	ldr	r3, [pc, #676]	@ (8001cc8 <Screen_Update+0x314>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4ba2      	ldr	r3, [pc, #648]	@ (8001cc8 <Screen_Update+0x314>)
 8001a3e:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 8001a40:	4aa2      	ldr	r2, [pc, #648]	@ (8001ccc <Screen_Update+0x318>)
 8001a42:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a46:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8001a48:	4ba1      	ldr	r3, [pc, #644]	@ (8001cd0 <Screen_Update+0x31c>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
    }

    /* Welcome timeout */
    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 8001a4e:	4b9c      	ldr	r3, [pc, #624]	@ (8001cc0 <Screen_Update+0x30c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d112      	bne.n	8001a7c <Screen_Update+0xc8>
 8001a56:	4b9f      	ldr	r3, [pc, #636]	@ (8001cd4 <Screen_Update+0x320>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d309      	bcc.n	8001a7c <Screen_Update+0xc8>
        ui = UI_DASH;
 8001a68:	4b95      	ldr	r3, [pc, #596]	@ (8001cc0 <Screen_Update+0x30c>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8001a6e:	4a99      	ldr	r2, [pc, #612]	@ (8001cd4 <Screen_Update+0x320>)
 8001a70:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a74:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8001a76:	4b96      	ldr	r3, [pc, #600]	@ (8001cd0 <Screen_Update+0x31c>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
    }

    /* Optional auto-back to dashboard after inactivity in menus/edit screens */
    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 8001a7c:	4b90      	ldr	r3, [pc, #576]	@ (8001cc0 <Screen_Update+0x30c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d012      	beq.n	8001aaa <Screen_Update+0xf6>
 8001a84:	4b8e      	ldr	r3, [pc, #568]	@ (8001cc0 <Screen_Update+0x30c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d00e      	beq.n	8001aaa <Screen_Update+0xf6>
 8001a8c:	4b92      	ldr	r3, [pc, #584]	@ (8001cd8 <Screen_Update+0x324>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d305      	bcc.n	8001aaa <Screen_Update+0xf6>
        ui = UI_DASH;
 8001a9e:	4b88      	ldr	r3, [pc, #544]	@ (8001cc0 <Screen_Update+0x30c>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 8001aa4:	4b8a      	ldr	r3, [pc, #552]	@ (8001cd0 <Screen_Update+0x31c>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
    }

    // Always refresh dashboard every 1s
    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 8001aaa:	4b85      	ldr	r3, [pc, #532]	@ (8001cc0 <Screen_Update+0x30c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d10e      	bne.n	8001ad0 <Screen_Update+0x11c>
 8001ab2:	4b88      	ldr	r3, [pc, #544]	@ (8001cd4 <Screen_Update+0x320>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ac0:	d306      	bcc.n	8001ad0 <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 8001ac2:	4b83      	ldr	r3, [pc, #524]	@ (8001cd0 <Screen_Update+0x31c>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8001ac8:	4a82      	ldr	r2, [pc, #520]	@ (8001cd4 <Screen_Update+0x320>)
 8001aca:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ace:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 8001ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd0 <Screen_Update+0x31c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <Screen_Update+0x132>
 8001ad8:	4b79      	ldr	r3, [pc, #484]	@ (8001cc0 <Screen_Update+0x30c>)
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	4b7f      	ldr	r3, [pc, #508]	@ (8001cdc <Screen_Update+0x328>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f000 816a 	beq.w	8001dba <Screen_Update+0x406>
        last_ui = ui;
 8001ae6:	4b76      	ldr	r3, [pc, #472]	@ (8001cc0 <Screen_Update+0x30c>)
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	4b7c      	ldr	r3, [pc, #496]	@ (8001cdc <Screen_Update+0x328>)
 8001aec:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 8001aee:	4b78      	ldr	r3, [pc, #480]	@ (8001cd0 <Screen_Update+0x31c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]

        lcd_clear();
 8001af4:	f7fe fe1d 	bl	8000732 <lcd_clear>
        switch (ui) {
 8001af8:	4b71      	ldr	r3, [pc, #452]	@ (8001cc0 <Screen_Update+0x30c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b11      	cmp	r3, #17
 8001afe:	f200 8155 	bhi.w	8001dac <Screen_Update+0x3f8>
 8001b02:	a201      	add	r2, pc, #4	@ (adr r2, 8001b08 <Screen_Update+0x154>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b51 	.word	0x08001b51
 8001b0c:	08001b57 	.word	0x08001b57
 8001b10:	08001b5d 	.word	0x08001b5d
 8001b14:	08001b63 	.word	0x08001b63
 8001b18:	08001b69 	.word	0x08001b69
 8001b1c:	08001b6f 	.word	0x08001b6f
 8001b20:	08001b87 	.word	0x08001b87
 8001b24:	08001bbb 	.word	0x08001bbb
 8001b28:	08001bef 	.word	0x08001bef
 8001b2c:	08001c23 	.word	0x08001c23
 8001b30:	08001b75 	.word	0x08001b75
 8001b34:	08001c57 	.word	0x08001c57
 8001b38:	08001c8b 	.word	0x08001c8b
 8001b3c:	08001b7b 	.word	0x08001b7b
 8001b40:	08001d15 	.word	0x08001d15
 8001b44:	08001b81 	.word	0x08001b81
 8001b48:	08001d49 	.word	0x08001d49
 8001b4c:	08001d7d 	.word	0x08001d7d
            case UI_WELCOME: show_welcome(); break;
 8001b50:	f7ff fcc0 	bl	80014d4 <show_welcome>
 8001b54:	e131      	b.n	8001dba <Screen_Update+0x406>
            case UI_DASH: show_dash(); break;
 8001b56:	f7ff fccd 	bl	80014f4 <show_dash>
 8001b5a:	e12e      	b.n	8001dba <Screen_Update+0x406>
            case UI_MENU: show_menu(); break;
 8001b5c:	f7ff fd50 	bl	8001600 <show_menu>
 8001b60:	e12b      	b.n	8001dba <Screen_Update+0x406>
            case UI_MANUAL: show_manual(); break;
 8001b62:	f7ff fda9 	bl	80016b8 <show_manual>
 8001b66:	e128      	b.n	8001dba <Screen_Update+0x406>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 8001b68:	f7ff fdd6 	bl	8001718 <show_semi_auto>
 8001b6c:	e125      	b.n	8001dba <Screen_Update+0x406>
            case UI_TIMER: show_timer(); break;
 8001b6e:	f7ff fe03 	bl	8001778 <show_timer>
 8001b72:	e122      	b.n	8001dba <Screen_Update+0x406>
            case UI_SEARCH: show_search(); break;
 8001b74:	f7ff fe36 	bl	80017e4 <show_search>
 8001b78:	e11f      	b.n	8001dba <Screen_Update+0x406>
            case UI_COUNTDOWN: show_countdown(); break;
 8001b7a:	f7ff fe5f 	bl	800183c <show_countdown>
 8001b7e:	e11c      	b.n	8001dba <Screen_Update+0x406>
            case UI_TWIST: show_twist(); break;
 8001b80:	f7ff feaa 	bl	80018d8 <show_twist>
 8001b84:	e119      	b.n	8001dba <Screen_Update+0x406>

            /* Editing screens show a small edit UI permitting up/down to change value. */
            case UI_TIMER_EDIT_ON_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Hour: %02d  ", edit_timer_on_h);
 8001b86:	4b56      	ldr	r3, [pc, #344]	@ (8001ce0 <Screen_Update+0x32c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8001b8e:	4a55      	ldr	r2, [pc, #340]	@ (8001ce4 <Screen_Update+0x330>)
 8001b90:	2111      	movs	r1, #17
 8001b92:	f003 fed9 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8001b96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001b9a:	4a53      	ldr	r2, [pc, #332]	@ (8001ce8 <Screen_Update+0x334>)
 8001b9c:	2111      	movs	r1, #17
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fed2 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001ba4:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fc21 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001bae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fc28 	bl	8001408 <lcd_line1>
                break;
 8001bb8:	e0ff      	b.n	8001dba <Screen_Update+0x406>
            }
            case UI_TIMER_EDIT_ON_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Min: %02d  ", edit_timer_on_m);
 8001bba:	4b4c      	ldr	r3, [pc, #304]	@ (8001cec <Screen_Update+0x338>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8001bc2:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf0 <Screen_Update+0x33c>)
 8001bc4:	2111      	movs	r1, #17
 8001bc6:	f003 febf 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8001bca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bce:	4a46      	ldr	r2, [pc, #280]	@ (8001ce8 <Screen_Update+0x334>)
 8001bd0:	2111      	movs	r1, #17
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 feb8 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001bd8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fc07 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001be2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc0e 	bl	8001408 <lcd_line1>
                break;
 8001bec:	e0e5      	b.n	8001dba <Screen_Update+0x406>
            }
            case UI_TIMER_EDIT_OFF_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d  ", edit_timer_off_h);
 8001bee:	4b41      	ldr	r3, [pc, #260]	@ (8001cf4 <Screen_Update+0x340>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8001bf6:	4a40      	ldr	r2, [pc, #256]	@ (8001cf8 <Screen_Update+0x344>)
 8001bf8:	2111      	movs	r1, #17
 8001bfa:	f003 fea5 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8001bfe:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001c02:	4a39      	ldr	r2, [pc, #228]	@ (8001ce8 <Screen_Update+0x334>)
 8001c04:	2111      	movs	r1, #17
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fe9e 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001c0c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fbed 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001c16:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fbf4 	bl	8001408 <lcd_line1>
                break;
 8001c20:	e0cb      	b.n	8001dba <Screen_Update+0x406>
            }
            case UI_TIMER_EDIT_OFF_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d  ", edit_timer_off_m);
 8001c22:	4b36      	ldr	r3, [pc, #216]	@ (8001cfc <Screen_Update+0x348>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8001c2a:	4a35      	ldr	r2, [pc, #212]	@ (8001d00 <Screen_Update+0x34c>)
 8001c2c:	2111      	movs	r1, #17
 8001c2e:	f003 fe8b 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8001c32:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001c36:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce8 <Screen_Update+0x334>)
 8001c38:	2111      	movs	r1, #17
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fe84 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001c40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fbd3 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001c4a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fbda 	bl	8001408 <lcd_line1>
                break;
 8001c54:	e0b1      	b.n	8001dba <Screen_Update+0x406>
            }
            case UI_SEARCH_EDIT_GAP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Gap: %3ds  ", edit_search_gap_s);
 8001c56:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <Screen_Update+0x350>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8001c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8001d08 <Screen_Update+0x354>)
 8001c60:	2111      	movs	r1, #17
 8001c62:	f003 fe71 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8001c66:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce8 <Screen_Update+0x334>)
 8001c6c:	2111      	movs	r1, #17
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fe6a 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001c74:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fbb9 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001c7e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fbc0 	bl	8001408 <lcd_line1>
                break;
 8001c88:	e097      	b.n	8001dba <Screen_Update+0x406>
            }
            case UI_SEARCH_EDIT_DRY: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Dry: %3ds  ", edit_search_dry_s);
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <Screen_Update+0x358>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8001c92:	4a1f      	ldr	r2, [pc, #124]	@ (8001d10 <Screen_Update+0x35c>)
 8001c94:	2111      	movs	r1, #17
 8001c96:	f003 fe57 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8001c9a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <Screen_Update+0x334>)
 8001ca0:	2111      	movs	r1, #17
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fe50 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001ca8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fb9f 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001cb2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fba6 	bl	8001408 <lcd_line1>
                break;
 8001cbc:	e07d      	b.n	8001dba <Screen_Update+0x406>
 8001cbe:	bf00      	nop
 8001cc0:	200002b0 	.word	0x200002b0
 8001cc4:	00035bc4 	.word	0x00035bc4
 8001cc8:	2000001d 	.word	0x2000001d
 8001ccc:	200002b4 	.word	0x200002b4
 8001cd0:	200002b1 	.word	0x200002b1
 8001cd4:	200002ac 	.word	0x200002ac
 8001cd8:	200002b8 	.word	0x200002b8
 8001cdc:	2000001c 	.word	0x2000001c
 8001ce0:	2000003c 	.word	0x2000003c
 8001ce4:	08006568 	.word	0x08006568
 8001ce8:	08006580 	.word	0x08006580
 8001cec:	2000003d 	.word	0x2000003d
 8001cf0:	08006594 	.word	0x08006594
 8001cf4:	2000003e 	.word	0x2000003e
 8001cf8:	080065a8 	.word	0x080065a8
 8001cfc:	2000003f 	.word	0x2000003f
 8001d00:	080065bc 	.word	0x080065bc
 8001d04:	20000040 	.word	0x20000040
 8001d08:	080065d0 	.word	0x080065d0
 8001d0c:	20000042 	.word	0x20000042
 8001d10:	080065e4 	.word	0x080065e4
            }
            case UI_COUNTDOWN_EDIT_MIN: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Min: %3d    ", edit_countdown_min);
 8001d14:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc4 <Screen_Update+0x410>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc8 <Screen_Update+0x414>)
 8001d1e:	2111      	movs	r1, #17
 8001d20:	f003 fe12 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel Start");
 8001d24:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001d28:	4a28      	ldr	r2, [pc, #160]	@ (8001dcc <Screen_Update+0x418>)
 8001d2a:	2111      	movs	r1, #17
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fe0b 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001d32:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fb5a 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001d3c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fb61 	bl	8001408 <lcd_line1>
                break;
 8001d46:	e038      	b.n	8001dba <Screen_Update+0x406>
            }
            case UI_TWIST_EDIT_ON: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T ON: %3ds  ", edit_twist_on_s);
 8001d48:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <Screen_Update+0x41c>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <Screen_Update+0x420>)
 8001d52:	2111      	movs	r1, #17
 8001d54:	f003 fdf8 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8001d58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <Screen_Update+0x424>)
 8001d5e:	2111      	movs	r1, #17
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fdf1 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001d66:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fb40 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001d70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fb47 	bl	8001408 <lcd_line1>
                break;
 8001d7a:	e01e      	b.n	8001dba <Screen_Update+0x406>
            }
            case UI_TWIST_EDIT_OFF: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T OFF: %3ds ", edit_twist_off_s);
 8001d7c:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <Screen_Update+0x428>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	f107 0014 	add.w	r0, r7, #20
 8001d84:	4a16      	ldr	r2, [pc, #88]	@ (8001de0 <Screen_Update+0x42c>)
 8001d86:	2111      	movs	r1, #17
 8001d88:	f003 fdde 	bl	8005948 <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <Screen_Update+0x424>)
 8001d90:	2111      	movs	r1, #17
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fdd8 	bl	8005948 <sniprintf>
                lcd_line0(l0);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fb27 	bl	80013f0 <lcd_line0>
                lcd_line1(l1);
 8001da2:	463b      	mov	r3, r7
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fb2f 	bl	8001408 <lcd_line1>
                break;
 8001daa:	e006      	b.n	8001dba <Screen_Update+0x406>
            }
            default:
                lcd_line0("Not Implemented   ");
 8001dac:	480d      	ldr	r0, [pc, #52]	@ (8001de4 <Screen_Update+0x430>)
 8001dae:	f7ff fb1f 	bl	80013f0 <lcd_line0>
                lcd_line1("                  ");
 8001db2:	480d      	ldr	r0, [pc, #52]	@ (8001de8 <Screen_Update+0x434>)
 8001db4:	f7ff fb28 	bl	8001408 <lcd_line1>
                break;
 8001db8:	bf00      	nop
        }
    }
}
 8001dba:	bf00      	nop
 8001dbc:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000048 	.word	0x20000048
 8001dc8:	080065f8 	.word	0x080065f8
 8001dcc:	0800660c 	.word	0x0800660c
 8001dd0:	20000044 	.word	0x20000044
 8001dd4:	08006624 	.word	0x08006624
 8001dd8:	08006580 	.word	0x08006580
 8001ddc:	20000046 	.word	0x20000046
 8001de0:	08006638 	.word	0x08006638
 8001de4:	0800664c 	.word	0x0800664c
 8001de8:	08006660 	.word	0x08006660

08001dec <Screen_Init>:

/* ===== Initialization / Reset ===== */

void Screen_Init(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
    lcd_init();
 8001df0:	f7fe fce3 	bl	80007ba <lcd_init>
    ui = UI_WELCOME;
 8001df4:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <Screen_Init+0x68>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <Screen_Init+0x6c>)
 8001dfc:	2212      	movs	r2, #18
 8001dfe:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <Screen_Init+0x70>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8001e06:	f000 fe89 	bl	8002b1c <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a14      	ldr	r2, [pc, #80]	@ (8001e60 <Screen_Init+0x74>)
 8001e0e:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 8001e10:	f7ff fb06 	bl	8001420 <refreshInactivityTimer>

    // initialize edits from actual settings
    edit_search_gap_s = searchSettings.testingGapSeconds;
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <Screen_Init+0x78>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <Screen_Init+0x7c>)
 8001e1c:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <Screen_Init+0x78>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <Screen_Init+0x80>)
 8001e26:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s = twistSettings.onDurationSeconds;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <Screen_Init+0x84>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <Screen_Init+0x88>)
 8001e30:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s = twistSettings.offDurationSeconds;
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <Screen_Init+0x84>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <Screen_Init+0x8c>)
 8001e3a:	801a      	strh	r2, [r3, #0]
    // countdown: convert seconds to minutes if possible
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <Screen_Init+0x90>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0f      	ldr	r2, [pc, #60]	@ (8001e80 <Screen_Init+0x94>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <Screen_Init+0x98>)
 8001e4c:	801a      	strh	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200002b0 	.word	0x200002b0
 8001e58:	2000001c 	.word	0x2000001c
 8001e5c:	200002b1 	.word	0x200002b1
 8001e60:	200002ac 	.word	0x200002ac
 8001e64:	20000004 	.word	0x20000004
 8001e68:	20000040 	.word	0x20000040
 8001e6c:	20000042 	.word	0x20000042
 8001e70:	20000010 	.word	0x20000010
 8001e74:	20000044 	.word	0x20000044
 8001e78:	20000046 	.word	0x20000046
 8001e7c:	2000024c 	.word	0x2000024c
 8001e80:	88888889 	.word	0x88888889
 8001e84:	20000048 	.word	0x20000048

08001e88 <menu_move_up>:
    refreshInactivityTimer();
}

/* ===== Button actions ===== */

static void menu_move_up(void){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    if (ui == UI_MENU) {
 8001e8c:	4b62      	ldr	r3, [pc, #392]	@ (8002018 <menu_move_up+0x190>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d116      	bne.n	8001ec2 <menu_move_up+0x3a>
        if (menu_idx > 0) menu_idx--;
 8001e94:	4b61      	ldr	r3, [pc, #388]	@ (800201c <menu_move_up+0x194>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	dd04      	ble.n	8001ea6 <menu_move_up+0x1e>
 8001e9c:	4b5f      	ldr	r3, [pc, #380]	@ (800201c <menu_move_up+0x194>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	4a5e      	ldr	r2, [pc, #376]	@ (800201c <menu_move_up+0x194>)
 8001ea4:	6013      	str	r3, [r2, #0]
        // adjust view top
        if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800201c <menu_move_up+0x194>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8002020 <menu_move_up+0x198>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	da03      	bge.n	8001eba <menu_move_up+0x32>
 8001eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800201c <menu_move_up+0x194>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5a      	ldr	r2, [pc, #360]	@ (8002020 <menu_move_up+0x198>)
 8001eb8:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8001eba:	4b5a      	ldr	r3, [pc, #360]	@ (8002024 <menu_move_up+0x19c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e0a5      	b.n	800200e <menu_move_up+0x186>
    } else if (ui == UI_MANUAL) {
 8001ec2:	4b55      	ldr	r3, [pc, #340]	@ (8002018 <menu_move_up+0x190>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	f000 80a1 	beq.w	800200e <menu_move_up+0x186>
        // Manual: UP/DOWN unused (you could implement speed or similar)
    } else {
        // in edit screens: increment value
        switch (ui){
 8001ecc:	4b52      	ldr	r3, [pc, #328]	@ (8002018 <menu_move_up+0x190>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	3b06      	subs	r3, #6
 8001ed2:	2b0b      	cmp	r3, #11
 8001ed4:	f200 8085 	bhi.w	8001fe2 <menu_move_up+0x15a>
 8001ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee0 <menu_move_up+0x58>)
 8001eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ede:	bf00      	nop
 8001ee0:	08001f11 	.word	0x08001f11
 8001ee4:	08001f27 	.word	0x08001f27
 8001ee8:	08001f3d 	.word	0x08001f3d
 8001eec:	08001f53 	.word	0x08001f53
 8001ef0:	08001fe3 	.word	0x08001fe3
 8001ef4:	08001f69 	.word	0x08001f69
 8001ef8:	08001f81 	.word	0x08001f81
 8001efc:	08001fe3 	.word	0x08001fe3
 8001f00:	08001f99 	.word	0x08001f99
 8001f04:	08001fe3 	.word	0x08001fe3
 8001f08:	08001fb3 	.word	0x08001fb3
 8001f0c:	08001fcb 	.word	0x08001fcb
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 8001f10:	4b45      	ldr	r3, [pc, #276]	@ (8002028 <menu_move_up+0x1a0>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b16      	cmp	r3, #22
 8001f16:	d866      	bhi.n	8001fe6 <menu_move_up+0x15e>
 8001f18:	4b43      	ldr	r3, [pc, #268]	@ (8002028 <menu_move_up+0x1a0>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <menu_move_up+0x1a0>)
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e05f      	b.n	8001fe6 <menu_move_up+0x15e>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8001f26:	4b41      	ldr	r3, [pc, #260]	@ (800202c <menu_move_up+0x1a4>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f2c:	d85d      	bhi.n	8001fea <menu_move_up+0x162>
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <menu_move_up+0x1a4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b3d      	ldr	r3, [pc, #244]	@ (800202c <menu_move_up+0x1a4>)
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e056      	b.n	8001fea <menu_move_up+0x162>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8001f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002030 <menu_move_up+0x1a8>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b16      	cmp	r3, #22
 8001f42:	d854      	bhi.n	8001fee <menu_move_up+0x166>
 8001f44:	4b3a      	ldr	r3, [pc, #232]	@ (8002030 <menu_move_up+0x1a8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b38      	ldr	r3, [pc, #224]	@ (8002030 <menu_move_up+0x1a8>)
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e04d      	b.n	8001fee <menu_move_up+0x166>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8001f52:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <menu_move_up+0x1ac>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f58:	d84b      	bhi.n	8001ff2 <menu_move_up+0x16a>
 8001f5a:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <menu_move_up+0x1ac>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <menu_move_up+0x1ac>)
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e044      	b.n	8001ff2 <menu_move_up+0x16a>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s < 3600) edit_search_gap_s += 1; break;
 8001f68:	4b33      	ldr	r3, [pc, #204]	@ (8002038 <menu_move_up+0x1b0>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001f70:	d241      	bcs.n	8001ff6 <menu_move_up+0x16e>
 8001f72:	4b31      	ldr	r3, [pc, #196]	@ (8002038 <menu_move_up+0x1b0>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <menu_move_up+0x1b0>)
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	e03a      	b.n	8001ff6 <menu_move_up+0x16e>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s < 3600) edit_search_dry_s += 1; break;
 8001f80:	4b2e      	ldr	r3, [pc, #184]	@ (800203c <menu_move_up+0x1b4>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001f88:	d237      	bcs.n	8001ffa <menu_move_up+0x172>
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800203c <menu_move_up+0x1b4>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <menu_move_up+0x1b4>)
 8001f94:	801a      	strh	r2, [r3, #0]
 8001f96:	e030      	b.n	8001ffa <menu_move_up+0x172>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min < 999) edit_countdown_min += 1; break;
 8001f98:	4b29      	ldr	r3, [pc, #164]	@ (8002040 <menu_move_up+0x1b8>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d82c      	bhi.n	8001ffe <menu_move_up+0x176>
 8001fa4:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <menu_move_up+0x1b8>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <menu_move_up+0x1b8>)
 8001fae:	801a      	strh	r2, [r3, #0]
 8001fb0:	e025      	b.n	8001ffe <menu_move_up+0x176>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s < 3600) edit_twist_on_s += 1; break;
 8001fb2:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <menu_move_up+0x1bc>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001fba:	d222      	bcs.n	8002002 <menu_move_up+0x17a>
 8001fbc:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <menu_move_up+0x1bc>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <menu_move_up+0x1bc>)
 8001fc6:	801a      	strh	r2, [r3, #0]
 8001fc8:	e01b      	b.n	8002002 <menu_move_up+0x17a>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s < 3600) edit_twist_off_s += 1; break;
 8001fca:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <menu_move_up+0x1c0>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001fd2:	d218      	bcs.n	8002006 <menu_move_up+0x17e>
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <menu_move_up+0x1c0>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <menu_move_up+0x1c0>)
 8001fde:	801a      	strh	r2, [r3, #0]
 8001fe0:	e011      	b.n	8002006 <menu_move_up+0x17e>
            default: break;
 8001fe2:	bf00      	nop
 8001fe4:	e010      	b.n	8002008 <menu_move_up+0x180>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 8001fe6:	bf00      	nop
 8001fe8:	e00e      	b.n	8002008 <menu_move_up+0x180>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8001fea:	bf00      	nop
 8001fec:	e00c      	b.n	8002008 <menu_move_up+0x180>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8001fee:	bf00      	nop
 8001ff0:	e00a      	b.n	8002008 <menu_move_up+0x180>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8001ff2:	bf00      	nop
 8001ff4:	e008      	b.n	8002008 <menu_move_up+0x180>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s < 3600) edit_search_gap_s += 1; break;
 8001ff6:	bf00      	nop
 8001ff8:	e006      	b.n	8002008 <menu_move_up+0x180>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s < 3600) edit_search_dry_s += 1; break;
 8001ffa:	bf00      	nop
 8001ffc:	e004      	b.n	8002008 <menu_move_up+0x180>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min < 999) edit_countdown_min += 1; break;
 8001ffe:	bf00      	nop
 8002000:	e002      	b.n	8002008 <menu_move_up+0x180>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s < 3600) edit_twist_on_s += 1; break;
 8002002:	bf00      	nop
 8002004:	e000      	b.n	8002008 <menu_move_up+0x180>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s < 3600) edit_twist_off_s += 1; break;
 8002006:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <menu_move_up+0x19c>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
    }
    refreshInactivityTimer();
 800200e:	f7ff fa07 	bl	8001420 <refreshInactivityTimer>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200002b0 	.word	0x200002b0
 800201c:	200002c0 	.word	0x200002c0
 8002020:	200002c4 	.word	0x200002c4
 8002024:	200002b1 	.word	0x200002b1
 8002028:	2000003c 	.word	0x2000003c
 800202c:	2000003d 	.word	0x2000003d
 8002030:	2000003e 	.word	0x2000003e
 8002034:	2000003f 	.word	0x2000003f
 8002038:	20000040 	.word	0x20000040
 800203c:	20000042 	.word	0x20000042
 8002040:	20000048 	.word	0x20000048
 8002044:	20000044 	.word	0x20000044
 8002048:	20000046 	.word	0x20000046

0800204c <menu_move_down>:

static void menu_move_down(void){
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
    if (ui == UI_MENU) {
 8002050:	4b5d      	ldr	r3, [pc, #372]	@ (80021c8 <menu_move_down+0x17c>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d118      	bne.n	800208a <menu_move_down+0x3e>
        if (menu_idx < (MAIN_MENU_COUNT-1)) menu_idx++;
 8002058:	4b5c      	ldr	r3, [pc, #368]	@ (80021cc <menu_move_down+0x180>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d804      	bhi.n	800206a <menu_move_down+0x1e>
 8002060:	4b5a      	ldr	r3, [pc, #360]	@ (80021cc <menu_move_down+0x180>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a59      	ldr	r2, [pc, #356]	@ (80021cc <menu_move_down+0x180>)
 8002068:	6013      	str	r3, [r2, #0]
        // adjust view top
        if (menu_idx > menu_view_top + 1) menu_view_top = menu_idx - 1;
 800206a:	4b59      	ldr	r3, [pc, #356]	@ (80021d0 <menu_move_down+0x184>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	4b56      	ldr	r3, [pc, #344]	@ (80021cc <menu_move_down+0x180>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	da04      	bge.n	8002082 <menu_move_down+0x36>
 8002078:	4b54      	ldr	r3, [pc, #336]	@ (80021cc <menu_move_down+0x180>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3b01      	subs	r3, #1
 800207e:	4a54      	ldr	r2, [pc, #336]	@ (80021d0 <menu_move_down+0x184>)
 8002080:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002082:	4b54      	ldr	r3, [pc, #336]	@ (80021d4 <menu_move_down+0x188>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e099      	b.n	80021be <menu_move_down+0x172>
    } else {
        // edit screens: decrement value
        switch (ui){
 800208a:	4b4f      	ldr	r3, [pc, #316]	@ (80021c8 <menu_move_down+0x17c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	3b06      	subs	r3, #6
 8002090:	2b0b      	cmp	r3, #11
 8002092:	d87e      	bhi.n	8002192 <menu_move_down+0x146>
 8002094:	a201      	add	r2, pc, #4	@ (adr r2, 800209c <menu_move_down+0x50>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020cd 	.word	0x080020cd
 80020a0:	080020e3 	.word	0x080020e3
 80020a4:	080020f9 	.word	0x080020f9
 80020a8:	0800210f 	.word	0x0800210f
 80020ac:	08002193 	.word	0x08002193
 80020b0:	08002125 	.word	0x08002125
 80020b4:	0800213b 	.word	0x0800213b
 80020b8:	08002193 	.word	0x08002193
 80020bc:	08002151 	.word	0x08002151
 80020c0:	08002193 	.word	0x08002193
 80020c4:	08002167 	.word	0x08002167
 80020c8:	0800217d 	.word	0x0800217d
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 80020cc:	4b42      	ldr	r3, [pc, #264]	@ (80021d8 <menu_move_down+0x18c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d060      	beq.n	8002196 <menu_move_down+0x14a>
 80020d4:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <menu_move_down+0x18c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	3b01      	subs	r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b3e      	ldr	r3, [pc, #248]	@ (80021d8 <menu_move_down+0x18c>)
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e059      	b.n	8002196 <menu_move_down+0x14a>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 80020e2:	4b3e      	ldr	r3, [pc, #248]	@ (80021dc <menu_move_down+0x190>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d057      	beq.n	800219a <menu_move_down+0x14e>
 80020ea:	4b3c      	ldr	r3, [pc, #240]	@ (80021dc <menu_move_down+0x190>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <menu_move_down+0x190>)
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	e050      	b.n	800219a <menu_move_down+0x14e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 80020f8:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <menu_move_down+0x194>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d04e      	beq.n	800219e <menu_move_down+0x152>
 8002100:	4b37      	ldr	r3, [pc, #220]	@ (80021e0 <menu_move_down+0x194>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3b01      	subs	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b35      	ldr	r3, [pc, #212]	@ (80021e0 <menu_move_down+0x194>)
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e047      	b.n	800219e <menu_move_down+0x152>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 800210e:	4b35      	ldr	r3, [pc, #212]	@ (80021e4 <menu_move_down+0x198>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d045      	beq.n	80021a2 <menu_move_down+0x156>
 8002116:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <menu_move_down+0x198>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	3b01      	subs	r3, #1
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <menu_move_down+0x198>)
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e03e      	b.n	80021a2 <menu_move_down+0x156>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s > 1) edit_search_gap_s -= 1; break;
 8002124:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <menu_move_down+0x19c>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d93c      	bls.n	80021a6 <menu_move_down+0x15a>
 800212c:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <menu_move_down+0x19c>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	4b2c      	ldr	r3, [pc, #176]	@ (80021e8 <menu_move_down+0x19c>)
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	e035      	b.n	80021a6 <menu_move_down+0x15a>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 800213a:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <menu_move_down+0x1a0>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d933      	bls.n	80021aa <menu_move_down+0x15e>
 8002142:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <menu_move_down+0x1a0>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <menu_move_down+0x1a0>)
 800214c:	801a      	strh	r2, [r3, #0]
 800214e:	e02c      	b.n	80021aa <menu_move_down+0x15e>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 0) edit_countdown_min -= 1; break;
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <menu_move_down+0x1a4>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d02a      	beq.n	80021ae <menu_move_down+0x162>
 8002158:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <menu_move_down+0x1a4>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <menu_move_down+0x1a4>)
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	e023      	b.n	80021ae <menu_move_down+0x162>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s > 1) edit_twist_on_s -= 1; break;
 8002166:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <menu_move_down+0x1a8>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d921      	bls.n	80021b2 <menu_move_down+0x166>
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <menu_move_down+0x1a8>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <menu_move_down+0x1a8>)
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	e01a      	b.n	80021b2 <menu_move_down+0x166>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s > 1) edit_twist_off_s -= 1; break;
 800217c:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <menu_move_down+0x1ac>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d918      	bls.n	80021b6 <menu_move_down+0x16a>
 8002184:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <menu_move_down+0x1ac>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <menu_move_down+0x1ac>)
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e011      	b.n	80021b6 <menu_move_down+0x16a>
            default: break;
 8002192:	bf00      	nop
 8002194:	e010      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8002196:	bf00      	nop
 8002198:	e00e      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 800219a:	bf00      	nop
 800219c:	e00c      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 800219e:	bf00      	nop
 80021a0:	e00a      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 80021a2:	bf00      	nop
 80021a4:	e008      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s > 1) edit_search_gap_s -= 1; break;
 80021a6:	bf00      	nop
 80021a8:	e006      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 80021aa:	bf00      	nop
 80021ac:	e004      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 0) edit_countdown_min -= 1; break;
 80021ae:	bf00      	nop
 80021b0:	e002      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s > 1) edit_twist_on_s -= 1; break;
 80021b2:	bf00      	nop
 80021b4:	e000      	b.n	80021b8 <menu_move_down+0x16c>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s > 1) edit_twist_off_s -= 1; break;
 80021b6:	bf00      	nop
        }
        screenNeedsRefresh = true;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <menu_move_down+0x188>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
    }
    refreshInactivityTimer();
 80021be:	f7ff f92f 	bl	8001420 <refreshInactivityTimer>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002b0 	.word	0x200002b0
 80021cc:	200002c0 	.word	0x200002c0
 80021d0:	200002c4 	.word	0x200002c4
 80021d4:	200002b1 	.word	0x200002b1
 80021d8:	2000003c 	.word	0x2000003c
 80021dc:	2000003d 	.word	0x2000003d
 80021e0:	2000003e 	.word	0x2000003e
 80021e4:	2000003f 	.word	0x2000003f
 80021e8:	20000040 	.word	0x20000040
 80021ec:	20000042 	.word	0x20000042
 80021f0:	20000048 	.word	0x20000048
 80021f4:	20000044 	.word	0x20000044
 80021f8:	20000046 	.word	0x20000046

080021fc <menu_select>:

static void menu_select(void){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8002200:	f7ff f90e 	bl	8001420 <refreshInactivityTimer>

    switch (ui){
 8002204:	4b71      	ldr	r3, [pc, #452]	@ (80023cc <menu_select+0x1d0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b11      	cmp	r3, #17
 800220a:	f200 80d5 	bhi.w	80023b8 <menu_select+0x1bc>
 800220e:	a201      	add	r2, pc, #4	@ (adr r2, 8002214 <menu_select+0x18>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	0800225d 	.word	0x0800225d
 8002218:	08002265 	.word	0x08002265
 800221c:	08002271 	.word	0x08002271
 8002220:	080022df 	.word	0x080022df
 8002224:	080022ff 	.word	0x080022ff
 8002228:	08002325 	.word	0x08002325
 800222c:	0800232d 	.word	0x0800232d
 8002230:	08002335 	.word	0x08002335
 8002234:	0800233d 	.word	0x0800233d
 8002238:	08002345 	.word	0x08002345
 800223c:	08002351 	.word	0x08002351
 8002240:	08002359 	.word	0x08002359
 8002244:	08002365 	.word	0x08002365
 8002248:	08002371 	.word	0x08002371
 800224c:	0800238b 	.word	0x0800238b
 8002250:	0800239d 	.word	0x0800239d
 8002254:	080023a5 	.word	0x080023a5
 8002258:	080023ad 	.word	0x080023ad
        case UI_WELCOME:
            ui = UI_DASH;
 800225c:	4b5b      	ldr	r3, [pc, #364]	@ (80023cc <menu_select+0x1d0>)
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
            break;
 8002262:	e0ad      	b.n	80023c0 <menu_select+0x1c4>

        case UI_DASH:
            // Enter menu
            ui = UI_MENU;
 8002264:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <menu_select+0x1d0>)
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
            goto_menu_top();
 800226a:	f7ff f8e5 	bl	8001438 <goto_menu_top>
            break;
 800226e:	e0a7      	b.n	80023c0 <menu_select+0x1c4>

        case UI_MENU:
            // perform action based on menu_idx
            switch (menu_idx){
 8002270:	4b57      	ldr	r3, [pc, #348]	@ (80023d0 <menu_select+0x1d4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d82d      	bhi.n	80022d4 <menu_select+0xd8>
 8002278:	a201      	add	r2, pc, #4	@ (adr r2, 8002280 <menu_select+0x84>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	0800229d 	.word	0x0800229d
 8002284:	080022a5 	.word	0x080022a5
 8002288:	080022ad 	.word	0x080022ad
 800228c:	080022b5 	.word	0x080022b5
 8002290:	080022bd 	.word	0x080022bd
 8002294:	080022c5 	.word	0x080022c5
 8002298:	080022cd 	.word	0x080022cd
                case 0: ui = UI_MANUAL; break;
 800229c:	4b4b      	ldr	r3, [pc, #300]	@ (80023cc <menu_select+0x1d0>)
 800229e:	2203      	movs	r2, #3
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e01b      	b.n	80022dc <menu_select+0xe0>
                case 1: ui = UI_SEMI_AUTO; break;
 80022a4:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <menu_select+0x1d0>)
 80022a6:	2204      	movs	r2, #4
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e017      	b.n	80022dc <menu_select+0xe0>
                case 2: ui = UI_TIMER; break;
 80022ac:	4b47      	ldr	r3, [pc, #284]	@ (80023cc <menu_select+0x1d0>)
 80022ae:	2205      	movs	r2, #5
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e013      	b.n	80022dc <menu_select+0xe0>
                case 3: ui = UI_SEARCH; break;
 80022b4:	4b45      	ldr	r3, [pc, #276]	@ (80023cc <menu_select+0x1d0>)
 80022b6:	220a      	movs	r2, #10
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e00f      	b.n	80022dc <menu_select+0xe0>
                case 4: ui = UI_COUNTDOWN; break;
 80022bc:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <menu_select+0x1d0>)
 80022be:	220d      	movs	r2, #13
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e00b      	b.n	80022dc <menu_select+0xe0>
                case 5: ui = UI_TWIST; break;
 80022c4:	4b41      	ldr	r3, [pc, #260]	@ (80023cc <menu_select+0x1d0>)
 80022c6:	220f      	movs	r2, #15
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e007      	b.n	80022dc <menu_select+0xe0>
                case 6: ui = UI_DASH; break;
 80022cc:	4b3f      	ldr	r3, [pc, #252]	@ (80023cc <menu_select+0x1d0>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e003      	b.n	80022dc <menu_select+0xe0>
                default: ui = UI_DASH; break;
 80022d4:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <menu_select+0x1d0>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	bf00      	nop
            }
            break;
 80022dc:	e070      	b.n	80023c0 <menu_select+0x1c4>

        case UI_MANUAL:
            // Toggle motor on select
            if (Motor_GetStatus()) {
 80022de:	f7ff f82b 	bl	8001338 <Motor_GetStatus>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <menu_select+0xf4>
            	motorStatus = 0;
 80022e8:	4b3a      	ldr	r3, [pc, #232]	@ (80023d4 <menu_select+0x1d8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e002      	b.n	80022f6 <menu_select+0xfa>
            } else {
            	motorStatus = 1;
 80022f0:	4b38      	ldr	r3, [pc, #224]	@ (80023d4 <menu_select+0x1d8>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
            }
            screenNeedsRefresh = true;
 80022f6:	4b38      	ldr	r3, [pc, #224]	@ (80023d8 <menu_select+0x1dc>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
            break;
 80022fc:	e060      	b.n	80023c0 <menu_select+0x1c4>

        case UI_SEMI_AUTO:
            semiAutoEnabled = !semiAutoEnabled;
 80022fe:	4b37      	ldr	r3, [pc, #220]	@ (80023dc <menu_select+0x1e0>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <menu_select+0x1e0>)
 800231a:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 800231c:	4b2e      	ldr	r3, [pc, #184]	@ (80023d8 <menu_select+0x1dc>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
            break;
 8002322:	e04d      	b.n	80023c0 <menu_select+0x1c4>

        case UI_TIMER:
            // From timer display, SELECT enters editing ON time first
            ui = UI_TIMER_EDIT_ON_H;
 8002324:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <menu_select+0x1d0>)
 8002326:	2206      	movs	r2, #6
 8002328:	701a      	strb	r2, [r3, #0]
            break;
 800232a:	e049      	b.n	80023c0 <menu_select+0x1c4>

        case UI_TIMER_EDIT_ON_H:
            ui = UI_TIMER_EDIT_ON_M; break;
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <menu_select+0x1d0>)
 800232e:	2207      	movs	r2, #7
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e045      	b.n	80023c0 <menu_select+0x1c4>
        case UI_TIMER_EDIT_ON_M:
            ui = UI_TIMER_EDIT_OFF_H; break;
 8002334:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <menu_select+0x1d0>)
 8002336:	2208      	movs	r2, #8
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e041      	b.n	80023c0 <menu_select+0x1c4>
        case UI_TIMER_EDIT_OFF_H:
            ui = UI_TIMER_EDIT_OFF_M; break;
 800233c:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <menu_select+0x1d0>)
 800233e:	2209      	movs	r2, #9
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e03d      	b.n	80023c0 <menu_select+0x1c4>
        case UI_TIMER_EDIT_OFF_M:
            // finished editing timer; apply
            apply_timer_settings();
 8002344:	f7ff fb30 	bl	80019a8 <apply_timer_settings>
            ui = UI_TIMER; break;
 8002348:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <menu_select+0x1d0>)
 800234a:	2205      	movs	r2, #5
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e037      	b.n	80023c0 <menu_select+0x1c4>

        case UI_SEARCH:
            // enter edit gap
            ui = UI_SEARCH_EDIT_GAP; break;
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <menu_select+0x1d0>)
 8002352:	220b      	movs	r2, #11
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e033      	b.n	80023c0 <menu_select+0x1c4>

        case UI_SEARCH_EDIT_GAP:
            // after editing gap go to dry
            apply_search_settings(); // partial apply
 8002358:	f7ff fae6 	bl	8001928 <apply_search_settings>
            ui = UI_SEARCH_EDIT_DRY; break;
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <menu_select+0x1d0>)
 800235e:	220c      	movs	r2, #12
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e02d      	b.n	80023c0 <menu_select+0x1c4>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 8002364:	f7ff fae0 	bl	8001928 <apply_search_settings>
            ui = UI_SEARCH; break;
 8002368:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <menu_select+0x1d0>)
 800236a:	220a      	movs	r2, #10
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e027      	b.n	80023c0 <menu_select+0x1c4>

        case UI_COUNTDOWN:
            // if countdown active, SELECT stops it, otherwise go to set/start
            if (countdownActive) {
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <menu_select+0x1e4>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <menu_select+0x186>
                countdownActive = false;
 800237a:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <menu_select+0x1e4>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
            } else {
                ui = UI_COUNTDOWN_EDIT_MIN;
            }
            break;
 8002380:	e01e      	b.n	80023c0 <menu_select+0x1c4>
                ui = UI_COUNTDOWN_EDIT_MIN;
 8002382:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <menu_select+0x1d0>)
 8002384:	220e      	movs	r2, #14
 8002386:	701a      	strb	r2, [r3, #0]
            break;
 8002388:	e01a      	b.n	80023c0 <menu_select+0x1c4>
        case UI_COUNTDOWN_EDIT_MIN:
            apply_countdown_settings();
 800238a:	f7ff faf9 	bl	8001980 <apply_countdown_settings>
            // start countdown
            countdownActive = true;
 800238e:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <menu_select+0x1e4>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
            ui = UI_COUNTDOWN;
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <menu_select+0x1d0>)
 8002396:	220d      	movs	r2, #13
 8002398:	701a      	strb	r2, [r3, #0]
            break;
 800239a:	e011      	b.n	80023c0 <menu_select+0x1c4>

        case UI_TWIST:
            // SELECT enters edit ON duration
            ui = UI_TWIST_EDIT_ON; break;
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <menu_select+0x1d0>)
 800239e:	2210      	movs	r2, #16
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	e00d      	b.n	80023c0 <menu_select+0x1c4>
        case UI_TWIST_EDIT_ON:
            // next selects edit off
            ui = UI_TWIST_EDIT_OFF; break;
 80023a4:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <menu_select+0x1d0>)
 80023a6:	2211      	movs	r2, #17
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e009      	b.n	80023c0 <menu_select+0x1c4>
        case UI_TWIST_EDIT_OFF:
            // finished editing twist -> apply
            apply_twist_settings();
 80023ac:	f7ff fad2 	bl	8001954 <apply_twist_settings>
            ui = UI_TWIST; break;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <menu_select+0x1d0>)
 80023b2:	220f      	movs	r2, #15
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e003      	b.n	80023c0 <menu_select+0x1c4>

        /* Edit screens handled above */
        default:
            ui = UI_DASH;
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <menu_select+0x1d0>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
            break;
 80023be:	bf00      	nop
    }

    screenNeedsRefresh = true;
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <menu_select+0x1dc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200002b0 	.word	0x200002b0
 80023d0:	200002c0 	.word	0x200002c0
 80023d4:	20000248 	.word	0x20000248
 80023d8:	200002b1 	.word	0x200002b1
 80023dc:	200002bc 	.word	0x200002bc
 80023e0:	20000249 	.word	0x20000249

080023e4 <menu_reset>:

static void menu_reset(void){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
    // act as back/home
    refreshInactivityTimer();
 80023e8:	f7ff f81a 	bl	8001420 <refreshInactivityTimer>

    switch (ui){
 80023ec:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <menu_reset+0x94>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b11      	cmp	r3, #17
 80023f2:	dc36      	bgt.n	8002462 <menu_reset+0x7e>
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	da04      	bge.n	8002402 <menu_reset+0x1e>
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d036      	beq.n	800246a <menu_reset+0x86>
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d020      	beq.n	8002442 <menu_reset+0x5e>
 8002400:	e02f      	b.n	8002462 <menu_reset+0x7e>
 8002402:	461a      	mov	r2, r3
 8002404:	2301      	movs	r3, #1
 8002406:	4093      	lsls	r3, r2
 8002408:	4a1c      	ldr	r2, [pc, #112]	@ (800247c <menu_reset+0x98>)
 800240a:	401a      	ands	r2, r3
 800240c:	2a00      	cmp	r2, #0
 800240e:	bf14      	ite	ne
 8002410:	2201      	movne	r2, #1
 8002412:	2200      	moveq	r2, #0
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	2a00      	cmp	r2, #0
 8002418:	d11f      	bne.n	800245a <menu_reset+0x76>
 800241a:	f24a 4238 	movw	r2, #42040	@ 0xa438
 800241e:	401a      	ands	r2, r3
 8002420:	2a00      	cmp	r2, #0
 8002422:	bf14      	ite	ne
 8002424:	2201      	movne	r2, #1
 8002426:	2200      	moveq	r2, #0
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	2a00      	cmp	r2, #0
 800242c:	d111      	bne.n	8002452 <menu_reset+0x6e>
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d104      	bne.n	800244a <menu_reset+0x66>
 8002440:	e00f      	b.n	8002462 <menu_reset+0x7e>
        case UI_WELCOME:
            // do nothing
            break;
        case UI_DASH:
            // already at dash - go to welcome
            ui = UI_WELCOME;
 8002442:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <menu_reset+0x94>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
            break;
 8002448:	e010      	b.n	800246c <menu_reset+0x88>
        case UI_MENU:
            // go back to dash
            ui = UI_DASH;
 800244a:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <menu_reset+0x94>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
            break;
 8002450:	e00c      	b.n	800246c <menu_reset+0x88>
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST:
            // return to menu
            ui = UI_MENU;
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <menu_reset+0x94>)
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
            break;
 8002458:	e008      	b.n	800246c <menu_reset+0x88>
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            // cancel edits, go to parent screen (menu for simplicity)
            ui = UI_MENU;
 800245a:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <menu_reset+0x94>)
 800245c:	2202      	movs	r2, #2
 800245e:	701a      	strb	r2, [r3, #0]
            break;
 8002460:	e004      	b.n	800246c <menu_reset+0x88>
        default:
            ui = UI_DASH;
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <menu_reset+0x94>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
            break;
 8002468:	e000      	b.n	800246c <menu_reset+0x88>
            break;
 800246a:	bf00      	nop
    }
    screenNeedsRefresh = true;
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <menu_reset+0x9c>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200002b0 	.word	0x200002b0
 800247c:	00035bc0 	.word	0x00035bc0
 8002480:	200002b1 	.word	0x200002b1

08002484 <Screen_HandleButton>:

/* Public button handler used by switch polling */
void Screen_HandleButton(UiButton b){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){ menu_reset(); return; }
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <Screen_HandleButton+0x16>
 8002494:	f7ff ffa6 	bl	80023e4 <menu_reset>
 8002498:	e011      	b.n	80024be <Screen_HandleButton+0x3a>
    if (b == BTN_UP) { menu_move_up(); return; }
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d102      	bne.n	80024a6 <Screen_HandleButton+0x22>
 80024a0:	f7ff fcf2 	bl	8001e88 <menu_move_up>
 80024a4:	e00b      	b.n	80024be <Screen_HandleButton+0x3a>
    if (b == BTN_DOWN) { menu_move_down(); return; }
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d102      	bne.n	80024b2 <Screen_HandleButton+0x2e>
 80024ac:	f7ff fdce 	bl	800204c <menu_move_down>
 80024b0:	e005      	b.n	80024be <Screen_HandleButton+0x3a>
    if (b == BTN_SELECT) { menu_select(); return; }
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d102      	bne.n	80024be <Screen_HandleButton+0x3a>
 80024b8:	f7ff fea0 	bl	80021fc <menu_select>
 80024bc:	bf00      	nop
}
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <Screen_HandleSwitches>:

/* Generic switch handler - keeps your previous mapping style (change ports/pins if different) */
void Screen_HandleSwitches(void){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
        {SWITCH3_GPIO_Port, SWITCH3_Pin, BTN_UP, LED3_Pin},
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN, LED4_Pin}
    };
    static bool prev[4] = {true,true,true,true};

    for (int i=0; i<4; i++){
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	e056      	b.n	800257e <Screen_HandleSwitches+0xba>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 80024d0:	492f      	ldr	r1, [pc, #188]	@ (8002590 <Screen_HandleSwitches+0xcc>)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	492b      	ldr	r1, [pc, #172]	@ (8002590 <Screen_HandleSwitches+0xcc>)
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3304      	adds	r3, #4
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	f001 f8c2 	bl	800367c <HAL_GPIO_ReadPin>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	70fb      	strb	r3, [r7, #3]
        if (pressed && prev[i]) {
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02b      	beq.n	8002562 <Screen_HandleSwitches+0x9e>
 800250a:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <Screen_HandleSwitches+0xd0>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d025      	beq.n	8002562 <Screen_HandleSwitches+0x9e>
            prev[i] = false;
 8002516:	4a1f      	ldr	r2, [pc, #124]	@ (8002594 <Screen_HandleSwitches+0xd0>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
            // toggle corresponding indicator LED (assuming LED pin is on same port)
            HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 8002520:	491b      	ldr	r1, [pc, #108]	@ (8002590 <Screen_HandleSwitches+0xcc>)
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	4917      	ldr	r1, [pc, #92]	@ (8002590 <Screen_HandleSwitches+0xcc>)
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3308      	adds	r3, #8
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	4619      	mov	r1, r3
 8002544:	f001 f8c9 	bl	80036da <HAL_GPIO_TogglePin>
            Screen_HandleButton(switchMap[i].btn);
 8002548:	4911      	ldr	r1, [pc, #68]	@ (8002590 <Screen_HandleSwitches+0xcc>)
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	3306      	adds	r3, #6
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff92 	bl	8002484 <Screen_HandleButton>
 8002560:	e00a      	b.n	8002578 <Screen_HandleSwitches+0xb4>
        } else if (!pressed) prev[i] = true;
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <Screen_HandleSwitches+0xb4>
 800256e:	4a09      	ldr	r2, [pc, #36]	@ (8002594 <Screen_HandleSwitches+0xd0>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<4; i++){
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3301      	adds	r3, #1
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b03      	cmp	r3, #3
 8002582:	dda5      	ble.n	80024d0 <Screen_HandleSwitches+0xc>
    }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	08006678 	.word	0x08006678
 8002594:	2000004c 	.word	0x2000004c

08002598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <HAL_MspInit+0x5c>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <HAL_MspInit+0x5c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6193      	str	r3, [r2, #24]
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_MspInit+0x5c>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <HAL_MspInit+0x5c>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4a0e      	ldr	r2, [pc, #56]	@ (80025f4 <HAL_MspInit+0x5c>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	61d3      	str	r3, [r2, #28]
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_MspInit+0x5c>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_MspInit+0x60>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	4a04      	ldr	r2, [pc, #16]	@ (80025f8 <HAL_MspInit+0x60>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000

080025fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <HAL_ADC_MspInit+0x6c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d121      	bne.n	8002660 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800261c:	4b13      	ldr	r3, [pc, #76]	@ (800266c <HAL_ADC_MspInit+0x70>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a12      	ldr	r2, [pc, #72]	@ (800266c <HAL_ADC_MspInit+0x70>)
 8002622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b10      	ldr	r3, [pc, #64]	@ (800266c <HAL_ADC_MspInit+0x70>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <HAL_ADC_MspInit+0x70>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a0c      	ldr	r2, [pc, #48]	@ (800266c <HAL_ADC_MspInit+0x70>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <HAL_ADC_MspInit+0x70>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800264c:	233f      	movs	r3, #63	@ 0x3f
 800264e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002650:	2303      	movs	r3, #3
 8002652:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4619      	mov	r1, r3
 800265a:	4805      	ldr	r0, [pc, #20]	@ (8002670 <HAL_ADC_MspInit+0x74>)
 800265c:	f000 fe8a 	bl	8003374 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40012400 	.word	0x40012400
 800266c:	40021000 	.word	0x40021000
 8002670:	40010800 	.word	0x40010800

08002674 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <HAL_I2C_MspInit+0x74>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d124      	bne.n	80026de <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002694:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <HAL_I2C_MspInit+0x78>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <HAL_I2C_MspInit+0x78>)
 800269a:	f043 0308 	orr.w	r3, r3, #8
 800269e:	6193      	str	r3, [r2, #24]
 80026a0:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <HAL_I2C_MspInit+0x78>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b2:	2312      	movs	r3, #18
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4619      	mov	r1, r3
 80026c0:	480b      	ldr	r0, [pc, #44]	@ (80026f0 <HAL_I2C_MspInit+0x7c>)
 80026c2:	f000 fe57 	bl	8003374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_I2C_MspInit+0x78>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a08      	ldr	r2, [pc, #32]	@ (80026ec <HAL_I2C_MspInit+0x78>)
 80026cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026d0:	61d3      	str	r3, [r2, #28]
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_I2C_MspInit+0x78>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80026de:	bf00      	nop
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40005800 	.word	0x40005800
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010c00 	.word	0x40010c00

080026f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	@ 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a22      	ldr	r2, [pc, #136]	@ (8002798 <HAL_SPI_MspInit+0xa4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d13d      	bne.n	8002790 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002714:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_SPI_MspInit+0xa8>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a20      	ldr	r2, [pc, #128]	@ (800279c <HAL_SPI_MspInit+0xa8>)
 800271a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <HAL_SPI_MspInit+0xa8>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_SPI_MspInit+0xa8>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4a1a      	ldr	r2, [pc, #104]	@ (800279c <HAL_SPI_MspInit+0xa8>)
 8002732:	f043 0308 	orr.w	r3, r3, #8
 8002736:	6193      	str	r3, [r2, #24]
 8002738:	4b18      	ldr	r3, [pc, #96]	@ (800279c <HAL_SPI_MspInit+0xa8>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002744:	2328      	movs	r3, #40	@ 0x28
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	4812      	ldr	r0, [pc, #72]	@ (80027a0 <HAL_SPI_MspInit+0xac>)
 8002758:	f000 fe0c 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800275c:	2310      	movs	r3, #16
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <HAL_SPI_MspInit+0xac>)
 8002770:	f000 fe00 	bl	8003374 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_SPI_MspInit+0xb0>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
 800278a:	4a06      	ldr	r2, [pc, #24]	@ (80027a4 <HAL_SPI_MspInit+0xb0>)
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002790:	bf00      	nop
 8002792:	3728      	adds	r7, #40	@ 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40013000 	.word	0x40013000
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010c00 	.word	0x40010c00
 80027a4:	40010000 	.word	0x40010000

080027a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002834 <HAL_UART_MspInit+0x8c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d131      	bne.n	800282c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_UART_MspInit+0x90>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002838 <HAL_UART_MspInit+0x90>)
 80027ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <HAL_UART_MspInit+0x90>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e0:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <HAL_UART_MspInit+0x90>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4a14      	ldr	r2, [pc, #80]	@ (8002838 <HAL_UART_MspInit+0x90>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	6193      	str	r3, [r2, #24]
 80027ec:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <HAL_UART_MspInit+0x90>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	4619      	mov	r1, r3
 800280c:	480b      	ldr	r0, [pc, #44]	@ (800283c <HAL_UART_MspInit+0x94>)
 800280e:	f000 fdb1 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002820:	f107 0310 	add.w	r3, r7, #16
 8002824:	4619      	mov	r1, r3
 8002826:	4805      	ldr	r0, [pc, #20]	@ (800283c <HAL_UART_MspInit+0x94>)
 8002828:	f000 fda4 	bl	8003374 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800282c:	bf00      	nop
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40013800 	.word	0x40013800
 8002838:	40021000 	.word	0x40021000
 800283c:	40010800 	.word	0x40010800

08002840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <NMI_Handler+0x4>

08002848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <HardFault_Handler+0x4>

08002850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <MemManage_Handler+0x4>

08002858 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <BusFault_Handler+0x4>

08002860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <UsageFault_Handler+0x4>

08002868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002890:	f000 f932 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}

08002898 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800289c:	4802      	ldr	r0, [pc, #8]	@ (80028a8 <RTC_Alarm_IRQHandler+0x10>)
 800289e:	f002 f94d 	bl	8004b3c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	2000015c 	.word	0x2000015c

080028ac <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	f000 f934 	bl	8002b1c <HAL_GetTick>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4618      	mov	r0, r3
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <Switches_Init+0x94>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002950 <Switches_Init+0x94>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6193      	str	r3, [r2, #24]
 80028da:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <Switches_Init+0x94>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 80028ee:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80028f2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4816      	ldr	r0, [pc, #88]	@ (8002954 <Switches_Init+0x98>)
 80028fa:	f000 fd3b 	bl	8003374 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e01d      	b.n	8002940 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8002904:	4a14      	ldr	r2, [pc, #80]	@ (8002958 <Switches_Init+0x9c>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4413      	add	r3, r2
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 800290e:	4a13      	ldr	r2, [pc, #76]	@ (800295c <Switches_Init+0xa0>)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	4413      	add	r3, r2
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8002918:	f7ff ffc8 	bl	80028ac <now_ms>
 800291c:	4602      	mov	r2, r0
 800291e:	4910      	ldr	r1, [pc, #64]	@ (8002960 <Switches_Init+0xa4>)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8002926:	4a0f      	ldr	r2, [pc, #60]	@ (8002964 <Switches_Init+0xa8>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2100      	movs	r1, #0
 800292c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <Switches_Init+0xac>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	4413      	add	r3, r2
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b03      	cmp	r3, #3
 8002944:	ddde      	ble.n	8002904 <Switches_Init+0x48>
    }
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	40010c00 	.word	0x40010c00
 8002958:	200002c8 	.word	0x200002c8
 800295c:	200002dc 	.word	0x200002dc
 8002960:	200002cc 	.word	0x200002cc
 8002964:	200002e0 	.word	0x200002e0
 8002968:	200002f0 	.word	0x200002f0

0800296c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002974:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <_sbrk+0x5c>)
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <_sbrk+0x60>)
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <_sbrk+0x64>)
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <_sbrk+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d207      	bcs.n	80029ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800299c:	f003 f812 	bl	80059c4 <__errno>
 80029a0:	4603      	mov	r3, r0
 80029a2:	220c      	movs	r2, #12
 80029a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	e009      	b.n	80029c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ac:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <_sbrk+0x64>)
 80029bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20005000 	.word	0x20005000
 80029cc:	00000400 	.word	0x00000400
 80029d0:	200002f4 	.word	0x200002f4
 80029d4:	20000490 	.word	0x20000490

080029d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 80029e8:	2240      	movs	r2, #64	@ 0x40
 80029ea:	2100      	movs	r1, #0
 80029ec:	4807      	ldr	r0, [pc, #28]	@ (8002a0c <UART_Init+0x28>)
 80029ee:	f002 ffe1 	bl	80059b4 <memset>
    rxIndex = 0;
 80029f2:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <UART_Init+0x2c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <UART_Init+0x30>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80029fe:	2201      	movs	r2, #1
 8002a00:	4905      	ldr	r1, [pc, #20]	@ (8002a18 <UART_Init+0x34>)
 8002a02:	4806      	ldr	r0, [pc, #24]	@ (8002a1c <UART_Init+0x38>)
 8002a04:	f002 feb3 	bl	800576e <HAL_UART_Receive_IT>
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200002fc 	.word	0x200002fc
 8002a10:	2000033c 	.word	0x2000033c
 8002a14:	2000033e 	.word	0x2000033e
 8002a18:	200002f8 	.word	0x200002f8
 8002a1c:	200001c8 	.word	0x200001c8

08002a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a20:	f7ff ffda 	bl	80029d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480b      	ldr	r0, [pc, #44]	@ (8002a54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a26:	490c      	ldr	r1, [pc, #48]	@ (8002a58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a28:	4a0c      	ldr	r2, [pc, #48]	@ (8002a5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a3c:	4c09      	ldr	r4, [pc, #36]	@ (8002a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a4a:	f002 ffc1 	bl	80059d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4e:	f7fe f839 	bl	8000ac4 <main>
  bx lr
 8002a52:	4770      	bx	lr
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a58:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002a5c:	0800672c 	.word	0x0800672c
  ldr r2, =_sbss
 8002a60:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002a64:	2000048c 	.word	0x2000048c

08002a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC1_2_IRQHandler>
	...

08002a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_Init+0x28>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <HAL_Init+0x28>)
 8002a76:	f043 0310 	orr.w	r3, r3, #16
 8002a7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f000 fc45 	bl	800330c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 f808 	bl	8002a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a88:	f7ff fd86 	bl	8002598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000

08002a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x54>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_InitTick+0x58>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fc4f 	bl	800335a <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00e      	b.n	8002ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d80a      	bhi.n	8002ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f000 fc25 	bl	8003322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <HAL_InitTick+0x5c>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000050 	.word	0x20000050
 8002af0:	20000058 	.word	0x20000058
 8002af4:	20000054 	.word	0x20000054

08002af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_IncTick+0x1c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_IncTick+0x20>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a03      	ldr	r2, [pc, #12]	@ (8002b18 <HAL_IncTick+0x20>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	20000058 	.word	0x20000058
 8002b18:	20000340 	.word	0x20000340

08002b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b02      	ldr	r3, [pc, #8]	@ (8002b2c <HAL_GetTick+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	20000340 	.word	0x20000340

08002b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_GetTick>
 8002b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d005      	beq.n	8002b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_Delay+0x44>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b56:	bf00      	nop
 8002b58:	f7ff ffe0 	bl	8002b1c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d8f7      	bhi.n	8002b58 <HAL_Delay+0x28>
  {
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000058 	.word	0x20000058

08002b78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0be      	b.n	8002d18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fd20 	bl	80025fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fa05 	bl	8002fcc <ADC_ConversionStop_Disable>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8099 	bne.w	8002d06 <HAL_ADC_Init+0x18e>
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 8095 	bne.w	8002d06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002be4:	f023 0302 	bic.w	r3, r3, #2
 8002be8:	f043 0202 	orr.w	r2, r3, #2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bf8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7b1b      	ldrb	r3, [r3, #12]
 8002bfe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c10:	d003      	beq.n	8002c1a <HAL_ADC_Init+0xa2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_ADC_Init+0xa8>
 8002c1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_Init+0xaa>
 8002c20:	2300      	movs	r3, #0
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7d1b      	ldrb	r3, [r3, #20]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d119      	bne.n	8002c64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7b1b      	ldrb	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	035a      	lsls	r2, r3, #13
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	e00b      	b.n	8002c64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_ADC_Init+0x1a8>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d003      	beq.n	8002c9e <HAL_ADC_Init+0x126>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d104      	bne.n	8002ca8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	051b      	lsls	r3, r3, #20
 8002ca6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <HAL_ADC_Init+0x1ac>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d10b      	bne.n	8002ce4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ce2:	e018      	b.n	8002d16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	f023 0312 	bic.w	r3, r3, #18
 8002cec:	f043 0210 	orr.w	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d04:	e007      	b.n	8002d16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	ffe1f7fd 	.word	0xffe1f7fd
 8002d24:	ff1f0efe 	.word	0xff1f0efe

08002d28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x20>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e0dc      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x1da>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d81c      	bhi.n	8002d92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	3b05      	subs	r3, #5
 8002d6a:	221f      	movs	r2, #31
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	4019      	ands	r1, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	3b05      	subs	r3, #5
 8002d84:	fa00 f203 	lsl.w	r2, r0, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d90:	e03c      	b.n	8002e0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d81c      	bhi.n	8002dd4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	3b23      	subs	r3, #35	@ 0x23
 8002dac:	221f      	movs	r2, #31
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	4019      	ands	r1, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b23      	subs	r3, #35	@ 0x23
 8002dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dd2:	e01b      	b.n	8002e0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b41      	subs	r3, #65	@ 0x41
 8002de6:	221f      	movs	r2, #31
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	4019      	ands	r1, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3b41      	subs	r3, #65	@ 0x41
 8002e00:	fa00 f203 	lsl.w	r2, r0, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	d91c      	bls.n	8002e4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	3b1e      	subs	r3, #30
 8002e26:	2207      	movs	r2, #7
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	4019      	ands	r1, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6898      	ldr	r0, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b1e      	subs	r3, #30
 8002e40:	fa00 f203 	lsl.w	r2, r0, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	e019      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6919      	ldr	r1, [r3, #16]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	2207      	movs	r2, #7
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	4019      	ands	r1, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6898      	ldr	r0, [r3, #8]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d003      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e8e:	2b11      	cmp	r3, #17
 8002e90:	d132      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_ADC_ConfigChannel+0x1e4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d125      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d126      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002eb8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d11a      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ec2:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	0c9a      	lsrs	r2, r3, #18
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ed8:	e002      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f9      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x1b2>
 8002ee6:	e007      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	40012400 	.word	0x40012400
 8002f10:	20000050 	.word	0x20000050
 8002f14:	431bde83 	.word	0x431bde83

08002f18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d040      	beq.n	8002fb8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f46:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc4 <ADC_Enable+0xac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc8 <ADC_Enable+0xb0>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	0c9b      	lsrs	r3, r3, #18
 8002f52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f54:	e002      	b.n	8002f5c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f9      	bne.n	8002f56 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f62:	f7ff fddb 	bl	8002b1c <HAL_GetTick>
 8002f66:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f68:	e01f      	b.n	8002faa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f6a:	f7ff fdd7 	bl	8002b1c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d918      	bls.n	8002faa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d011      	beq.n	8002faa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	f043 0210 	orr.w	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	f043 0201 	orr.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d1d8      	bne.n	8002f6a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000050 	.word	0x20000050
 8002fc8:	431bde83 	.word	0x431bde83

08002fcc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d12e      	bne.n	8003044 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ff6:	f7ff fd91 	bl	8002b1c <HAL_GetTick>
 8002ffa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ffc:	e01b      	b.n	8003036 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ffe:	f7ff fd8d 	bl	8002b1c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d914      	bls.n	8003036 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10d      	bne.n	8003036 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	f043 0210 	orr.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e007      	b.n	8003046 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d0dc      	beq.n	8002ffe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_ADCEx_Calibration_Start+0x1e>
 800306a:	2302      	movs	r3, #2
 800306c:	e097      	b.n	800319e <HAL_ADCEx_Calibration_Start+0x14e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ffa8 	bl	8002fcc <ADC_ConversionStop_Disable>
 800307c:	4603      	mov	r3, r0
 800307e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff49 	bl	8002f18 <ADC_Enable>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 8081 	bne.w	8003194 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800309a:	f023 0302 	bic.w	r3, r3, #2
 800309e:	f043 0202 	orr.w	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80030a6:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <HAL_ADCEx_Calibration_Start+0x158>)
 80030a8:	681c      	ldr	r4, [r3, #0]
 80030aa:	2002      	movs	r0, #2
 80030ac:	f001 fc90 	bl	80049d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80030b0:	4603      	mov	r3, r0
 80030b2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80030b6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80030b8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80030ba:	e002      	b.n	80030c2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3b01      	subs	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f9      	bne.n	80030bc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80030d8:	f7ff fd20 	bl	8002b1c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80030de:	e01b      	b.n	8003118 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80030e0:	f7ff fd1c 	bl	8002b1c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b0a      	cmp	r3, #10
 80030ec:	d914      	bls.n	8003118 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	f023 0312 	bic.w	r3, r3, #18
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e042      	b.n	800319e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1dc      	bne.n	80030e0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0204 	orr.w	r2, r2, #4
 8003134:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003136:	f7ff fcf1 	bl	8002b1c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800313c:	e01b      	b.n	8003176 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800313e:	f7ff fced 	bl	8002b1c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b0a      	cmp	r3, #10
 800314a:	d914      	bls.n	8003176 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	f023 0312 	bic.w	r3, r3, #18
 8003162:	f043 0210 	orr.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e013      	b.n	800319e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1dc      	bne.n	800313e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	f023 0303 	bic.w	r3, r3, #3
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800319c:	7dfb      	ldrb	r3, [r7, #23]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000050 	.word	0x20000050

080031ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031de:	4a04      	ldr	r2, [pc, #16]	@ (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	60d3      	str	r3, [r2, #12]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	@ (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db0a      	blt.n	800323a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	490c      	ldr	r1, [pc, #48]	@ (800325c <__NVIC_SetPriority+0x4c>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	0112      	lsls	r2, r2, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	440b      	add	r3, r1
 8003234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003238:	e00a      	b.n	8003250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4908      	ldr	r1, [pc, #32]	@ (8003260 <__NVIC_SetPriority+0x50>)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b04      	subs	r3, #4
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	440b      	add	r3, r1
 800324e:	761a      	strb	r2, [r3, #24]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	@ 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f1c3 0307 	rsb	r3, r3, #7
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf28      	it	cs
 8003282:	2304      	movcs	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3304      	adds	r3, #4
 800328a:	2b06      	cmp	r3, #6
 800328c:	d902      	bls.n	8003294 <NVIC_EncodePriority+0x30>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3b03      	subs	r3, #3
 8003292:	e000      	b.n	8003296 <NVIC_EncodePriority+0x32>
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	4313      	orrs	r3, r2
         );
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	@ 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d8:	d301      	bcc.n	80032de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032da:	2301      	movs	r3, #1
 80032dc:	e00f      	b.n	80032fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <SysTick_Config+0x40>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e6:	210f      	movs	r1, #15
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	f7ff ff90 	bl	8003210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <SysTick_Config+0x40>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f6:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <SysTick_Config+0x40>)
 80032f8:	2207      	movs	r2, #7
 80032fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000e010 	.word	0xe000e010

0800330c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff49 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003334:	f7ff ff5e 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff ff90 	bl	8003264 <NVIC_EncodePriority>
 8003344:	4602      	mov	r2, r0
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff5f 	bl	8003210 <__NVIC_SetPriority>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ffb0 	bl	80032c8 <SysTick_Config>
 8003368:	4603      	mov	r3, r0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	@ 0x2c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003386:	e169      	b.n	800365c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003388:	2201      	movs	r2, #1
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 8158 	bne.w	8003656 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a9a      	ldr	r2, [pc, #616]	@ (8003614 <HAL_GPIO_Init+0x2a0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d05e      	beq.n	800346e <HAL_GPIO_Init+0xfa>
 80033b0:	4a98      	ldr	r2, [pc, #608]	@ (8003614 <HAL_GPIO_Init+0x2a0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d875      	bhi.n	80034a2 <HAL_GPIO_Init+0x12e>
 80033b6:	4a98      	ldr	r2, [pc, #608]	@ (8003618 <HAL_GPIO_Init+0x2a4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d058      	beq.n	800346e <HAL_GPIO_Init+0xfa>
 80033bc:	4a96      	ldr	r2, [pc, #600]	@ (8003618 <HAL_GPIO_Init+0x2a4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d86f      	bhi.n	80034a2 <HAL_GPIO_Init+0x12e>
 80033c2:	4a96      	ldr	r2, [pc, #600]	@ (800361c <HAL_GPIO_Init+0x2a8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d052      	beq.n	800346e <HAL_GPIO_Init+0xfa>
 80033c8:	4a94      	ldr	r2, [pc, #592]	@ (800361c <HAL_GPIO_Init+0x2a8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d869      	bhi.n	80034a2 <HAL_GPIO_Init+0x12e>
 80033ce:	4a94      	ldr	r2, [pc, #592]	@ (8003620 <HAL_GPIO_Init+0x2ac>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04c      	beq.n	800346e <HAL_GPIO_Init+0xfa>
 80033d4:	4a92      	ldr	r2, [pc, #584]	@ (8003620 <HAL_GPIO_Init+0x2ac>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d863      	bhi.n	80034a2 <HAL_GPIO_Init+0x12e>
 80033da:	4a92      	ldr	r2, [pc, #584]	@ (8003624 <HAL_GPIO_Init+0x2b0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d046      	beq.n	800346e <HAL_GPIO_Init+0xfa>
 80033e0:	4a90      	ldr	r2, [pc, #576]	@ (8003624 <HAL_GPIO_Init+0x2b0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d85d      	bhi.n	80034a2 <HAL_GPIO_Init+0x12e>
 80033e6:	2b12      	cmp	r3, #18
 80033e8:	d82a      	bhi.n	8003440 <HAL_GPIO_Init+0xcc>
 80033ea:	2b12      	cmp	r3, #18
 80033ec:	d859      	bhi.n	80034a2 <HAL_GPIO_Init+0x12e>
 80033ee:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <HAL_GPIO_Init+0x80>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	0800346f 	.word	0x0800346f
 80033f8:	08003449 	.word	0x08003449
 80033fc:	0800345b 	.word	0x0800345b
 8003400:	0800349d 	.word	0x0800349d
 8003404:	080034a3 	.word	0x080034a3
 8003408:	080034a3 	.word	0x080034a3
 800340c:	080034a3 	.word	0x080034a3
 8003410:	080034a3 	.word	0x080034a3
 8003414:	080034a3 	.word	0x080034a3
 8003418:	080034a3 	.word	0x080034a3
 800341c:	080034a3 	.word	0x080034a3
 8003420:	080034a3 	.word	0x080034a3
 8003424:	080034a3 	.word	0x080034a3
 8003428:	080034a3 	.word	0x080034a3
 800342c:	080034a3 	.word	0x080034a3
 8003430:	080034a3 	.word	0x080034a3
 8003434:	080034a3 	.word	0x080034a3
 8003438:	08003451 	.word	0x08003451
 800343c:	08003465 	.word	0x08003465
 8003440:	4a79      	ldr	r2, [pc, #484]	@ (8003628 <HAL_GPIO_Init+0x2b4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003446:	e02c      	b.n	80034a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	623b      	str	r3, [r7, #32]
          break;
 800344e:	e029      	b.n	80034a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	3304      	adds	r3, #4
 8003456:	623b      	str	r3, [r7, #32]
          break;
 8003458:	e024      	b.n	80034a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	3308      	adds	r3, #8
 8003460:	623b      	str	r3, [r7, #32]
          break;
 8003462:	e01f      	b.n	80034a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	330c      	adds	r3, #12
 800346a:	623b      	str	r3, [r7, #32]
          break;
 800346c:	e01a      	b.n	80034a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003476:	2304      	movs	r3, #4
 8003478:	623b      	str	r3, [r7, #32]
          break;
 800347a:	e013      	b.n	80034a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003484:	2308      	movs	r3, #8
 8003486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	611a      	str	r2, [r3, #16]
          break;
 800348e:	e009      	b.n	80034a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003490:	2308      	movs	r3, #8
 8003492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	615a      	str	r2, [r3, #20]
          break;
 800349a:	e003      	b.n	80034a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800349c:	2300      	movs	r3, #0
 800349e:	623b      	str	r3, [r7, #32]
          break;
 80034a0:	e000      	b.n	80034a4 <HAL_GPIO_Init+0x130>
          break;
 80034a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2bff      	cmp	r3, #255	@ 0xff
 80034a8:	d801      	bhi.n	80034ae <HAL_GPIO_Init+0x13a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	e001      	b.n	80034b2 <HAL_GPIO_Init+0x13e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2bff      	cmp	r3, #255	@ 0xff
 80034b8:	d802      	bhi.n	80034c0 <HAL_GPIO_Init+0x14c>
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	e002      	b.n	80034c6 <HAL_GPIO_Init+0x152>
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	3b08      	subs	r3, #8
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	210f      	movs	r1, #15
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	6a39      	ldr	r1, [r7, #32]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	431a      	orrs	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80b1 	beq.w	8003656 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034f4:	4b4d      	ldr	r3, [pc, #308]	@ (800362c <HAL_GPIO_Init+0x2b8>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	4a4c      	ldr	r2, [pc, #304]	@ (800362c <HAL_GPIO_Init+0x2b8>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6193      	str	r3, [r2, #24]
 8003500:	4b4a      	ldr	r3, [pc, #296]	@ (800362c <HAL_GPIO_Init+0x2b8>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800350c:	4a48      	ldr	r2, [pc, #288]	@ (8003630 <HAL_GPIO_Init+0x2bc>)
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	3302      	adds	r3, #2
 8003514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003518:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	220f      	movs	r2, #15
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a40      	ldr	r2, [pc, #256]	@ (8003634 <HAL_GPIO_Init+0x2c0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <HAL_GPIO_Init+0x1ec>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a3f      	ldr	r2, [pc, #252]	@ (8003638 <HAL_GPIO_Init+0x2c4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00d      	beq.n	800355c <HAL_GPIO_Init+0x1e8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a3e      	ldr	r2, [pc, #248]	@ (800363c <HAL_GPIO_Init+0x2c8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <HAL_GPIO_Init+0x1e4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a3d      	ldr	r2, [pc, #244]	@ (8003640 <HAL_GPIO_Init+0x2cc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_GPIO_Init+0x1e0>
 8003550:	2303      	movs	r3, #3
 8003552:	e006      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 8003554:	2304      	movs	r3, #4
 8003556:	e004      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 8003558:	2302      	movs	r3, #2
 800355a:	e002      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 8003560:	2300      	movs	r3, #0
 8003562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003564:	f002 0203 	and.w	r2, r2, #3
 8003568:	0092      	lsls	r2, r2, #2
 800356a:	4093      	lsls	r3, r2
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003572:	492f      	ldr	r1, [pc, #188]	@ (8003630 <HAL_GPIO_Init+0x2bc>)
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	3302      	adds	r3, #2
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800358c:	4b2d      	ldr	r3, [pc, #180]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	492c      	ldr	r1, [pc, #176]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	608b      	str	r3, [r1, #8]
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800359a:	4b2a      	ldr	r3, [pc, #168]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	4928      	ldr	r1, [pc, #160]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035b4:	4b23      	ldr	r3, [pc, #140]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	4922      	ldr	r1, [pc, #136]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60cb      	str	r3, [r1, #12]
 80035c0:	e006      	b.n	80035d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035c2:	4b20      	ldr	r3, [pc, #128]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	491e      	ldr	r1, [pc, #120]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035dc:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	4918      	ldr	r1, [pc, #96]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
 80035e8:	e006      	b.n	80035f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035ea:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4914      	ldr	r1, [pc, #80]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d021      	beq.n	8003648 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003604:	4b0f      	ldr	r3, [pc, #60]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	490e      	ldr	r1, [pc, #56]	@ (8003644 <HAL_GPIO_Init+0x2d0>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	e021      	b.n	8003656 <HAL_GPIO_Init+0x2e2>
 8003612:	bf00      	nop
 8003614:	10320000 	.word	0x10320000
 8003618:	10310000 	.word	0x10310000
 800361c:	10220000 	.word	0x10220000
 8003620:	10210000 	.word	0x10210000
 8003624:	10120000 	.word	0x10120000
 8003628:	10110000 	.word	0x10110000
 800362c:	40021000 	.word	0x40021000
 8003630:	40010000 	.word	0x40010000
 8003634:	40010800 	.word	0x40010800
 8003638:	40010c00 	.word	0x40010c00
 800363c:	40011000 	.word	0x40011000
 8003640:	40011400 	.word	0x40011400
 8003644:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003648:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <HAL_GPIO_Init+0x304>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	43db      	mvns	r3, r3
 8003650:	4909      	ldr	r1, [pc, #36]	@ (8003678 <HAL_GPIO_Init+0x304>)
 8003652:	4013      	ands	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	3301      	adds	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	f47f ae8e 	bne.w	8003388 <HAL_GPIO_Init+0x14>
  }
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	372c      	adds	r7, #44	@ 0x2c
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40010400 	.word	0x40010400

0800367c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e001      	b.n	800369e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	807b      	strh	r3, [r7, #2]
 80036b6:	4613      	mov	r3, r2
 80036b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ba:	787b      	ldrb	r3, [r7, #1]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c0:	887a      	ldrh	r2, [r7, #2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036c6:	e003      	b.n	80036d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036c8:	887b      	ldrh	r3, [r7, #2]
 80036ca:	041a      	lsls	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036ec:	887a      	ldrh	r2, [r7, #2]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4013      	ands	r3, r2
 80036f2:	041a      	lsls	r2, r3, #16
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	43d9      	mvns	r1, r3
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	400b      	ands	r3, r1
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	611a      	str	r2, [r3, #16]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e12b      	b.n	8003976 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe ff9e 	bl	8002674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	@ 0x24
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800375e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800376e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003770:	f001 f832 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a81      	ldr	r2, [pc, #516]	@ (8003980 <HAL_I2C_Init+0x274>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d807      	bhi.n	8003790 <HAL_I2C_Init+0x84>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a80      	ldr	r2, [pc, #512]	@ (8003984 <HAL_I2C_Init+0x278>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e006      	b.n	800379e <HAL_I2C_Init+0x92>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a7d      	ldr	r2, [pc, #500]	@ (8003988 <HAL_I2C_Init+0x27c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	bf94      	ite	ls
 8003798:	2301      	movls	r3, #1
 800379a:	2300      	movhi	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0e7      	b.n	8003976 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a78      	ldr	r2, [pc, #480]	@ (800398c <HAL_I2C_Init+0x280>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0c9b      	lsrs	r3, r3, #18
 80037b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003980 <HAL_I2C_Init+0x274>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d802      	bhi.n	80037e0 <HAL_I2C_Init+0xd4>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3301      	adds	r3, #1
 80037de:	e009      	b.n	80037f4 <HAL_I2C_Init+0xe8>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	4a69      	ldr	r2, [pc, #420]	@ (8003990 <HAL_I2C_Init+0x284>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	3301      	adds	r3, #1
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003806:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	495c      	ldr	r1, [pc, #368]	@ (8003980 <HAL_I2C_Init+0x274>)
 8003810:	428b      	cmp	r3, r1
 8003812:	d819      	bhi.n	8003848 <HAL_I2C_Init+0x13c>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1e59      	subs	r1, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003828:	400b      	ands	r3, r1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_I2C_Init+0x138>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1e59      	subs	r1, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fbb1 f3f3 	udiv	r3, r1, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003842:	e051      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 8003844:	2304      	movs	r3, #4
 8003846:	e04f      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d111      	bne.n	8003874 <HAL_I2C_Init+0x168>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	440b      	add	r3, r1
 800385e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	e012      	b.n	800389a <HAL_I2C_Init+0x18e>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e58      	subs	r0, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	0099      	lsls	r1, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Init+0x196>
 800389e:	2301      	movs	r3, #1
 80038a0:	e022      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10e      	bne.n	80038c8 <HAL_I2C_Init+0x1bc>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e58      	subs	r0, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	440b      	add	r3, r1
 80038b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c6:	e00f      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e58      	subs	r0, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	0099      	lsls	r1, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	fbb0 f3f3 	udiv	r3, r0, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	6809      	ldr	r1, [r1, #0]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003916:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6911      	ldr	r1, [r2, #16]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	430b      	orrs	r3, r1
 800392a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	000186a0 	.word	0x000186a0
 8003984:	001e847f 	.word	0x001e847f
 8003988:	003d08ff 	.word	0x003d08ff
 800398c:	431bde83 	.word	0x431bde83
 8003990:	10624dd3 	.word	0x10624dd3

08003994 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	461a      	mov	r2, r3
 80039a0:	460b      	mov	r3, r1
 80039a2:	817b      	strh	r3, [r7, #10]
 80039a4:	4613      	mov	r3, r2
 80039a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039a8:	f7ff f8b8 	bl	8002b1c <HAL_GetTick>
 80039ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	f040 80e0 	bne.w	8003b7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2319      	movs	r3, #25
 80039c2:	2201      	movs	r2, #1
 80039c4:	4970      	ldr	r1, [pc, #448]	@ (8003b88 <HAL_I2C_Master_Transmit+0x1f4>)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f964 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
 80039d4:	e0d3      	b.n	8003b7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2C_Master_Transmit+0x50>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0cc      	b.n	8003b7e <HAL_I2C_Master_Transmit+0x1ea>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d007      	beq.n	8003a0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2221      	movs	r2, #33	@ 0x21
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2210      	movs	r2, #16
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	893a      	ldrh	r2, [r7, #8]
 8003a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a50      	ldr	r2, [pc, #320]	@ (8003b8c <HAL_I2C_Master_Transmit+0x1f8>)
 8003a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a4c:	8979      	ldrh	r1, [r7, #10]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	6a3a      	ldr	r2, [r7, #32]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f89c 	bl	8003b90 <I2C_MasterRequestWrite>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e08d      	b.n	8003b7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a78:	e066      	b.n	8003b48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	6a39      	ldr	r1, [r7, #32]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fa22 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00d      	beq.n	8003aa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d107      	bne.n	8003aa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06b      	b.n	8003b7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d11b      	bne.n	8003b1c <HAL_I2C_Master_Transmit+0x188>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d017      	beq.n	8003b1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fa19 	bl	8003f58 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d107      	bne.n	8003b44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e01a      	b.n	8003b7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d194      	bne.n	8003a7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e000      	b.n	8003b7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	00100002 	.word	0x00100002
 8003b8c:	ffff0000 	.word	0xffff0000

08003b90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d006      	beq.n	8003bba <I2C_MasterRequestWrite+0x2a>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d003      	beq.n	8003bba <I2C_MasterRequestWrite+0x2a>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bb8:	d108      	bne.n	8003bcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e00b      	b.n	8003be4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd0:	2b12      	cmp	r3, #18
 8003bd2:	d107      	bne.n	8003be4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f84f 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00d      	beq.n	8003c18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0a:	d103      	bne.n	8003c14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e035      	b.n	8003c84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c20:	d108      	bne.n	8003c34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c30:	611a      	str	r2, [r3, #16]
 8003c32:	e01b      	b.n	8003c6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c34:	897b      	ldrh	r3, [r7, #10]
 8003c36:	11db      	asrs	r3, r3, #7
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f003 0306 	and.w	r3, r3, #6
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f063 030f 	orn	r3, r3, #15
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	490e      	ldr	r1, [pc, #56]	@ (8003c8c <I2C_MasterRequestWrite+0xfc>)
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f898 	bl	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e010      	b.n	8003c84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4907      	ldr	r1, [pc, #28]	@ (8003c90 <I2C_MasterRequestWrite+0x100>)
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f888 	bl	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	00010008 	.word	0x00010008
 8003c90:	00010002 	.word	0x00010002

08003c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca4:	e048      	b.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d044      	beq.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fe ff35 	bl	8002b1c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d139      	bne.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10d      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	e00c      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d116      	bne.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e023      	b.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10d      	bne.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	e00c      	b.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d093      	beq.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d96:	e071      	b.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da6:	d123      	bne.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e067      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d041      	beq.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df8:	f7fe fe90 	bl	8002b1c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d136      	bne.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10c      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e00b      	b.n	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e021      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	0c1b      	lsrs	r3, r3, #16
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10c      	bne.n	8003ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e00b      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f47f af6d 	bne.w	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed4:	e034      	b.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f886 	bl	8003fe8 <I2C_IsAcknowledgeFailed>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e034      	b.n	8003f50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d028      	beq.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe fe15 	bl	8002b1c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11d      	bne.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b80      	cmp	r3, #128	@ 0x80
 8003f10:	d016      	beq.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4a:	2b80      	cmp	r3, #128	@ 0x80
 8003f4c:	d1c3      	bne.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f64:	e034      	b.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f83e 	bl	8003fe8 <I2C_IsAcknowledgeFailed>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e034      	b.n	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d028      	beq.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fe fdcd 	bl	8002b1c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11d      	bne.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d016      	beq.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e007      	b.n	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d1c3      	bne.n	8003f66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffe:	d11b      	bne.n	8004038 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004008:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e272      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8087 	beq.w	8004172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004064:	4b92      	ldr	r3, [pc, #584]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b04      	cmp	r3, #4
 800406e:	d00c      	beq.n	800408a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004070:	4b8f      	ldr	r3, [pc, #572]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d112      	bne.n	80040a2 <HAL_RCC_OscConfig+0x5e>
 800407c:	4b8c      	ldr	r3, [pc, #560]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004088:	d10b      	bne.n	80040a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408a:	4b89      	ldr	r3, [pc, #548]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d06c      	beq.n	8004170 <HAL_RCC_OscConfig+0x12c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d168      	bne.n	8004170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e24c      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x76>
 80040ac:	4b80      	ldr	r3, [pc, #512]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a7f      	ldr	r2, [pc, #508]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	e02e      	b.n	8004118 <HAL_RCC_OscConfig+0xd4>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x98>
 80040c2:	4b7b      	ldr	r3, [pc, #492]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a7a      	ldr	r2, [pc, #488]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b78      	ldr	r3, [pc, #480]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a77      	ldr	r2, [pc, #476]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e01d      	b.n	8004118 <HAL_RCC_OscConfig+0xd4>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0xbc>
 80040e6:	4b72      	ldr	r3, [pc, #456]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a71      	ldr	r2, [pc, #452]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b6f      	ldr	r3, [pc, #444]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a6e      	ldr	r2, [pc, #440]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0xd4>
 8004100:	4b6b      	ldr	r3, [pc, #428]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6a      	ldr	r2, [pc, #424]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b68      	ldr	r3, [pc, #416]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a67      	ldr	r2, [pc, #412]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004116:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fe fcfc 	bl	8002b1c <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fe fcf8 	bl	8002b1c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	@ 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e200      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b5d      	ldr	r3, [pc, #372]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0xe4>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fe fce8 	bl	8002b1c <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fe fce4 	bl	8002b1c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	@ 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1ec      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	4b53      	ldr	r3, [pc, #332]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x10c>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d063      	beq.n	8004246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800417e:	4b4c      	ldr	r3, [pc, #304]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800418a:	4b49      	ldr	r3, [pc, #292]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b08      	cmp	r3, #8
 8004194:	d11c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x18c>
 8004196:	4b46      	ldr	r3, [pc, #280]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	4b43      	ldr	r3, [pc, #268]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x176>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1c0      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	4b3d      	ldr	r3, [pc, #244]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4939      	ldr	r1, [pc, #228]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	e03a      	b.n	8004246 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b36      	ldr	r3, [pc, #216]	@ (80042b4 <HAL_RCC_OscConfig+0x270>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fe fc9d 	bl	8002b1c <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fe fc99 	bl	8002b1c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e1a1      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	4b2d      	ldr	r3, [pc, #180]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b2a      	ldr	r3, [pc, #168]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4927      	ldr	r1, [pc, #156]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	e015      	b.n	8004246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421a:	4b26      	ldr	r3, [pc, #152]	@ (80042b4 <HAL_RCC_OscConfig+0x270>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fe fc7c 	bl	8002b1c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004228:	f7fe fc78 	bl	8002b1c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e180      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	4b1d      	ldr	r3, [pc, #116]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03a      	beq.n	80042c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d019      	beq.n	800428e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425a:	4b17      	ldr	r3, [pc, #92]	@ (80042b8 <HAL_RCC_OscConfig+0x274>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7fe fc5c 	bl	8002b1c <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004268:	f7fe fc58 	bl	8002b1c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e160      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004286:	2001      	movs	r0, #1
 8004288:	f000 face 	bl	8004828 <RCC_Delay>
 800428c:	e01c      	b.n	80042c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428e:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <HAL_RCC_OscConfig+0x274>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004294:	f7fe fc42 	bl	8002b1c <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429a:	e00f      	b.n	80042bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429c:	f7fe fc3e 	bl	8002b1c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d908      	bls.n	80042bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e146      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	42420000 	.word	0x42420000
 80042b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	4b92      	ldr	r3, [pc, #584]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e9      	bne.n	800429c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a6 	beq.w	8004422 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b8b      	ldr	r3, [pc, #556]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b88      	ldr	r3, [pc, #544]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4a87      	ldr	r2, [pc, #540]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f0:	61d3      	str	r3, [r2, #28]
 80042f2:	4b85      	ldr	r3, [pc, #532]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b82      	ldr	r3, [pc, #520]	@ (800450c <HAL_RCC_OscConfig+0x4c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d118      	bne.n	8004340 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430e:	4b7f      	ldr	r3, [pc, #508]	@ (800450c <HAL_RCC_OscConfig+0x4c8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a7e      	ldr	r2, [pc, #504]	@ (800450c <HAL_RCC_OscConfig+0x4c8>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7fe fbff 	bl	8002b1c <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fe fbfb 	bl	8002b1c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b64      	cmp	r3, #100	@ 0x64
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e103      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	4b75      	ldr	r3, [pc, #468]	@ (800450c <HAL_RCC_OscConfig+0x4c8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x312>
 8004348:	4b6f      	ldr	r3, [pc, #444]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a6e      	ldr	r2, [pc, #440]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6213      	str	r3, [r2, #32]
 8004354:	e02d      	b.n	80043b2 <HAL_RCC_OscConfig+0x36e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x334>
 800435e:	4b6a      	ldr	r3, [pc, #424]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4a69      	ldr	r2, [pc, #420]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	6213      	str	r3, [r2, #32]
 800436a:	4b67      	ldr	r3, [pc, #412]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a66      	ldr	r2, [pc, #408]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	e01c      	b.n	80043b2 <HAL_RCC_OscConfig+0x36e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b05      	cmp	r3, #5
 800437e:	d10c      	bne.n	800439a <HAL_RCC_OscConfig+0x356>
 8004380:	4b61      	ldr	r3, [pc, #388]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4a60      	ldr	r2, [pc, #384]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004386:	f043 0304 	orr.w	r3, r3, #4
 800438a:	6213      	str	r3, [r2, #32]
 800438c:	4b5e      	ldr	r3, [pc, #376]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4a5d      	ldr	r2, [pc, #372]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6213      	str	r3, [r2, #32]
 8004398:	e00b      	b.n	80043b2 <HAL_RCC_OscConfig+0x36e>
 800439a:	4b5b      	ldr	r3, [pc, #364]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a5a      	ldr	r2, [pc, #360]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6213      	str	r3, [r2, #32]
 80043a6:	4b58      	ldr	r3, [pc, #352]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4a57      	ldr	r2, [pc, #348]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d015      	beq.n	80043e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ba:	f7fe fbaf 	bl	8002b1c <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fe fbab 	bl	8002b1c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0b1      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RCC_OscConfig+0x37e>
 80043e4:	e014      	b.n	8004410 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fe fb99 	bl	8002b1c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe fb95 	bl	8002b1c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e09b      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004404:	4b40      	ldr	r3, [pc, #256]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ee      	bne.n	80043ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004416:	4b3c      	ldr	r3, [pc, #240]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4a3b      	ldr	r2, [pc, #236]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004420:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8087 	beq.w	800453a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800442c:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d061      	beq.n	80044fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d146      	bne.n	80044ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004440:	4b33      	ldr	r3, [pc, #204]	@ (8004510 <HAL_RCC_OscConfig+0x4cc>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7fe fb69 	bl	8002b1c <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe fb65 	bl	8002b1c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e06d      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004460:	4b29      	ldr	r3, [pc, #164]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004474:	d108      	bne.n	8004488 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004476:	4b24      	ldr	r3, [pc, #144]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	4921      	ldr	r1, [pc, #132]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004488:	4b1f      	ldr	r3, [pc, #124]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a19      	ldr	r1, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	430b      	orrs	r3, r1
 800449a:	491b      	ldr	r1, [pc, #108]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004510 <HAL_RCC_OscConfig+0x4cc>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe fb39 	bl	8002b1c <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fe fb35 	bl	8002b1c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e03d      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c0:	4b11      	ldr	r3, [pc, #68]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x46a>
 80044cc:	e035      	b.n	800453a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <HAL_RCC_OscConfig+0x4cc>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fe fb22 	bl	8002b1c <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fe fb1e 	bl	8002b1c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e026      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x498>
 80044fa:	e01e      	b.n	800453a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e019      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
 8004508:	40021000 	.word	0x40021000
 800450c:	40007000 	.word	0x40007000
 8004510:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_RCC_OscConfig+0x500>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	429a      	cmp	r2, r3
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000

08004548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0d0      	b.n	80046fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800455c:	4b6a      	ldr	r3, [pc, #424]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d910      	bls.n	800458c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b67      	ldr	r3, [pc, #412]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 0207 	bic.w	r2, r3, #7
 8004572:	4965      	ldr	r1, [pc, #404]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b63      	ldr	r3, [pc, #396]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0b8      	b.n	80046fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d020      	beq.n	80045da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045a4:	4b59      	ldr	r3, [pc, #356]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a58      	ldr	r2, [pc, #352]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80045aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045bc:	4b53      	ldr	r3, [pc, #332]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a52      	ldr	r2, [pc, #328]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c8:	4b50      	ldr	r3, [pc, #320]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	494d      	ldr	r1, [pc, #308]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d040      	beq.n	8004668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ee:	4b47      	ldr	r3, [pc, #284]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d115      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e07f      	b.n	80046fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	4b41      	ldr	r3, [pc, #260]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e073      	b.n	80046fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004616:	4b3d      	ldr	r3, [pc, #244]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e06b      	b.n	80046fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004626:	4b39      	ldr	r3, [pc, #228]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f023 0203 	bic.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4936      	ldr	r1, [pc, #216]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004638:	f7fe fa70 	bl	8002b1c <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	e00a      	b.n	8004656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004640:	f7fe fa6c 	bl	8002b1c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e053      	b.n	80046fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	4b2d      	ldr	r3, [pc, #180]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 020c 	and.w	r2, r3, #12
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	429a      	cmp	r2, r3
 8004666:	d1eb      	bne.n	8004640 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004668:	4b27      	ldr	r3, [pc, #156]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d210      	bcs.n	8004698 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b24      	ldr	r3, [pc, #144]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 0207 	bic.w	r2, r3, #7
 800467e:	4922      	ldr	r1, [pc, #136]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4313      	orrs	r3, r2
 8004684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b20      	ldr	r3, [pc, #128]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e032      	b.n	80046fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a4:	4b19      	ldr	r3, [pc, #100]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4916      	ldr	r1, [pc, #88]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046c2:	4b12      	ldr	r3, [pc, #72]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	490e      	ldr	r1, [pc, #56]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046d6:	f000 f821 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80046da:	4602      	mov	r2, r0
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	490a      	ldr	r1, [pc, #40]	@ (8004710 <HAL_RCC_ClockConfig+0x1c8>)
 80046e8:	5ccb      	ldrb	r3, [r1, r3]
 80046ea:	fa22 f303 	lsr.w	r3, r2, r3
 80046ee:	4a09      	ldr	r2, [pc, #36]	@ (8004714 <HAL_RCC_ClockConfig+0x1cc>)
 80046f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046f2:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <HAL_RCC_ClockConfig+0x1d0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe f9ce 	bl	8002a98 <HAL_InitTick>

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40022000 	.word	0x40022000
 800470c:	40021000 	.word	0x40021000
 8004710:	080066a8 	.word	0x080066a8
 8004714:	20000050 	.word	0x20000050
 8004718:	20000054 	.word	0x20000054

0800471c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004736:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d002      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x30>
 8004746:	2b08      	cmp	r3, #8
 8004748:	d003      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x36>
 800474a:	e027      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800474c:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800474e:	613b      	str	r3, [r7, #16]
      break;
 8004750:	e027      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	0c9b      	lsrs	r3, r3, #18
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	4a17      	ldr	r2, [pc, #92]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800476a:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	0c5b      	lsrs	r3, r3, #17
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	4a11      	ldr	r2, [pc, #68]	@ (80047bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004776:	5cd3      	ldrb	r3, [r2, r3]
 8004778:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a0d      	ldr	r2, [pc, #52]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800477e:	fb03 f202 	mul.w	r2, r3, r2
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	e004      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a0c      	ldr	r2, [pc, #48]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004790:	fb02 f303 	mul.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	613b      	str	r3, [r7, #16]
      break;
 800479a:	e002      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800479e:	613b      	str	r3, [r7, #16]
      break;
 80047a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047a2:	693b      	ldr	r3, [r7, #16]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	007a1200 	.word	0x007a1200
 80047b8:	080066c0 	.word	0x080066c0
 80047bc:	080066d0 	.word	0x080066d0
 80047c0:	003d0900 	.word	0x003d0900

080047c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c8:	4b02      	ldr	r3, [pc, #8]	@ (80047d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ca:	681b      	ldr	r3, [r3, #0]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	20000050 	.word	0x20000050

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047dc:	f7ff fff2 	bl	80047c4 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	@ (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	080066b8 	.word	0x080066b8

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004804:	f7ff ffde 	bl	80047c4 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	0adb      	lsrs	r3, r3, #11
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4903      	ldr	r1, [pc, #12]	@ (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000
 8004824:	080066b8 	.word	0x080066b8

08004828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004830:	4b0a      	ldr	r3, [pc, #40]	@ (800485c <RCC_Delay+0x34>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a0a      	ldr	r2, [pc, #40]	@ (8004860 <RCC_Delay+0x38>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	0a5b      	lsrs	r3, r3, #9
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004844:	bf00      	nop
  }
  while (Delay --);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1e5a      	subs	r2, r3, #1
 800484a:	60fa      	str	r2, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f9      	bne.n	8004844 <RCC_Delay+0x1c>
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	20000050 	.word	0x20000050
 8004860:	10624dd3 	.word	0x10624dd3

08004864 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d07d      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004880:	2300      	movs	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004884:	4b4f      	ldr	r3, [pc, #316]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10d      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004890:	4b4c      	ldr	r3, [pc, #304]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	4a4b      	ldr	r2, [pc, #300]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489a:	61d3      	str	r3, [r2, #28]
 800489c:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	4b46      	ldr	r3, [pc, #280]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d118      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b8:	4b43      	ldr	r3, [pc, #268]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a42      	ldr	r2, [pc, #264]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c4:	f7fe f92a 	bl	8002b1c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	e008      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048cc:	f7fe f926 	bl	8002b1c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	@ 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e06d      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048de:	4b3a      	ldr	r3, [pc, #232]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ea:	4b36      	ldr	r3, [pc, #216]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02e      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	429a      	cmp	r2, r3
 8004906:	d027      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004908:	4b2e      	ldr	r3, [pc, #184]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004910:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004912:	4b2e      	ldr	r3, [pc, #184]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004918:	4b2c      	ldr	r3, [pc, #176]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800491e:	4a29      	ldr	r2, [pc, #164]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d014      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492e:	f7fe f8f5 	bl	8002b1c <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004934:	e00a      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fe f8f1 	bl	8002b1c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e036      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494c:	4b1d      	ldr	r3, [pc, #116]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ee      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004958:	4b1a      	ldr	r3, [pc, #104]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4917      	ldr	r1, [pc, #92]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004966:	4313      	orrs	r3, r2
 8004968:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800496a:	7dfb      	ldrb	r3, [r7, #23]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004970:	4b14      	ldr	r3, [pc, #80]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	4a13      	ldr	r2, [pc, #76]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800497a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004988:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	490b      	ldr	r1, [pc, #44]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a6:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	4904      	ldr	r1, [pc, #16]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40007000 	.word	0x40007000
 80049cc:	42420440 	.word	0x42420440

080049d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	2300      	movs	r3, #0
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	f200 808a 	bhi.w	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d045      	beq.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d075      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a06:	e082      	b.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004a08:	4b46      	ldr	r3, [pc, #280]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a0e:	4b45      	ldr	r3, [pc, #276]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d07b      	beq.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	0c9b      	lsrs	r3, r3, #18
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	4a41      	ldr	r2, [pc, #260]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004a24:	5cd3      	ldrb	r3, [r2, r3]
 8004a26:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d015      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a32:	4b3c      	ldr	r3, [pc, #240]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	0c5b      	lsrs	r3, r3, #17
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004a4c:	4a38      	ldr	r2, [pc, #224]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	e004      	b.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4a34      	ldr	r2, [pc, #208]	@ (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004a68:	4b2e      	ldr	r3, [pc, #184]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a74:	d102      	bne.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	61bb      	str	r3, [r7, #24]
      break;
 8004a7a:	e04a      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4a2d      	ldr	r2, [pc, #180]	@ (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]
      break;
 8004a8a:	e042      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004a8c:	4b25      	ldr	r3, [pc, #148]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9c:	d108      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004aa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	e01f      	b.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aba:	d109      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004abc:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ac8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	e00f      	b.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ada:	d11c      	bne.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d016      	beq.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ae8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004aec:	61bb      	str	r3, [r7, #24]
      break;
 8004aee:	e012      	b.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004af0:	e011      	b.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004af2:	f7ff fe85 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	0b9b      	lsrs	r3, r3, #14
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	3301      	adds	r3, #1
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0a:	61bb      	str	r3, [r7, #24]
      break;
 8004b0c:	e004      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e002      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b16:	bf00      	nop
    }
  }
  return (frequency);
 8004b18:	69bb      	ldr	r3, [r7, #24]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	080066d4 	.word	0x080066d4
 8004b2c:	080066e4 	.word	0x080066e4
 8004b30:	007a1200 	.word	0x007a1200
 8004b34:	003d0900 	.word	0x003d0900
 8004b38:	aaaaaaab 	.word	0xaaaaaaab

08004b3c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f815 	bl	8004b90 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0202 	bic.w	r2, r2, #2
 8004b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004b76:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RTC_AlarmIRQHandler+0x50>)
 8004b78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b7c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	745a      	strb	r2, [r3, #17]
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40010400 	.word	0x40010400

08004b90 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e076      	b.n	8004ca2 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d108      	bne.n	8004bce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc4:	d009      	beq.n	8004bda <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	61da      	str	r2, [r3, #28]
 8004bcc:	e005      	b.n	8004bda <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fd fd7d 	bl	80026f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5e:	ea42 0103 	orr.w	r1, r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	0c1a      	lsrs	r2, r3, #16
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f002 0204 	and.w	r2, r2, #4
 8004c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b088      	sub	sp, #32
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cba:	f7fd ff2f 	bl	8002b1c <HAL_GetTick>
 8004cbe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e12a      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_SPI_Transmit+0x36>
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e122      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_SPI_Transmit+0x48>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e11b      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d40:	d10f      	bne.n	8004d62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b40      	cmp	r3, #64	@ 0x40
 8004d6e:	d007      	beq.n	8004d80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d88:	d152      	bne.n	8004e30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Transmit+0xee>
 8004d92:	8b7b      	ldrh	r3, [r7, #26]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d145      	bne.n	8004e24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dbc:	e032      	b.n	8004e24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d112      	bne.n	8004df2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004df0:	e018      	b.n	8004e24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df2:	f7fd fe93 	bl	8002b1c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_Transmit+0x160>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Transmit+0x166>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e082      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1c7      	bne.n	8004dbe <HAL_SPI_Transmit+0x114>
 8004e2e:	e053      	b.n	8004ed8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_SPI_Transmit+0x194>
 8004e38:	8b7b      	ldrh	r3, [r7, #26]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d147      	bne.n	8004ece <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e64:	e033      	b.n	8004ece <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d113      	bne.n	8004e9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	7812      	ldrb	r2, [r2, #0]
 8004e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e9a:	e018      	b.n	8004ece <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e9c:	f7fd fe3e 	bl	8002b1c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d803      	bhi.n	8004eb4 <HAL_SPI_Transmit+0x20a>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d102      	bne.n	8004eba <HAL_SPI_Transmit+0x210>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e02d      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1c6      	bne.n	8004e66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fbc5 	bl	800566c <SPI_EndRxTxTransaction>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f28:	2300      	movs	r3, #0
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b088      	sub	sp, #32
 8004f36:	af02      	add	r7, sp, #8
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d001      	beq.n	8004f52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e104      	b.n	800515c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f5a:	d112      	bne.n	8004f82 <HAL_SPI_Receive+0x50>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10e      	bne.n	8004f82 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2204      	movs	r2, #4
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f8f3 	bl	8005164 <HAL_SPI_TransmitReceive>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	e0ec      	b.n	800515c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f82:	f7fd fdcb 	bl	8002b1c <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_SPI_Receive+0x62>
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0e1      	b.n	800515c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_SPI_Receive+0x74>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e0da      	b.n	800515c <HAL_SPI_Receive+0x22a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff4:	d10f      	bne.n	8005016 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005014:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005020:	2b40      	cmp	r3, #64	@ 0x40
 8005022:	d007      	beq.n	8005034 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d170      	bne.n	800511e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800503c:	e035      	b.n	80050aa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	d115      	bne.n	8005078 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f103 020c 	add.w	r2, r3, #12
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005076:	e018      	b.n	80050aa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005078:	f7fd fd50 	bl	8002b1c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d803      	bhi.n	8005090 <HAL_SPI_Receive+0x15e>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d102      	bne.n	8005096 <HAL_SPI_Receive+0x164>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e058      	b.n	800515c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1c4      	bne.n	800503e <HAL_SPI_Receive+0x10c>
 80050b4:	e038      	b.n	8005128 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d113      	bne.n	80050ec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	b292      	uxth	r2, r2
 80050d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050ea:	e018      	b.n	800511e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ec:	f7fd fd16 	bl	8002b1c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d803      	bhi.n	8005104 <HAL_SPI_Receive+0x1d2>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d102      	bne.n	800510a <HAL_SPI_Receive+0x1d8>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e01e      	b.n	800515c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1c6      	bne.n	80050b6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fa4b 	bl	80055c8 <SPI_EndRxTransaction>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800515a:	2300      	movs	r3, #0
  }
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	@ 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005172:	2301      	movs	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005176:	f7fd fcd1 	bl	8002b1c <HAL_GetTick>
 800517a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005182:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800518a:	887b      	ldrh	r3, [r7, #2]
 800518c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800518e:	7ffb      	ldrb	r3, [r7, #31]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d00c      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x4a>
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800519a:	d106      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x46>
 80051a4:	7ffb      	ldrb	r3, [r7, #31]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d001      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
 80051ac:	e17f      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x5c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x5c>
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e174      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_SPI_TransmitReceive+0x6e>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e16d      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d003      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2205      	movs	r2, #5
 80051ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	887a      	ldrh	r2, [r7, #2]
 80051fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	887a      	ldrh	r2, [r7, #2]
 8005204:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522e:	2b40      	cmp	r3, #64	@ 0x40
 8005230:	d007      	beq.n	8005242 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800524a:	d17e      	bne.n	800534a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_SPI_TransmitReceive+0xf6>
 8005254:	8afb      	ldrh	r3, [r7, #22]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d16c      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800527e:	e059      	b.n	8005334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d11b      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x162>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d016      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x162>
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	2b01      	cmp	r3, #1
 800529c:	d113      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	881a      	ldrh	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d119      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x1a4>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d014      	beq.n	8005308 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e8:	b292      	uxth	r2, r2
 80052ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005304:	2301      	movs	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005308:	f7fd fc08 	bl	8002b1c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005314:	429a      	cmp	r2, r3
 8005316:	d80d      	bhi.n	8005334 <HAL_SPI_TransmitReceive+0x1d0>
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d009      	beq.n	8005334 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e0bc      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1a0      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x11c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d19b      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x11c>
 8005348:	e082      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x1f4>
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d171      	bne.n	800543c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800537e:	e05d      	b.n	800543c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b02      	cmp	r3, #2
 800538c:	d11c      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x264>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d017      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0x264>
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	2b01      	cmp	r3, #1
 800539c:	d114      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	7812      	ldrb	r2, [r2, #0]
 80053aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d119      	bne.n	800540a <HAL_SPI_TransmitReceive+0x2a6>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d014      	beq.n	800540a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005406:	2301      	movs	r3, #1
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800540a:	f7fd fb87 	bl	8002b1c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005416:	429a      	cmp	r2, r3
 8005418:	d803      	bhi.n	8005422 <HAL_SPI_TransmitReceive+0x2be>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d102      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x2c4>
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e038      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d19c      	bne.n	8005380 <HAL_SPI_TransmitReceive+0x21c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d197      	bne.n	8005380 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f909 	bl	800566c <SPI_EndRxTxTransaction>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e01d      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80054ac:	2300      	movs	r3, #0
  }
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3728      	adds	r7, #40	@ 0x28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054c8:	f7fd fb28 	bl	8002b1c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054d8:	f7fd fb20 	bl	8002b1c <HAL_GetTick>
 80054dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054de:	4b39      	ldr	r3, [pc, #228]	@ (80055c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	015b      	lsls	r3, r3, #5
 80054e4:	0d1b      	lsrs	r3, r3, #20
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ee:	e054      	b.n	800559a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d050      	beq.n	800559a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054f8:	f7fd fb10 	bl	8002b1c <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	429a      	cmp	r2, r3
 8005506:	d902      	bls.n	800550e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d13d      	bne.n	800558a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800551c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005526:	d111      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005530:	d004      	beq.n	800553c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800553a:	d107      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800554a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005554:	d10f      	bne.n	8005576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e017      	b.n	80055ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3b01      	subs	r3, #1
 8005598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4013      	ands	r3, r2
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d19b      	bne.n	80054f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000050 	.word	0x20000050

080055c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055dc:	d111      	bne.n	8005602 <SPI_EndRxTransaction+0x3a>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e6:	d004      	beq.n	80055f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f0:	d107      	bne.n	8005602 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005600:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800560a:	d117      	bne.n	800563c <SPI_EndRxTransaction+0x74>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005614:	d112      	bne.n	800563c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	2101      	movs	r1, #1
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff ff49 	bl	80054b8 <SPI_WaitFlagStateUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01a      	beq.n	8005662 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e013      	b.n	8005664 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2200      	movs	r2, #0
 8005644:	2180      	movs	r1, #128	@ 0x80
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff ff36 	bl	80054b8 <SPI_WaitFlagStateUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e000      	b.n	8005664 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2201      	movs	r2, #1
 8005680:	2102      	movs	r1, #2
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff ff18 	bl	80054b8 <SPI_WaitFlagStateUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005692:	f043 0220 	orr.w	r2, r3, #32
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e013      	b.n	80056c6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2180      	movs	r1, #128	@ 0x80
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff ff05 	bl	80054b8 <SPI_WaitFlagStateUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e000      	b.n	80056c6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e042      	b.n	8005766 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fd f857 	bl	80027a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2224      	movs	r2, #36	@ 0x24
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005710:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f88a 	bl	800582c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005726:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005736:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005746:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b20      	cmp	r3, #32
 8005786:	d112      	bne.n	80057ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <HAL_UART_Receive_IT+0x26>
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e00b      	b.n	80057b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	461a      	mov	r2, r3
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f807 	bl	80057b8 <UART_Start_Receive_IT>
 80057aa:	4603      	mov	r3, r0
 80057ac:	e000      	b.n	80057b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2222      	movs	r2, #34	@ 0x22
 80057e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0220 	orr.w	r2, r2, #32
 800581c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr
	...

0800582c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005866:	f023 030c 	bic.w	r3, r3, #12
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	430b      	orrs	r3, r1
 8005872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2c      	ldr	r2, [pc, #176]	@ (8005940 <UART_SetConfig+0x114>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d103      	bne.n	800589c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005894:	f7fe ffb4 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	e002      	b.n	80058a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800589c:	f7fe ff9c 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80058a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009a      	lsls	r2, r3, #2
 80058ac:	441a      	add	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	4a22      	ldr	r2, [pc, #136]	@ (8005944 <UART_SetConfig+0x118>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	0119      	lsls	r1, r3, #4
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009a      	lsls	r2, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005944 <UART_SetConfig+0x118>)
 80058da:	fba3 0302 	umull	r0, r3, r3, r2
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	2064      	movs	r0, #100	@ 0x64
 80058e2:	fb00 f303 	mul.w	r3, r0, r3
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	3332      	adds	r3, #50	@ 0x32
 80058ec:	4a15      	ldr	r2, [pc, #84]	@ (8005944 <UART_SetConfig+0x118>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058f8:	4419      	add	r1, r3
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009a      	lsls	r2, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005910:	4b0c      	ldr	r3, [pc, #48]	@ (8005944 <UART_SetConfig+0x118>)
 8005912:	fba3 0302 	umull	r0, r3, r3, r2
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	2064      	movs	r0, #100	@ 0x64
 800591a:	fb00 f303 	mul.w	r3, r0, r3
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	3332      	adds	r3, #50	@ 0x32
 8005924:	4a07      	ldr	r2, [pc, #28]	@ (8005944 <UART_SetConfig+0x118>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	f003 020f 	and.w	r2, r3, #15
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	440a      	add	r2, r1
 8005936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40013800 	.word	0x40013800
 8005944:	51eb851f 	.word	0x51eb851f

08005948 <sniprintf>:
 8005948:	b40c      	push	{r2, r3}
 800594a:	b530      	push	{r4, r5, lr}
 800594c:	4b18      	ldr	r3, [pc, #96]	@ (80059b0 <sniprintf+0x68>)
 800594e:	1e0c      	subs	r4, r1, #0
 8005950:	681d      	ldr	r5, [r3, #0]
 8005952:	b09d      	sub	sp, #116	@ 0x74
 8005954:	da08      	bge.n	8005968 <sniprintf+0x20>
 8005956:	238b      	movs	r3, #139	@ 0x8b
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	602b      	str	r3, [r5, #0]
 800595e:	b01d      	add	sp, #116	@ 0x74
 8005960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005964:	b002      	add	sp, #8
 8005966:	4770      	bx	lr
 8005968:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800596c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005976:	bf0c      	ite	eq
 8005978:	4623      	moveq	r3, r4
 800597a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	9307      	str	r3, [sp, #28]
 8005982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005986:	9002      	str	r0, [sp, #8]
 8005988:	9006      	str	r0, [sp, #24]
 800598a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800598e:	4628      	mov	r0, r5
 8005990:	ab21      	add	r3, sp, #132	@ 0x84
 8005992:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005994:	a902      	add	r1, sp, #8
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	f000 f992 	bl	8005cc0 <_svfiprintf_r>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	bfbc      	itt	lt
 80059a0:	238b      	movlt	r3, #139	@ 0x8b
 80059a2:	602b      	strlt	r3, [r5, #0]
 80059a4:	2c00      	cmp	r4, #0
 80059a6:	d0da      	beq.n	800595e <sniprintf+0x16>
 80059a8:	2200      	movs	r2, #0
 80059aa:	9b02      	ldr	r3, [sp, #8]
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e7d6      	b.n	800595e <sniprintf+0x16>
 80059b0:	2000005c 	.word	0x2000005c

080059b4 <memset>:
 80059b4:	4603      	mov	r3, r0
 80059b6:	4402      	add	r2, r0
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d100      	bne.n	80059be <memset+0xa>
 80059bc:	4770      	bx	lr
 80059be:	f803 1b01 	strb.w	r1, [r3], #1
 80059c2:	e7f9      	b.n	80059b8 <memset+0x4>

080059c4 <__errno>:
 80059c4:	4b01      	ldr	r3, [pc, #4]	@ (80059cc <__errno+0x8>)
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	2000005c 	.word	0x2000005c

080059d0 <__libc_init_array>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	2600      	movs	r6, #0
 80059d4:	4d0c      	ldr	r5, [pc, #48]	@ (8005a08 <__libc_init_array+0x38>)
 80059d6:	4c0d      	ldr	r4, [pc, #52]	@ (8005a0c <__libc_init_array+0x3c>)
 80059d8:	1b64      	subs	r4, r4, r5
 80059da:	10a4      	asrs	r4, r4, #2
 80059dc:	42a6      	cmp	r6, r4
 80059de:	d109      	bne.n	80059f4 <__libc_init_array+0x24>
 80059e0:	f000 fc76 	bl	80062d0 <_init>
 80059e4:	2600      	movs	r6, #0
 80059e6:	4d0a      	ldr	r5, [pc, #40]	@ (8005a10 <__libc_init_array+0x40>)
 80059e8:	4c0a      	ldr	r4, [pc, #40]	@ (8005a14 <__libc_init_array+0x44>)
 80059ea:	1b64      	subs	r4, r4, r5
 80059ec:	10a4      	asrs	r4, r4, #2
 80059ee:	42a6      	cmp	r6, r4
 80059f0:	d105      	bne.n	80059fe <__libc_init_array+0x2e>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f8:	4798      	blx	r3
 80059fa:	3601      	adds	r6, #1
 80059fc:	e7ee      	b.n	80059dc <__libc_init_array+0xc>
 80059fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a02:	4798      	blx	r3
 8005a04:	3601      	adds	r6, #1
 8005a06:	e7f2      	b.n	80059ee <__libc_init_array+0x1e>
 8005a08:	08006724 	.word	0x08006724
 8005a0c:	08006724 	.word	0x08006724
 8005a10:	08006724 	.word	0x08006724
 8005a14:	08006728 	.word	0x08006728

08005a18 <__retarget_lock_acquire_recursive>:
 8005a18:	4770      	bx	lr

08005a1a <__retarget_lock_release_recursive>:
 8005a1a:	4770      	bx	lr

08005a1c <_free_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	2900      	cmp	r1, #0
 8005a22:	d040      	beq.n	8005aa6 <_free_r+0x8a>
 8005a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a28:	1f0c      	subs	r4, r1, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfb8      	it	lt
 8005a2e:	18e4      	addlt	r4, r4, r3
 8005a30:	f000 f8de 	bl	8005bf0 <__malloc_lock>
 8005a34:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa8 <_free_r+0x8c>)
 8005a36:	6813      	ldr	r3, [r2, #0]
 8005a38:	b933      	cbnz	r3, 8005a48 <_free_r+0x2c>
 8005a3a:	6063      	str	r3, [r4, #4]
 8005a3c:	6014      	str	r4, [r2, #0]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a44:	f000 b8da 	b.w	8005bfc <__malloc_unlock>
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	d908      	bls.n	8005a5e <_free_r+0x42>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	1821      	adds	r1, r4, r0
 8005a50:	428b      	cmp	r3, r1
 8005a52:	bf01      	itttt	eq
 8005a54:	6819      	ldreq	r1, [r3, #0]
 8005a56:	685b      	ldreq	r3, [r3, #4]
 8005a58:	1809      	addeq	r1, r1, r0
 8005a5a:	6021      	streq	r1, [r4, #0]
 8005a5c:	e7ed      	b.n	8005a3a <_free_r+0x1e>
 8005a5e:	461a      	mov	r2, r3
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b10b      	cbz	r3, 8005a68 <_free_r+0x4c>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d9fa      	bls.n	8005a5e <_free_r+0x42>
 8005a68:	6811      	ldr	r1, [r2, #0]
 8005a6a:	1850      	adds	r0, r2, r1
 8005a6c:	42a0      	cmp	r0, r4
 8005a6e:	d10b      	bne.n	8005a88 <_free_r+0x6c>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	4401      	add	r1, r0
 8005a74:	1850      	adds	r0, r2, r1
 8005a76:	4283      	cmp	r3, r0
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	d1e0      	bne.n	8005a3e <_free_r+0x22>
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4408      	add	r0, r1
 8005a82:	6010      	str	r0, [r2, #0]
 8005a84:	6053      	str	r3, [r2, #4]
 8005a86:	e7da      	b.n	8005a3e <_free_r+0x22>
 8005a88:	d902      	bls.n	8005a90 <_free_r+0x74>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	e7d6      	b.n	8005a3e <_free_r+0x22>
 8005a90:	6820      	ldr	r0, [r4, #0]
 8005a92:	1821      	adds	r1, r4, r0
 8005a94:	428b      	cmp	r3, r1
 8005a96:	bf01      	itttt	eq
 8005a98:	6819      	ldreq	r1, [r3, #0]
 8005a9a:	685b      	ldreq	r3, [r3, #4]
 8005a9c:	1809      	addeq	r1, r1, r0
 8005a9e:	6021      	streq	r1, [r4, #0]
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	6054      	str	r4, [r2, #4]
 8005aa4:	e7cb      	b.n	8005a3e <_free_r+0x22>
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	20000488 	.word	0x20000488

08005aac <sbrk_aligned>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	4e0f      	ldr	r6, [pc, #60]	@ (8005aec <sbrk_aligned+0x40>)
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	6831      	ldr	r1, [r6, #0]
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	b911      	cbnz	r1, 8005abe <sbrk_aligned+0x12>
 8005ab8:	f000 fba8 	bl	800620c <_sbrk_r>
 8005abc:	6030      	str	r0, [r6, #0]
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 fba3 	bl	800620c <_sbrk_r>
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	d103      	bne.n	8005ad2 <sbrk_aligned+0x26>
 8005aca:	f04f 34ff 	mov.w	r4, #4294967295
 8005ace:	4620      	mov	r0, r4
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
 8005ad2:	1cc4      	adds	r4, r0, #3
 8005ad4:	f024 0403 	bic.w	r4, r4, #3
 8005ad8:	42a0      	cmp	r0, r4
 8005ada:	d0f8      	beq.n	8005ace <sbrk_aligned+0x22>
 8005adc:	1a21      	subs	r1, r4, r0
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fb94 	bl	800620c <_sbrk_r>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d1f2      	bne.n	8005ace <sbrk_aligned+0x22>
 8005ae8:	e7ef      	b.n	8005aca <sbrk_aligned+0x1e>
 8005aea:	bf00      	nop
 8005aec:	20000484 	.word	0x20000484

08005af0 <_malloc_r>:
 8005af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af4:	1ccd      	adds	r5, r1, #3
 8005af6:	f025 0503 	bic.w	r5, r5, #3
 8005afa:	3508      	adds	r5, #8
 8005afc:	2d0c      	cmp	r5, #12
 8005afe:	bf38      	it	cc
 8005b00:	250c      	movcc	r5, #12
 8005b02:	2d00      	cmp	r5, #0
 8005b04:	4606      	mov	r6, r0
 8005b06:	db01      	blt.n	8005b0c <_malloc_r+0x1c>
 8005b08:	42a9      	cmp	r1, r5
 8005b0a:	d904      	bls.n	8005b16 <_malloc_r+0x26>
 8005b0c:	230c      	movs	r3, #12
 8005b0e:	6033      	str	r3, [r6, #0]
 8005b10:	2000      	movs	r0, #0
 8005b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bec <_malloc_r+0xfc>
 8005b1a:	f000 f869 	bl	8005bf0 <__malloc_lock>
 8005b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b22:	461c      	mov	r4, r3
 8005b24:	bb44      	cbnz	r4, 8005b78 <_malloc_r+0x88>
 8005b26:	4629      	mov	r1, r5
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f7ff ffbf 	bl	8005aac <sbrk_aligned>
 8005b2e:	1c43      	adds	r3, r0, #1
 8005b30:	4604      	mov	r4, r0
 8005b32:	d158      	bne.n	8005be6 <_malloc_r+0xf6>
 8005b34:	f8d8 4000 	ldr.w	r4, [r8]
 8005b38:	4627      	mov	r7, r4
 8005b3a:	2f00      	cmp	r7, #0
 8005b3c:	d143      	bne.n	8005bc6 <_malloc_r+0xd6>
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	d04b      	beq.n	8005bda <_malloc_r+0xea>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	4639      	mov	r1, r7
 8005b46:	4630      	mov	r0, r6
 8005b48:	eb04 0903 	add.w	r9, r4, r3
 8005b4c:	f000 fb5e 	bl	800620c <_sbrk_r>
 8005b50:	4581      	cmp	r9, r0
 8005b52:	d142      	bne.n	8005bda <_malloc_r+0xea>
 8005b54:	6821      	ldr	r1, [r4, #0]
 8005b56:	4630      	mov	r0, r6
 8005b58:	1a6d      	subs	r5, r5, r1
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	f7ff ffa6 	bl	8005aac <sbrk_aligned>
 8005b60:	3001      	adds	r0, #1
 8005b62:	d03a      	beq.n	8005bda <_malloc_r+0xea>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	442b      	add	r3, r5
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	bb62      	cbnz	r2, 8005bcc <_malloc_r+0xdc>
 8005b72:	f8c8 7000 	str.w	r7, [r8]
 8005b76:	e00f      	b.n	8005b98 <_malloc_r+0xa8>
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	1b52      	subs	r2, r2, r5
 8005b7c:	d420      	bmi.n	8005bc0 <_malloc_r+0xd0>
 8005b7e:	2a0b      	cmp	r2, #11
 8005b80:	d917      	bls.n	8005bb2 <_malloc_r+0xc2>
 8005b82:	1961      	adds	r1, r4, r5
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	6025      	str	r5, [r4, #0]
 8005b88:	bf18      	it	ne
 8005b8a:	6059      	strne	r1, [r3, #4]
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	bf08      	it	eq
 8005b90:	f8c8 1000 	streq.w	r1, [r8]
 8005b94:	5162      	str	r2, [r4, r5]
 8005b96:	604b      	str	r3, [r1, #4]
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f000 f82f 	bl	8005bfc <__malloc_unlock>
 8005b9e:	f104 000b 	add.w	r0, r4, #11
 8005ba2:	1d23      	adds	r3, r4, #4
 8005ba4:	f020 0007 	bic.w	r0, r0, #7
 8005ba8:	1ac2      	subs	r2, r0, r3
 8005baa:	bf1c      	itt	ne
 8005bac:	1a1b      	subne	r3, r3, r0
 8005bae:	50a3      	strne	r3, [r4, r2]
 8005bb0:	e7af      	b.n	8005b12 <_malloc_r+0x22>
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	bf0c      	ite	eq
 8005bb8:	f8c8 2000 	streq.w	r2, [r8]
 8005bbc:	605a      	strne	r2, [r3, #4]
 8005bbe:	e7eb      	b.n	8005b98 <_malloc_r+0xa8>
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	6864      	ldr	r4, [r4, #4]
 8005bc4:	e7ae      	b.n	8005b24 <_malloc_r+0x34>
 8005bc6:	463c      	mov	r4, r7
 8005bc8:	687f      	ldr	r7, [r7, #4]
 8005bca:	e7b6      	b.n	8005b3a <_malloc_r+0x4a>
 8005bcc:	461a      	mov	r2, r3
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	d1fb      	bne.n	8005bcc <_malloc_r+0xdc>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	6053      	str	r3, [r2, #4]
 8005bd8:	e7de      	b.n	8005b98 <_malloc_r+0xa8>
 8005bda:	230c      	movs	r3, #12
 8005bdc:	4630      	mov	r0, r6
 8005bde:	6033      	str	r3, [r6, #0]
 8005be0:	f000 f80c 	bl	8005bfc <__malloc_unlock>
 8005be4:	e794      	b.n	8005b10 <_malloc_r+0x20>
 8005be6:	6005      	str	r5, [r0, #0]
 8005be8:	e7d6      	b.n	8005b98 <_malloc_r+0xa8>
 8005bea:	bf00      	nop
 8005bec:	20000488 	.word	0x20000488

08005bf0 <__malloc_lock>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	@ (8005bf8 <__malloc_lock+0x8>)
 8005bf2:	f7ff bf11 	b.w	8005a18 <__retarget_lock_acquire_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20000480 	.word	0x20000480

08005bfc <__malloc_unlock>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	@ (8005c04 <__malloc_unlock+0x8>)
 8005bfe:	f7ff bf0c 	b.w	8005a1a <__retarget_lock_release_recursive>
 8005c02:	bf00      	nop
 8005c04:	20000480 	.word	0x20000480

08005c08 <__ssputs_r>:
 8005c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	461f      	mov	r7, r3
 8005c0e:	688e      	ldr	r6, [r1, #8]
 8005c10:	4682      	mov	sl, r0
 8005c12:	42be      	cmp	r6, r7
 8005c14:	460c      	mov	r4, r1
 8005c16:	4690      	mov	r8, r2
 8005c18:	680b      	ldr	r3, [r1, #0]
 8005c1a:	d82d      	bhi.n	8005c78 <__ssputs_r+0x70>
 8005c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c24:	d026      	beq.n	8005c74 <__ssputs_r+0x6c>
 8005c26:	6965      	ldr	r5, [r4, #20]
 8005c28:	6909      	ldr	r1, [r1, #16]
 8005c2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c2e:	eba3 0901 	sub.w	r9, r3, r1
 8005c32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c36:	1c7b      	adds	r3, r7, #1
 8005c38:	444b      	add	r3, r9
 8005c3a:	106d      	asrs	r5, r5, #1
 8005c3c:	429d      	cmp	r5, r3
 8005c3e:	bf38      	it	cc
 8005c40:	461d      	movcc	r5, r3
 8005c42:	0553      	lsls	r3, r2, #21
 8005c44:	d527      	bpl.n	8005c96 <__ssputs_r+0x8e>
 8005c46:	4629      	mov	r1, r5
 8005c48:	f7ff ff52 	bl	8005af0 <_malloc_r>
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	b360      	cbz	r0, 8005caa <__ssputs_r+0xa2>
 8005c50:	464a      	mov	r2, r9
 8005c52:	6921      	ldr	r1, [r4, #16]
 8005c54:	f000 faf8 	bl	8006248 <memcpy>
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	6126      	str	r6, [r4, #16]
 8005c66:	444e      	add	r6, r9
 8005c68:	6026      	str	r6, [r4, #0]
 8005c6a:	463e      	mov	r6, r7
 8005c6c:	6165      	str	r5, [r4, #20]
 8005c6e:	eba5 0509 	sub.w	r5, r5, r9
 8005c72:	60a5      	str	r5, [r4, #8]
 8005c74:	42be      	cmp	r6, r7
 8005c76:	d900      	bls.n	8005c7a <__ssputs_r+0x72>
 8005c78:	463e      	mov	r6, r7
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	6820      	ldr	r0, [r4, #0]
 8005c80:	f000 faaa 	bl	80061d8 <memmove>
 8005c84:	2000      	movs	r0, #0
 8005c86:	68a3      	ldr	r3, [r4, #8]
 8005c88:	1b9b      	subs	r3, r3, r6
 8005c8a:	60a3      	str	r3, [r4, #8]
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	4433      	add	r3, r6
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c96:	462a      	mov	r2, r5
 8005c98:	f000 fae4 	bl	8006264 <_realloc_r>
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d1e0      	bne.n	8005c64 <__ssputs_r+0x5c>
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	6921      	ldr	r1, [r4, #16]
 8005ca6:	f7ff feb9 	bl	8005a1c <_free_r>
 8005caa:	230c      	movs	r3, #12
 8005cac:	f8ca 3000 	str.w	r3, [sl]
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cba:	81a3      	strh	r3, [r4, #12]
 8005cbc:	e7e9      	b.n	8005c92 <__ssputs_r+0x8a>
	...

08005cc0 <_svfiprintf_r>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	4698      	mov	r8, r3
 8005cc6:	898b      	ldrh	r3, [r1, #12]
 8005cc8:	4607      	mov	r7, r0
 8005cca:	061b      	lsls	r3, r3, #24
 8005ccc:	460d      	mov	r5, r1
 8005cce:	4614      	mov	r4, r2
 8005cd0:	b09d      	sub	sp, #116	@ 0x74
 8005cd2:	d510      	bpl.n	8005cf6 <_svfiprintf_r+0x36>
 8005cd4:	690b      	ldr	r3, [r1, #16]
 8005cd6:	b973      	cbnz	r3, 8005cf6 <_svfiprintf_r+0x36>
 8005cd8:	2140      	movs	r1, #64	@ 0x40
 8005cda:	f7ff ff09 	bl	8005af0 <_malloc_r>
 8005cde:	6028      	str	r0, [r5, #0]
 8005ce0:	6128      	str	r0, [r5, #16]
 8005ce2:	b930      	cbnz	r0, 8005cf2 <_svfiprintf_r+0x32>
 8005ce4:	230c      	movs	r3, #12
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	b01d      	add	sp, #116	@ 0x74
 8005cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf2:	2340      	movs	r3, #64	@ 0x40
 8005cf4:	616b      	str	r3, [r5, #20]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cfa:	2320      	movs	r3, #32
 8005cfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d00:	2330      	movs	r3, #48	@ 0x30
 8005d02:	f04f 0901 	mov.w	r9, #1
 8005d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005ea4 <_svfiprintf_r+0x1e4>
 8005d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d12:	4623      	mov	r3, r4
 8005d14:	469a      	mov	sl, r3
 8005d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d1a:	b10a      	cbz	r2, 8005d20 <_svfiprintf_r+0x60>
 8005d1c:	2a25      	cmp	r2, #37	@ 0x25
 8005d1e:	d1f9      	bne.n	8005d14 <_svfiprintf_r+0x54>
 8005d20:	ebba 0b04 	subs.w	fp, sl, r4
 8005d24:	d00b      	beq.n	8005d3e <_svfiprintf_r+0x7e>
 8005d26:	465b      	mov	r3, fp
 8005d28:	4622      	mov	r2, r4
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f7ff ff6b 	bl	8005c08 <__ssputs_r>
 8005d32:	3001      	adds	r0, #1
 8005d34:	f000 80a7 	beq.w	8005e86 <_svfiprintf_r+0x1c6>
 8005d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d3a:	445a      	add	r2, fp
 8005d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 809f 	beq.w	8005e86 <_svfiprintf_r+0x1c6>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d52:	f10a 0a01 	add.w	sl, sl, #1
 8005d56:	9304      	str	r3, [sp, #16]
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d60:	4654      	mov	r4, sl
 8005d62:	2205      	movs	r2, #5
 8005d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d68:	484e      	ldr	r0, [pc, #312]	@ (8005ea4 <_svfiprintf_r+0x1e4>)
 8005d6a:	f000 fa5f 	bl	800622c <memchr>
 8005d6e:	9a04      	ldr	r2, [sp, #16]
 8005d70:	b9d8      	cbnz	r0, 8005daa <_svfiprintf_r+0xea>
 8005d72:	06d0      	lsls	r0, r2, #27
 8005d74:	bf44      	itt	mi
 8005d76:	2320      	movmi	r3, #32
 8005d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d7c:	0711      	lsls	r1, r2, #28
 8005d7e:	bf44      	itt	mi
 8005d80:	232b      	movmi	r3, #43	@ 0x2b
 8005d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d86:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d8c:	d015      	beq.n	8005dba <_svfiprintf_r+0xfa>
 8005d8e:	4654      	mov	r4, sl
 8005d90:	2000      	movs	r0, #0
 8005d92:	f04f 0c0a 	mov.w	ip, #10
 8005d96:	9a07      	ldr	r2, [sp, #28]
 8005d98:	4621      	mov	r1, r4
 8005d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d9e:	3b30      	subs	r3, #48	@ 0x30
 8005da0:	2b09      	cmp	r3, #9
 8005da2:	d94b      	bls.n	8005e3c <_svfiprintf_r+0x17c>
 8005da4:	b1b0      	cbz	r0, 8005dd4 <_svfiprintf_r+0x114>
 8005da6:	9207      	str	r2, [sp, #28]
 8005da8:	e014      	b.n	8005dd4 <_svfiprintf_r+0x114>
 8005daa:	eba0 0308 	sub.w	r3, r0, r8
 8005dae:	fa09 f303 	lsl.w	r3, r9, r3
 8005db2:	4313      	orrs	r3, r2
 8005db4:	46a2      	mov	sl, r4
 8005db6:	9304      	str	r3, [sp, #16]
 8005db8:	e7d2      	b.n	8005d60 <_svfiprintf_r+0xa0>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	1d19      	adds	r1, r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	9103      	str	r1, [sp, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bfbb      	ittet	lt
 8005dc6:	425b      	neglt	r3, r3
 8005dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dcc:	9307      	strge	r3, [sp, #28]
 8005dce:	9307      	strlt	r3, [sp, #28]
 8005dd0:	bfb8      	it	lt
 8005dd2:	9204      	strlt	r2, [sp, #16]
 8005dd4:	7823      	ldrb	r3, [r4, #0]
 8005dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dd8:	d10a      	bne.n	8005df0 <_svfiprintf_r+0x130>
 8005dda:	7863      	ldrb	r3, [r4, #1]
 8005ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dde:	d132      	bne.n	8005e46 <_svfiprintf_r+0x186>
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	3402      	adds	r4, #2
 8005de4:	1d1a      	adds	r2, r3, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	9203      	str	r2, [sp, #12]
 8005dea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dee:	9305      	str	r3, [sp, #20]
 8005df0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ea8 <_svfiprintf_r+0x1e8>
 8005df4:	2203      	movs	r2, #3
 8005df6:	4650      	mov	r0, sl
 8005df8:	7821      	ldrb	r1, [r4, #0]
 8005dfa:	f000 fa17 	bl	800622c <memchr>
 8005dfe:	b138      	cbz	r0, 8005e10 <_svfiprintf_r+0x150>
 8005e00:	2240      	movs	r2, #64	@ 0x40
 8005e02:	9b04      	ldr	r3, [sp, #16]
 8005e04:	eba0 000a 	sub.w	r0, r0, sl
 8005e08:	4082      	lsls	r2, r0
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	3401      	adds	r4, #1
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e14:	2206      	movs	r2, #6
 8005e16:	4825      	ldr	r0, [pc, #148]	@ (8005eac <_svfiprintf_r+0x1ec>)
 8005e18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e1c:	f000 fa06 	bl	800622c <memchr>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d036      	beq.n	8005e92 <_svfiprintf_r+0x1d2>
 8005e24:	4b22      	ldr	r3, [pc, #136]	@ (8005eb0 <_svfiprintf_r+0x1f0>)
 8005e26:	bb1b      	cbnz	r3, 8005e70 <_svfiprintf_r+0x1b0>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	3307      	adds	r3, #7
 8005e2c:	f023 0307 	bic.w	r3, r3, #7
 8005e30:	3308      	adds	r3, #8
 8005e32:	9303      	str	r3, [sp, #12]
 8005e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e36:	4433      	add	r3, r6
 8005e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e3a:	e76a      	b.n	8005d12 <_svfiprintf_r+0x52>
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	2001      	movs	r0, #1
 8005e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e44:	e7a8      	b.n	8005d98 <_svfiprintf_r+0xd8>
 8005e46:	2300      	movs	r3, #0
 8005e48:	f04f 0c0a 	mov.w	ip, #10
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	3401      	adds	r4, #1
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	4620      	mov	r0, r4
 8005e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e58:	3a30      	subs	r2, #48	@ 0x30
 8005e5a:	2a09      	cmp	r2, #9
 8005e5c:	d903      	bls.n	8005e66 <_svfiprintf_r+0x1a6>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0c6      	beq.n	8005df0 <_svfiprintf_r+0x130>
 8005e62:	9105      	str	r1, [sp, #20]
 8005e64:	e7c4      	b.n	8005df0 <_svfiprintf_r+0x130>
 8005e66:	4604      	mov	r4, r0
 8005e68:	2301      	movs	r3, #1
 8005e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e6e:	e7f0      	b.n	8005e52 <_svfiprintf_r+0x192>
 8005e70:	ab03      	add	r3, sp, #12
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	462a      	mov	r2, r5
 8005e76:	4638      	mov	r0, r7
 8005e78:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb4 <_svfiprintf_r+0x1f4>)
 8005e7a:	a904      	add	r1, sp, #16
 8005e7c:	f3af 8000 	nop.w
 8005e80:	1c42      	adds	r2, r0, #1
 8005e82:	4606      	mov	r6, r0
 8005e84:	d1d6      	bne.n	8005e34 <_svfiprintf_r+0x174>
 8005e86:	89ab      	ldrh	r3, [r5, #12]
 8005e88:	065b      	lsls	r3, r3, #25
 8005e8a:	f53f af2d 	bmi.w	8005ce8 <_svfiprintf_r+0x28>
 8005e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e90:	e72c      	b.n	8005cec <_svfiprintf_r+0x2c>
 8005e92:	ab03      	add	r3, sp, #12
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	462a      	mov	r2, r5
 8005e98:	4638      	mov	r0, r7
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <_svfiprintf_r+0x1f4>)
 8005e9c:	a904      	add	r1, sp, #16
 8005e9e:	f000 f87d 	bl	8005f9c <_printf_i>
 8005ea2:	e7ed      	b.n	8005e80 <_svfiprintf_r+0x1c0>
 8005ea4:	080066e6 	.word	0x080066e6
 8005ea8:	080066ec 	.word	0x080066ec
 8005eac:	080066f0 	.word	0x080066f0
 8005eb0:	00000000 	.word	0x00000000
 8005eb4:	08005c09 	.word	0x08005c09

08005eb8 <_printf_common>:
 8005eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	4616      	mov	r6, r2
 8005ebe:	4698      	mov	r8, r3
 8005ec0:	688a      	ldr	r2, [r1, #8]
 8005ec2:	690b      	ldr	r3, [r1, #16]
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	bfb8      	it	lt
 8005eca:	4613      	movlt	r3, r2
 8005ecc:	6033      	str	r3, [r6, #0]
 8005ece:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ed8:	b10a      	cbz	r2, 8005ede <_printf_common+0x26>
 8005eda:	3301      	adds	r3, #1
 8005edc:	6033      	str	r3, [r6, #0]
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	0699      	lsls	r1, r3, #26
 8005ee2:	bf42      	ittt	mi
 8005ee4:	6833      	ldrmi	r3, [r6, #0]
 8005ee6:	3302      	addmi	r3, #2
 8005ee8:	6033      	strmi	r3, [r6, #0]
 8005eea:	6825      	ldr	r5, [r4, #0]
 8005eec:	f015 0506 	ands.w	r5, r5, #6
 8005ef0:	d106      	bne.n	8005f00 <_printf_common+0x48>
 8005ef2:	f104 0a19 	add.w	sl, r4, #25
 8005ef6:	68e3      	ldr	r3, [r4, #12]
 8005ef8:	6832      	ldr	r2, [r6, #0]
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	dc2b      	bgt.n	8005f58 <_printf_common+0xa0>
 8005f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	3b00      	subs	r3, #0
 8005f08:	bf18      	it	ne
 8005f0a:	2301      	movne	r3, #1
 8005f0c:	0692      	lsls	r2, r2, #26
 8005f0e:	d430      	bmi.n	8005f72 <_printf_common+0xba>
 8005f10:	4641      	mov	r1, r8
 8005f12:	4638      	mov	r0, r7
 8005f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f18:	47c8      	blx	r9
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d023      	beq.n	8005f66 <_printf_common+0xae>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	f003 0306 	and.w	r3, r3, #6
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	bf14      	ite	ne
 8005f2a:	2500      	movne	r5, #0
 8005f2c:	6833      	ldreq	r3, [r6, #0]
 8005f2e:	f04f 0600 	mov.w	r6, #0
 8005f32:	bf08      	it	eq
 8005f34:	68e5      	ldreq	r5, [r4, #12]
 8005f36:	f104 041a 	add.w	r4, r4, #26
 8005f3a:	bf08      	it	eq
 8005f3c:	1aed      	subeq	r5, r5, r3
 8005f3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f42:	bf08      	it	eq
 8005f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	bfc4      	itt	gt
 8005f4c:	1a9b      	subgt	r3, r3, r2
 8005f4e:	18ed      	addgt	r5, r5, r3
 8005f50:	42b5      	cmp	r5, r6
 8005f52:	d11a      	bne.n	8005f8a <_printf_common+0xd2>
 8005f54:	2000      	movs	r0, #0
 8005f56:	e008      	b.n	8005f6a <_printf_common+0xb2>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	4638      	mov	r0, r7
 8005f60:	47c8      	blx	r9
 8005f62:	3001      	adds	r0, #1
 8005f64:	d103      	bne.n	8005f6e <_printf_common+0xb6>
 8005f66:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6e:	3501      	adds	r5, #1
 8005f70:	e7c1      	b.n	8005ef6 <_printf_common+0x3e>
 8005f72:	2030      	movs	r0, #48	@ 0x30
 8005f74:	18e1      	adds	r1, r4, r3
 8005f76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f80:	4422      	add	r2, r4
 8005f82:	3302      	adds	r3, #2
 8005f84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f88:	e7c2      	b.n	8005f10 <_printf_common+0x58>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	4641      	mov	r1, r8
 8005f90:	4638      	mov	r0, r7
 8005f92:	47c8      	blx	r9
 8005f94:	3001      	adds	r0, #1
 8005f96:	d0e6      	beq.n	8005f66 <_printf_common+0xae>
 8005f98:	3601      	adds	r6, #1
 8005f9a:	e7d9      	b.n	8005f50 <_printf_common+0x98>

08005f9c <_printf_i>:
 8005f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	7e0f      	ldrb	r7, [r1, #24]
 8005fa2:	4691      	mov	r9, r2
 8005fa4:	2f78      	cmp	r7, #120	@ 0x78
 8005fa6:	4680      	mov	r8, r0
 8005fa8:	460c      	mov	r4, r1
 8005faa:	469a      	mov	sl, r3
 8005fac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fb2:	d807      	bhi.n	8005fc4 <_printf_i+0x28>
 8005fb4:	2f62      	cmp	r7, #98	@ 0x62
 8005fb6:	d80a      	bhi.n	8005fce <_printf_i+0x32>
 8005fb8:	2f00      	cmp	r7, #0
 8005fba:	f000 80d1 	beq.w	8006160 <_printf_i+0x1c4>
 8005fbe:	2f58      	cmp	r7, #88	@ 0x58
 8005fc0:	f000 80b8 	beq.w	8006134 <_printf_i+0x198>
 8005fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fcc:	e03a      	b.n	8006044 <_printf_i+0xa8>
 8005fce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fd2:	2b15      	cmp	r3, #21
 8005fd4:	d8f6      	bhi.n	8005fc4 <_printf_i+0x28>
 8005fd6:	a101      	add	r1, pc, #4	@ (adr r1, 8005fdc <_printf_i+0x40>)
 8005fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fdc:	08006035 	.word	0x08006035
 8005fe0:	08006049 	.word	0x08006049
 8005fe4:	08005fc5 	.word	0x08005fc5
 8005fe8:	08005fc5 	.word	0x08005fc5
 8005fec:	08005fc5 	.word	0x08005fc5
 8005ff0:	08005fc5 	.word	0x08005fc5
 8005ff4:	08006049 	.word	0x08006049
 8005ff8:	08005fc5 	.word	0x08005fc5
 8005ffc:	08005fc5 	.word	0x08005fc5
 8006000:	08005fc5 	.word	0x08005fc5
 8006004:	08005fc5 	.word	0x08005fc5
 8006008:	08006147 	.word	0x08006147
 800600c:	08006073 	.word	0x08006073
 8006010:	08006101 	.word	0x08006101
 8006014:	08005fc5 	.word	0x08005fc5
 8006018:	08005fc5 	.word	0x08005fc5
 800601c:	08006169 	.word	0x08006169
 8006020:	08005fc5 	.word	0x08005fc5
 8006024:	08006073 	.word	0x08006073
 8006028:	08005fc5 	.word	0x08005fc5
 800602c:	08005fc5 	.word	0x08005fc5
 8006030:	08006109 	.word	0x08006109
 8006034:	6833      	ldr	r3, [r6, #0]
 8006036:	1d1a      	adds	r2, r3, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6032      	str	r2, [r6, #0]
 800603c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006044:	2301      	movs	r3, #1
 8006046:	e09c      	b.n	8006182 <_printf_i+0x1e6>
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	1d19      	adds	r1, r3, #4
 800604e:	6031      	str	r1, [r6, #0]
 8006050:	0606      	lsls	r6, r0, #24
 8006052:	d501      	bpl.n	8006058 <_printf_i+0xbc>
 8006054:	681d      	ldr	r5, [r3, #0]
 8006056:	e003      	b.n	8006060 <_printf_i+0xc4>
 8006058:	0645      	lsls	r5, r0, #25
 800605a:	d5fb      	bpl.n	8006054 <_printf_i+0xb8>
 800605c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006060:	2d00      	cmp	r5, #0
 8006062:	da03      	bge.n	800606c <_printf_i+0xd0>
 8006064:	232d      	movs	r3, #45	@ 0x2d
 8006066:	426d      	negs	r5, r5
 8006068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800606c:	230a      	movs	r3, #10
 800606e:	4858      	ldr	r0, [pc, #352]	@ (80061d0 <_printf_i+0x234>)
 8006070:	e011      	b.n	8006096 <_printf_i+0xfa>
 8006072:	6821      	ldr	r1, [r4, #0]
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	0608      	lsls	r0, r1, #24
 8006078:	f853 5b04 	ldr.w	r5, [r3], #4
 800607c:	d402      	bmi.n	8006084 <_printf_i+0xe8>
 800607e:	0649      	lsls	r1, r1, #25
 8006080:	bf48      	it	mi
 8006082:	b2ad      	uxthmi	r5, r5
 8006084:	2f6f      	cmp	r7, #111	@ 0x6f
 8006086:	6033      	str	r3, [r6, #0]
 8006088:	bf14      	ite	ne
 800608a:	230a      	movne	r3, #10
 800608c:	2308      	moveq	r3, #8
 800608e:	4850      	ldr	r0, [pc, #320]	@ (80061d0 <_printf_i+0x234>)
 8006090:	2100      	movs	r1, #0
 8006092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006096:	6866      	ldr	r6, [r4, #4]
 8006098:	2e00      	cmp	r6, #0
 800609a:	60a6      	str	r6, [r4, #8]
 800609c:	db05      	blt.n	80060aa <_printf_i+0x10e>
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	432e      	orrs	r6, r5
 80060a2:	f021 0104 	bic.w	r1, r1, #4
 80060a6:	6021      	str	r1, [r4, #0]
 80060a8:	d04b      	beq.n	8006142 <_printf_i+0x1a6>
 80060aa:	4616      	mov	r6, r2
 80060ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80060b0:	fb03 5711 	mls	r7, r3, r1, r5
 80060b4:	5dc7      	ldrb	r7, [r0, r7]
 80060b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060ba:	462f      	mov	r7, r5
 80060bc:	42bb      	cmp	r3, r7
 80060be:	460d      	mov	r5, r1
 80060c0:	d9f4      	bls.n	80060ac <_printf_i+0x110>
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d10b      	bne.n	80060de <_printf_i+0x142>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	07df      	lsls	r7, r3, #31
 80060ca:	d508      	bpl.n	80060de <_printf_i+0x142>
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	6861      	ldr	r1, [r4, #4]
 80060d0:	4299      	cmp	r1, r3
 80060d2:	bfde      	ittt	le
 80060d4:	2330      	movle	r3, #48	@ 0x30
 80060d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060de:	1b92      	subs	r2, r2, r6
 80060e0:	6122      	str	r2, [r4, #16]
 80060e2:	464b      	mov	r3, r9
 80060e4:	4621      	mov	r1, r4
 80060e6:	4640      	mov	r0, r8
 80060e8:	f8cd a000 	str.w	sl, [sp]
 80060ec:	aa03      	add	r2, sp, #12
 80060ee:	f7ff fee3 	bl	8005eb8 <_printf_common>
 80060f2:	3001      	adds	r0, #1
 80060f4:	d14a      	bne.n	800618c <_printf_i+0x1f0>
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	b004      	add	sp, #16
 80060fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	f043 0320 	orr.w	r3, r3, #32
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	2778      	movs	r7, #120	@ 0x78
 800610a:	4832      	ldr	r0, [pc, #200]	@ (80061d4 <_printf_i+0x238>)
 800610c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	6831      	ldr	r1, [r6, #0]
 8006114:	061f      	lsls	r7, r3, #24
 8006116:	f851 5b04 	ldr.w	r5, [r1], #4
 800611a:	d402      	bmi.n	8006122 <_printf_i+0x186>
 800611c:	065f      	lsls	r7, r3, #25
 800611e:	bf48      	it	mi
 8006120:	b2ad      	uxthmi	r5, r5
 8006122:	6031      	str	r1, [r6, #0]
 8006124:	07d9      	lsls	r1, r3, #31
 8006126:	bf44      	itt	mi
 8006128:	f043 0320 	orrmi.w	r3, r3, #32
 800612c:	6023      	strmi	r3, [r4, #0]
 800612e:	b11d      	cbz	r5, 8006138 <_printf_i+0x19c>
 8006130:	2310      	movs	r3, #16
 8006132:	e7ad      	b.n	8006090 <_printf_i+0xf4>
 8006134:	4826      	ldr	r0, [pc, #152]	@ (80061d0 <_printf_i+0x234>)
 8006136:	e7e9      	b.n	800610c <_printf_i+0x170>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	f023 0320 	bic.w	r3, r3, #32
 800613e:	6023      	str	r3, [r4, #0]
 8006140:	e7f6      	b.n	8006130 <_printf_i+0x194>
 8006142:	4616      	mov	r6, r2
 8006144:	e7bd      	b.n	80060c2 <_printf_i+0x126>
 8006146:	6833      	ldr	r3, [r6, #0]
 8006148:	6825      	ldr	r5, [r4, #0]
 800614a:	1d18      	adds	r0, r3, #4
 800614c:	6961      	ldr	r1, [r4, #20]
 800614e:	6030      	str	r0, [r6, #0]
 8006150:	062e      	lsls	r6, r5, #24
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	d501      	bpl.n	800615a <_printf_i+0x1be>
 8006156:	6019      	str	r1, [r3, #0]
 8006158:	e002      	b.n	8006160 <_printf_i+0x1c4>
 800615a:	0668      	lsls	r0, r5, #25
 800615c:	d5fb      	bpl.n	8006156 <_printf_i+0x1ba>
 800615e:	8019      	strh	r1, [r3, #0]
 8006160:	2300      	movs	r3, #0
 8006162:	4616      	mov	r6, r2
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	e7bc      	b.n	80060e2 <_printf_i+0x146>
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	2100      	movs	r1, #0
 800616c:	1d1a      	adds	r2, r3, #4
 800616e:	6032      	str	r2, [r6, #0]
 8006170:	681e      	ldr	r6, [r3, #0]
 8006172:	6862      	ldr	r2, [r4, #4]
 8006174:	4630      	mov	r0, r6
 8006176:	f000 f859 	bl	800622c <memchr>
 800617a:	b108      	cbz	r0, 8006180 <_printf_i+0x1e4>
 800617c:	1b80      	subs	r0, r0, r6
 800617e:	6060      	str	r0, [r4, #4]
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	6123      	str	r3, [r4, #16]
 8006184:	2300      	movs	r3, #0
 8006186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800618a:	e7aa      	b.n	80060e2 <_printf_i+0x146>
 800618c:	4632      	mov	r2, r6
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	47d0      	blx	sl
 8006196:	3001      	adds	r0, #1
 8006198:	d0ad      	beq.n	80060f6 <_printf_i+0x15a>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	079b      	lsls	r3, r3, #30
 800619e:	d413      	bmi.n	80061c8 <_printf_i+0x22c>
 80061a0:	68e0      	ldr	r0, [r4, #12]
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	4298      	cmp	r0, r3
 80061a6:	bfb8      	it	lt
 80061a8:	4618      	movlt	r0, r3
 80061aa:	e7a6      	b.n	80060fa <_printf_i+0x15e>
 80061ac:	2301      	movs	r3, #1
 80061ae:	4632      	mov	r2, r6
 80061b0:	4649      	mov	r1, r9
 80061b2:	4640      	mov	r0, r8
 80061b4:	47d0      	blx	sl
 80061b6:	3001      	adds	r0, #1
 80061b8:	d09d      	beq.n	80060f6 <_printf_i+0x15a>
 80061ba:	3501      	adds	r5, #1
 80061bc:	68e3      	ldr	r3, [r4, #12]
 80061be:	9903      	ldr	r1, [sp, #12]
 80061c0:	1a5b      	subs	r3, r3, r1
 80061c2:	42ab      	cmp	r3, r5
 80061c4:	dcf2      	bgt.n	80061ac <_printf_i+0x210>
 80061c6:	e7eb      	b.n	80061a0 <_printf_i+0x204>
 80061c8:	2500      	movs	r5, #0
 80061ca:	f104 0619 	add.w	r6, r4, #25
 80061ce:	e7f5      	b.n	80061bc <_printf_i+0x220>
 80061d0:	080066f7 	.word	0x080066f7
 80061d4:	08006708 	.word	0x08006708

080061d8 <memmove>:
 80061d8:	4288      	cmp	r0, r1
 80061da:	b510      	push	{r4, lr}
 80061dc:	eb01 0402 	add.w	r4, r1, r2
 80061e0:	d902      	bls.n	80061e8 <memmove+0x10>
 80061e2:	4284      	cmp	r4, r0
 80061e4:	4623      	mov	r3, r4
 80061e6:	d807      	bhi.n	80061f8 <memmove+0x20>
 80061e8:	1e43      	subs	r3, r0, #1
 80061ea:	42a1      	cmp	r1, r4
 80061ec:	d008      	beq.n	8006200 <memmove+0x28>
 80061ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061f6:	e7f8      	b.n	80061ea <memmove+0x12>
 80061f8:	4601      	mov	r1, r0
 80061fa:	4402      	add	r2, r0
 80061fc:	428a      	cmp	r2, r1
 80061fe:	d100      	bne.n	8006202 <memmove+0x2a>
 8006200:	bd10      	pop	{r4, pc}
 8006202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800620a:	e7f7      	b.n	80061fc <memmove+0x24>

0800620c <_sbrk_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	2300      	movs	r3, #0
 8006210:	4d05      	ldr	r5, [pc, #20]	@ (8006228 <_sbrk_r+0x1c>)
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	f7fc fba8 	bl	800296c <_sbrk>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_sbrk_r+0x1a>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_sbrk_r+0x1a>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	2000047c 	.word	0x2000047c

0800622c <memchr>:
 800622c:	4603      	mov	r3, r0
 800622e:	b510      	push	{r4, lr}
 8006230:	b2c9      	uxtb	r1, r1
 8006232:	4402      	add	r2, r0
 8006234:	4293      	cmp	r3, r2
 8006236:	4618      	mov	r0, r3
 8006238:	d101      	bne.n	800623e <memchr+0x12>
 800623a:	2000      	movs	r0, #0
 800623c:	e003      	b.n	8006246 <memchr+0x1a>
 800623e:	7804      	ldrb	r4, [r0, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	428c      	cmp	r4, r1
 8006244:	d1f6      	bne.n	8006234 <memchr+0x8>
 8006246:	bd10      	pop	{r4, pc}

08006248 <memcpy>:
 8006248:	440a      	add	r2, r1
 800624a:	4291      	cmp	r1, r2
 800624c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006250:	d100      	bne.n	8006254 <memcpy+0xc>
 8006252:	4770      	bx	lr
 8006254:	b510      	push	{r4, lr}
 8006256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625a:	4291      	cmp	r1, r2
 800625c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006260:	d1f9      	bne.n	8006256 <memcpy+0xe>
 8006262:	bd10      	pop	{r4, pc}

08006264 <_realloc_r>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	4607      	mov	r7, r0
 800626a:	4614      	mov	r4, r2
 800626c:	460d      	mov	r5, r1
 800626e:	b921      	cbnz	r1, 800627a <_realloc_r+0x16>
 8006270:	4611      	mov	r1, r2
 8006272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006276:	f7ff bc3b 	b.w	8005af0 <_malloc_r>
 800627a:	b92a      	cbnz	r2, 8006288 <_realloc_r+0x24>
 800627c:	f7ff fbce 	bl	8005a1c <_free_r>
 8006280:	4625      	mov	r5, r4
 8006282:	4628      	mov	r0, r5
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	f000 f81a 	bl	80062c0 <_malloc_usable_size_r>
 800628c:	4284      	cmp	r4, r0
 800628e:	4606      	mov	r6, r0
 8006290:	d802      	bhi.n	8006298 <_realloc_r+0x34>
 8006292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006296:	d8f4      	bhi.n	8006282 <_realloc_r+0x1e>
 8006298:	4621      	mov	r1, r4
 800629a:	4638      	mov	r0, r7
 800629c:	f7ff fc28 	bl	8005af0 <_malloc_r>
 80062a0:	4680      	mov	r8, r0
 80062a2:	b908      	cbnz	r0, 80062a8 <_realloc_r+0x44>
 80062a4:	4645      	mov	r5, r8
 80062a6:	e7ec      	b.n	8006282 <_realloc_r+0x1e>
 80062a8:	42b4      	cmp	r4, r6
 80062aa:	4622      	mov	r2, r4
 80062ac:	4629      	mov	r1, r5
 80062ae:	bf28      	it	cs
 80062b0:	4632      	movcs	r2, r6
 80062b2:	f7ff ffc9 	bl	8006248 <memcpy>
 80062b6:	4629      	mov	r1, r5
 80062b8:	4638      	mov	r0, r7
 80062ba:	f7ff fbaf 	bl	8005a1c <_free_r>
 80062be:	e7f1      	b.n	80062a4 <_realloc_r+0x40>

080062c0 <_malloc_usable_size_r>:
 80062c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062c4:	1f18      	subs	r0, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bfbc      	itt	lt
 80062ca:	580b      	ldrlt	r3, [r1, r0]
 80062cc:	18c0      	addlt	r0, r0, r3
 80062ce:	4770      	bx	lr

080062d0 <_init>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr

080062dc <_fini>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr
