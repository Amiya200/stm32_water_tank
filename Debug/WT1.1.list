
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c78  08003c78  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c78  08003c78  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c78  08003c78  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c78  08003c78  00004c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c7c  08003c7c  00004c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003c80  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000005c  08003cdc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003cdc  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074b4  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171a  00000000  00000000  0000c539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b1  00000000  00000000  0000e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001bc7  00000000  00000000  0000e989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a43d  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0cf  00000000  00000000  0001a98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6a5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e8  00000000  00000000  000a6aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000a8e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bd4 	.word	0x08003bd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003bd4 	.word	0x08003bd4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	@ 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000732:	2afd      	cmp	r2, #253	@ 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	@ 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	@ 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	@ 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup (e.g., 0x4E or 0x7E)

void lcd_send_cmd (char cmd)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f023 030f 	bic.w	r3, r3, #15
 8000990:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	f043 030c 	orr.w	r3, r3, #12
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (Command mode, Enable low)
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	f043 030c 	orr.w	r3, r3, #12
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 (Command mode, Enable low)
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009c0:	f107 0208 	add.w	r2, r7, #8
 80009c4:	2364      	movs	r3, #100	@ 0x64
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2304      	movs	r3, #4
 80009ca:	214e      	movs	r1, #78	@ 0x4e
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <lcd_send_cmd+0x5c>)
 80009ce:	f000 ffb3 	bl	8001938 <HAL_I2C_Master_Transmit>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000078 	.word	0x20000078

080009e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f023 030f 	bic.w	r3, r3, #15
 80009f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	011b      	lsls	r3, r3, #4
 80009f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	f043 030d 	orr.w	r3, r3, #13
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	f043 0309 	orr.w	r3, r3, #9
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000a0c:	7bbb      	ldrb	r3, [r7, #14]
 8000a0e:	f043 030d 	orr.w	r3, r3, #13
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	f043 0309 	orr.w	r3, r3, #9
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a20:	f107 0208 	add.w	r2, r7, #8
 8000a24:	2364      	movs	r3, #100	@ 0x64
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2304      	movs	r3, #4
 8000a2a:	214e      	movs	r1, #78	@ 0x4e
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <lcd_send_data+0x5c>)
 8000a2e:	f000 ff83 	bl	8001938 <HAL_I2C_Master_Transmit>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000078 	.word	0x20000078

08000a40 <lcd_put_cur>:
	HAL_Delay(2); // Wait for clear command to execute
	lcd_send_cmd (0x80); // Set cursor to home position (0,0)
}

void lcd_put_cur(int row, int col)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
    switch (row)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <lcd_put_cur+0x18>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d005      	beq.n	8000a62 <lcd_put_cur+0x22>
 8000a56:	e009      	b.n	8000a6c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Address for first row
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a5e:	603b      	str	r3, [r7, #0]
            break;
 8000a60:	e004      	b.n	8000a6c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Address for second row
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000a68:	603b      	str	r3, [r7, #0]
            break;
 8000a6a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff85 	bl	8000980 <lcd_send_cmd>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <lcd_init>:


void lcd_init (void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
	// 4 bit initialisation sequence (standard for PCF8574 based LCDs)
	HAL_Delay(50);  // wait for >40ms after power-on
 8000a82:	2032      	movs	r0, #50	@ 0x32
 8000a84:	f000 fb88 	bl	8001198 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000a88:	2030      	movs	r0, #48	@ 0x30
 8000a8a:	f7ff ff79 	bl	8000980 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a8e:	2005      	movs	r0, #5
 8000a90:	f000 fb82 	bl	8001198 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000a94:	2030      	movs	r0, #48	@ 0x30
 8000a96:	f7ff ff73 	bl	8000980 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 fb7c 	bl	8001198 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000aa0:	2030      	movs	r0, #48	@ 0x30
 8000aa2:	f7ff ff6d 	bl	8000980 <lcd_send_cmd>
	HAL_Delay(10);
 8000aa6:	200a      	movs	r0, #10
 8000aa8:	f000 fb76 	bl	8001198 <HAL_Delay>
	lcd_send_cmd (0x20);  // Function set (4-bit mode)
 8000aac:	2020      	movs	r0, #32
 8000aae:	f7ff ff67 	bl	8000980 <lcd_send_cmd>
	HAL_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f000 fb70 	bl	8001198 <HAL_Delay>

  // Display initialisation commands (after 4-bit mode is set)
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ab8:	2028      	movs	r0, #40	@ 0x28
 8000aba:	f7ff ff61 	bl	8000980 <lcd_send_cmd>
	HAL_Delay(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fb6a 	bl	8001198 <HAL_Delay>
	lcd_send_cmd (0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ac4:	2008      	movs	r0, #8
 8000ac6:	f7ff ff5b 	bl	8000980 <lcd_send_cmd>
	HAL_Delay(1);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 fb64 	bl	8001198 <HAL_Delay>
	lcd_send_cmd (0x01);  // Clear display
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff ff55 	bl	8000980 <lcd_send_cmd>
	HAL_Delay(2); // Longer delay for clear display
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f000 fb5e 	bl	8001198 <HAL_Delay>
	lcd_send_cmd (0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000adc:	2006      	movs	r0, #6
 8000ade:	f7ff ff4f 	bl	8000980 <lcd_send_cmd>
	HAL_Delay(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 fb58 	bl	8001198 <HAL_Delay>
	lcd_send_cmd (0x0C); // Display on/off control --> D = 1, C and B = 0. (Display ON, Cursor OFF, Blink OFF)
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f7ff ff49 	bl	8000980 <lcd_send_cmd>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000afa:	e006      	b.n	8000b0a <lcd_send_string+0x18>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff6b 	bl	80009e0 <lcd_send_data>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f4      	bne.n	8000afc <lcd_send_string+0xa>
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fad7 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f85d 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2a:	f000 f8cf 	bl	8000ccc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b2e:	f000 f89f 	bl	8000c70 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init (); // Initialize the LCD
 8000b32:	f7ff ffa4 	bl	8000a7e <lcd_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Get_Time(); // Read current time from RTC
 8000b36:	f000 f915 	bl	8000d64 <Get_Time>
	  sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000b3a:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <main+0xb0>)
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <main+0xb0>)
 8000b42:	785b      	ldrb	r3, [r3, #1]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <main+0xb0>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4920      	ldr	r1, [pc, #128]	@ (8000bd0 <main+0xb4>)
 8000b50:	4820      	ldr	r0, [pc, #128]	@ (8000bd4 <main+0xb8>)
 8000b52:	f002 fb8f 	bl	8003274 <siprintf>
	  lcd_put_cur (0,0); // Set cursor to row 0, column 0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ff71 	bl	8000a40 <lcd_put_cur>
	  lcd_send_string(buffer); // Display time
 8000b5e:	481d      	ldr	r0, [pc, #116]	@ (8000bd4 <main+0xb8>)
 8000b60:	f7ff ffc7 	bl	8000af2 <lcd_send_string>

	  sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <main+0xb0>)
 8000b66:	791b      	ldrb	r3, [r3, #4]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <main+0xb0>)
 8000b6c:	795b      	ldrb	r3, [r3, #5]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <main+0xb0>)
 8000b72:	799b      	ldrb	r3, [r3, #6]
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	460b      	mov	r3, r1
 8000b78:	4917      	ldr	r1, [pc, #92]	@ (8000bd8 <main+0xbc>)
 8000b7a:	4816      	ldr	r0, [pc, #88]	@ (8000bd4 <main+0xb8>)
 8000b7c:	f002 fb7a 	bl	8003274 <siprintf>
	  lcd_put_cur(1, 0); // Set cursor to row 1, column 0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff ff5c 	bl	8000a40 <lcd_put_cur>
	  lcd_send_string(buffer); // Display date
 8000b88:	4812      	ldr	r0, [pc, #72]	@ (8000bd4 <main+0xb8>)
 8000b8a:	f7ff ffb2 	bl	8000af2 <lcd_send_string>

	  force_temp_conv(); // Force a temperature conversion on RTC
 8000b8e:	f000 f967 	bl	8000e60 <force_temp_conv>
	  TEMP = Get_Temp(); // Read temperature from RTC
 8000b92:	f000 f937 	bl	8000e04 <Get_Temp>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <main+0xc0>)
 8000b9a:	6013      	str	r3, [r2, #0]

	  lcd_put_cur(0, 10); // Set cursor to row 0, column 10
 8000b9c:	210a      	movs	r1, #10
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ff4e 	bl	8000a40 <lcd_put_cur>
	  // Using %g for float to avoid trailing zeros if possible, or adjust precision
	  sprintf (buffer, "%.2f C", TEMP); // Display temperature with 2 decimal places and 'C' for Celsius
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <main+0xc0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc33 	bl	8000414 <__aeabi_f2d>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	490b      	ldr	r1, [pc, #44]	@ (8000be0 <main+0xc4>)
 8000bb4:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <main+0xb8>)
 8000bb6:	f002 fb5d 	bl	8003274 <siprintf>
	  lcd_send_string(buffer);
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <main+0xb8>)
 8000bbc:	f7ff ff99 	bl	8000af2 <lcd_send_string>

	  HAL_Delay(500); // Delay for 500ms before next update
 8000bc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bc4:	f000 fae8 	bl	8001198 <HAL_Delay>
	  Get_Time(); // Read current time from RTC
 8000bc8:	bf00      	nop
 8000bca:	e7b4      	b.n	8000b36 <main+0x1a>
 8000bcc:	200000e4 	.word	0x200000e4
 8000bd0:	08003bec 	.word	0x08003bec
 8000bd4:	200000d0 	.word	0x200000d0
 8000bd8:	08003bfc 	.word	0x08003bfc
 8000bdc:	200000cc 	.word	0x200000cc
 8000be0:	08003c10 	.word	0x08003c10

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b090      	sub	sp, #64	@ 0x40
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	2228      	movs	r2, #40	@ 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fb60 	bl	80032b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c22:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 ff25 	bl	8002a7c <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c38:	f000 f876 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2302      	movs	r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 f992 	bl	8002f80 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c62:	f000 f861 	bl	8000d28 <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3740      	adds	r7, #64	@ 0x40
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <MX_I2C1_Init+0x54>)
 8000c78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c7c:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <MX_I2C1_Init+0x58>)
 8000c7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000cae:	f000 fcff 	bl	80016b0 <HAL_I2C_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb8:	f000 f836 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000078 	.word	0x20000078
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	000186a0 	.word	0x000186a0

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	4a13      	ldr	r2, [pc, #76]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	6193      	str	r3, [r2, #24]
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <MX_GPIO_Init+0x58>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40021000 	.word	0x40021000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <bcdToDec>:
  * @brief Converts a Binary Coded Decimal (BCD) number to a normal decimal number.
  * @param val: The BCD value to convert.
  * @retval The decimal representation of the value.
  */
int bcdToDec(uint8_t val)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	091b      	lsrs	r3, r3, #4
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	461a      	mov	r2, r3
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	4413      	add	r3, r2
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <Get_Time>:
  *        The read values are stored in the global 'time' structure.
  * @param None
  * @retval None
  */
void Get_Time (void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	// Read 7 bytes starting from address 0x00 (seconds register)
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	2307      	movs	r3, #7
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	463b      	mov	r3, r7
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	21d0      	movs	r1, #208	@ 0xd0
 8000d7e:	481f      	ldr	r0, [pc, #124]	@ (8000dfc <Get_Time+0x98>)
 8000d80:	f000 ffd2 	bl	8001d28 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000d84:	783b      	ldrb	r3, [r7, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ffd4 	bl	8000d34 <bcdToDec>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <Get_Time+0x9c>)
 8000d92:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000d94:	787b      	ldrb	r3, [r7, #1]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ffcc 	bl	8000d34 <bcdToDec>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <Get_Time+0x9c>)
 8000da2:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000da4:	78bb      	ldrb	r3, [r7, #2]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffc4 	bl	8000d34 <bcdToDec>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <Get_Time+0x9c>)
 8000db2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffbc 	bl	8000d34 <bcdToDec>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <Get_Time+0x9c>)
 8000dc2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000dc4:	793b      	ldrb	r3, [r7, #4]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffb4 	bl	8000d34 <bcdToDec>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <Get_Time+0x9c>)
 8000dd2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffac 	bl	8000d34 <bcdToDec>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <Get_Time+0x9c>)
 8000de2:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ffa4 	bl	8000d34 <bcdToDec>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <Get_Time+0x9c>)
 8000df2:	719a      	strb	r2, [r3, #6]
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000078 	.word	0x20000078
 8000e00:	200000e4 	.word	0x200000e4

08000e04 <Get_Temp>:
  * @brief Reads the temperature from the DS3231 RTC module.
  * @param None
  * @retval The temperature in Celsius as a float.
  */
float Get_Temp (void)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af04      	add	r7, sp, #16
	uint8_t temp[2];

	// Read 2 bytes starting from address 0x11 (temperature MSB register)
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 1000);
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	2302      	movs	r3, #2
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	2211      	movs	r2, #17
 8000e1c:	21d0      	movs	r1, #208	@ 0xd0
 8000e1e:	480f      	ldr	r0, [pc, #60]	@ (8000e5c <Get_Temp+0x58>)
 8000e20:	f000 ff82 	bl	8001d28 <HAL_I2C_Mem_Read>
	// Temperature calculation: MSB + (LSB >> 6) * 0.25
	return ((float)temp[0]) + ((float)(temp[1] >> 6) / 4.0f);
 8000e24:	793b      	ldrb	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc02 	bl	8000630 <__aeabi_ui2f>
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	797b      	ldrb	r3, [r7, #5]
 8000e30:	099b      	lsrs	r3, r3, #6
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fbff 	bl	8000638 <__aeabi_i2f>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fd01 	bl	8000848 <__aeabi_fdiv>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f7ff fb40 	bl	80004d0 <__addsf3>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000078 	.word	0x20000078

08000e60 <force_temp_conv>:
  *        initiates a conversion if not already in progress.
  * @param None
  * @retval None
  */
void force_temp_conv (void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af04      	add	r7, sp, #16
	uint8_t status=0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
	uint8_t control=0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71bb      	strb	r3, [r7, #6]
	// Read status register (0x0F)
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);
 8000e6e:	2364      	movs	r3, #100	@ 0x64
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	21d0      	movs	r1, #208	@ 0xd0
 8000e80:	4813      	ldr	r0, [pc, #76]	@ (8000ed0 <force_temp_conv+0x70>)
 8000e82:	f000 ff51 	bl	8001d28 <HAL_I2C_Mem_Read>
	// Check if the busy bit (bit 2, OSF) is not set (0x04)
	if (!(status & 0x04))
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11b      	bne.n	8000ec8 <force_temp_conv+0x68>
	{
		// Read control register (0x0E)
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);
 8000e90:	2364      	movs	r3, #100	@ 0x64
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	2301      	movs	r3, #1
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	220e      	movs	r2, #14
 8000ea0:	21d0      	movs	r1, #208	@ 0xd0
 8000ea2:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <force_temp_conv+0x70>)
 8000ea4:	f000 ff40 	bl	8001d28 <HAL_I2C_Mem_Read>
		// Set the CONV bit (bit 5, CONV) in the control register to force a temperature conversion
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control | 0x20), 1, 100);
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	f043 0320 	orr.w	r3, r3, #32
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2364      	movs	r3, #100	@ 0x64
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	220e      	movs	r2, #14
 8000ec0:	21d0      	movs	r1, #208	@ 0xd0
 8000ec2:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <force_temp_conv+0x70>)
 8000ec4:	f000 fe36 	bl	8001b34 <HAL_I2C_Mem_Write>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000078 	.word	0x20000078

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <HAL_MspInit+0x5c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6193      	str	r3, [r2, #24]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_MspInit+0x5c>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <HAL_MspInit+0x5c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_MspInit+0x5c>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_MspInit+0x60>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_MspInit+0x60>)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000

08000f38 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a16      	ldr	r2, [pc, #88]	@ (8000fac <HAL_I2C_MspInit+0x74>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d124      	bne.n	8000fa2 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a14      	ldr	r2, [pc, #80]	@ (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f76:	2312      	movs	r3, #18
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <HAL_I2C_MspInit+0x7c>)
 8000f86:	f000 fa0f 	bl	80013a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40005800 	.word	0x40005800
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001008:	f000 f8aa 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	@ (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f002 f942 	bl	80032c8 <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20005000 	.word	0x20005000
 8001070:	00000400 	.word	0x00000400
 8001074:	200000ec 	.word	0x200000ec
 8001078:	20000240 	.word	0x20000240

0800107c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001088:	f7ff fff8 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800108e:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a09      	ldr	r2, [pc, #36]	@ (80010c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a4:	4c09      	ldr	r4, [pc, #36]	@ (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f002 f90f 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b6:	f7ff fd31 	bl	8000b1c <main>
  bx lr
 80010ba:	4770      	bx	lr
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010c4:	08003c80 	.word	0x08003c80
  ldr r2, =_sbss
 80010c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010cc:	2000023c 	.word	0x2000023c

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_Init+0x28>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_Init+0x28>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f92b 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fef0 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f935 	bl	800138e <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f90b 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	@ (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a03      	ldr	r2, [pc, #12]	@ (8001180 <HAL_IncTick+0x20>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20000008 	.word	0x20000008
 8001180:	200000f0 	.word	0x200000f0

08001184 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	@ (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	200000f0 	.word	0x200000f0

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff fff0 	bl	8001184 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffe0 	bl	8001184 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	@ (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	@ (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	@ 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff90 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	@ (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff49 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff5e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff90 	bl	8001298 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5f 	bl	8001244 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffb0 	bl	80012fc <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b08b      	sub	sp, #44	@ 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e169      	b.n	8001690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013bc:	2201      	movs	r2, #1
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8158 	bne.w	800168a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a9a      	ldr	r2, [pc, #616]	@ (8001648 <HAL_GPIO_Init+0x2a0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d05e      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013e4:	4a98      	ldr	r2, [pc, #608]	@ (8001648 <HAL_GPIO_Init+0x2a0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d875      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013ea:	4a98      	ldr	r2, [pc, #608]	@ (800164c <HAL_GPIO_Init+0x2a4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d058      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013f0:	4a96      	ldr	r2, [pc, #600]	@ (800164c <HAL_GPIO_Init+0x2a4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d86f      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013f6:	4a96      	ldr	r2, [pc, #600]	@ (8001650 <HAL_GPIO_Init+0x2a8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d052      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013fc:	4a94      	ldr	r2, [pc, #592]	@ (8001650 <HAL_GPIO_Init+0x2a8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d869      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001402:	4a94      	ldr	r2, [pc, #592]	@ (8001654 <HAL_GPIO_Init+0x2ac>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d04c      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001408:	4a92      	ldr	r2, [pc, #584]	@ (8001654 <HAL_GPIO_Init+0x2ac>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d863      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800140e:	4a92      	ldr	r2, [pc, #584]	@ (8001658 <HAL_GPIO_Init+0x2b0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d046      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001414:	4a90      	ldr	r2, [pc, #576]	@ (8001658 <HAL_GPIO_Init+0x2b0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d85d      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800141a:	2b12      	cmp	r3, #18
 800141c:	d82a      	bhi.n	8001474 <HAL_GPIO_Init+0xcc>
 800141e:	2b12      	cmp	r3, #18
 8001420:	d859      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001422:	a201      	add	r2, pc, #4	@ (adr r2, 8001428 <HAL_GPIO_Init+0x80>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	080014a3 	.word	0x080014a3
 800142c:	0800147d 	.word	0x0800147d
 8001430:	0800148f 	.word	0x0800148f
 8001434:	080014d1 	.word	0x080014d1
 8001438:	080014d7 	.word	0x080014d7
 800143c:	080014d7 	.word	0x080014d7
 8001440:	080014d7 	.word	0x080014d7
 8001444:	080014d7 	.word	0x080014d7
 8001448:	080014d7 	.word	0x080014d7
 800144c:	080014d7 	.word	0x080014d7
 8001450:	080014d7 	.word	0x080014d7
 8001454:	080014d7 	.word	0x080014d7
 8001458:	080014d7 	.word	0x080014d7
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014d7 	.word	0x080014d7
 8001464:	080014d7 	.word	0x080014d7
 8001468:	080014d7 	.word	0x080014d7
 800146c:	08001485 	.word	0x08001485
 8001470:	08001499 	.word	0x08001499
 8001474:	4a79      	ldr	r2, [pc, #484]	@ (800165c <HAL_GPIO_Init+0x2b4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147a:	e02c      	b.n	80014d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e029      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	3304      	adds	r3, #4
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e024      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	3308      	adds	r3, #8
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e01f      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	330c      	adds	r3, #12
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e01a      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014aa:	2304      	movs	r3, #4
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e013      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	611a      	str	r2, [r3, #16]
          break;
 80014c2:	e009      	b.n	80014d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	615a      	str	r2, [r3, #20]
          break;
 80014ce:	e003      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          break;
 80014d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	d801      	bhi.n	80014e2 <HAL_GPIO_Init+0x13a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	e001      	b.n	80014e6 <HAL_GPIO_Init+0x13e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3304      	adds	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2bff      	cmp	r3, #255	@ 0xff
 80014ec:	d802      	bhi.n	80014f4 <HAL_GPIO_Init+0x14c>
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x152>
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	3b08      	subs	r3, #8
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	210f      	movs	r1, #15
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80b1 	beq.w	800168a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001528:	4b4d      	ldr	r3, [pc, #308]	@ (8001660 <HAL_GPIO_Init+0x2b8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a4c      	ldr	r2, [pc, #304]	@ (8001660 <HAL_GPIO_Init+0x2b8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001540:	4a48      	ldr	r2, [pc, #288]	@ (8001664 <HAL_GPIO_Init+0x2bc>)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a40      	ldr	r2, [pc, #256]	@ (8001668 <HAL_GPIO_Init+0x2c0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d013      	beq.n	8001594 <HAL_GPIO_Init+0x1ec>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a3f      	ldr	r2, [pc, #252]	@ (800166c <HAL_GPIO_Init+0x2c4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00d      	beq.n	8001590 <HAL_GPIO_Init+0x1e8>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a3e      	ldr	r2, [pc, #248]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d007      	beq.n	800158c <HAL_GPIO_Init+0x1e4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3d      	ldr	r2, [pc, #244]	@ (8001674 <HAL_GPIO_Init+0x2cc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_GPIO_Init+0x1e0>
 8001584:	2303      	movs	r3, #3
 8001586:	e006      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001588:	2304      	movs	r3, #4
 800158a:	e004      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 800158c:	2302      	movs	r3, #2
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001594:	2300      	movs	r3, #0
 8001596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001598:	f002 0203 	and.w	r2, r2, #3
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	4093      	lsls	r3, r2
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a6:	492f      	ldr	r1, [pc, #188]	@ (8001664 <HAL_GPIO_Init+0x2bc>)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	492c      	ldr	r1, [pc, #176]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4928      	ldr	r1, [pc, #160]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	4922      	ldr	r1, [pc, #136]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60cb      	str	r3, [r1, #12]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	491e      	ldr	r1, [pc, #120]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4918      	ldr	r1, [pc, #96]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800161e:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4914      	ldr	r1, [pc, #80]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d021      	beq.n	800167c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	490e      	ldr	r1, [pc, #56]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e021      	b.n	800168a <HAL_GPIO_Init+0x2e2>
 8001646:	bf00      	nop
 8001648:	10320000 	.word	0x10320000
 800164c:	10310000 	.word	0x10310000
 8001650:	10220000 	.word	0x10220000
 8001654:	10210000 	.word	0x10210000
 8001658:	10120000 	.word	0x10120000
 800165c:	10110000 	.word	0x10110000
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	40010800 	.word	0x40010800
 800166c:	40010c00 	.word	0x40010c00
 8001670:	40011000 	.word	0x40011000
 8001674:	40011400 	.word	0x40011400
 8001678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_GPIO_Init+0x304>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	43db      	mvns	r3, r3
 8001684:	4909      	ldr	r1, [pc, #36]	@ (80016ac <HAL_GPIO_Init+0x304>)
 8001686:	4013      	ands	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f ae8e 	bne.w	80013bc <HAL_GPIO_Init+0x14>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	372c      	adds	r7, #44	@ 0x2c
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e12b      	b.n	800191a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fc2e 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2224      	movs	r2, #36	@ 0x24
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001714:	f001 fd7c 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8001718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a81      	ldr	r2, [pc, #516]	@ (8001924 <HAL_I2C_Init+0x274>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d807      	bhi.n	8001734 <HAL_I2C_Init+0x84>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a80      	ldr	r2, [pc, #512]	@ (8001928 <HAL_I2C_Init+0x278>)
 8001728:	4293      	cmp	r3, r2
 800172a:	bf94      	ite	ls
 800172c:	2301      	movls	r3, #1
 800172e:	2300      	movhi	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	e006      	b.n	8001742 <HAL_I2C_Init+0x92>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a7d      	ldr	r2, [pc, #500]	@ (800192c <HAL_I2C_Init+0x27c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	bf94      	ite	ls
 800173c:	2301      	movls	r3, #1
 800173e:	2300      	movhi	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0e7      	b.n	800191a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4a78      	ldr	r2, [pc, #480]	@ (8001930 <HAL_I2C_Init+0x280>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0c9b      	lsrs	r3, r3, #18
 8001754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	430a      	orrs	r2, r1
 8001768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a6a      	ldr	r2, [pc, #424]	@ (8001924 <HAL_I2C_Init+0x274>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d802      	bhi.n	8001784 <HAL_I2C_Init+0xd4>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3301      	adds	r3, #1
 8001782:	e009      	b.n	8001798 <HAL_I2C_Init+0xe8>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	4a69      	ldr	r2, [pc, #420]	@ (8001934 <HAL_I2C_Init+0x284>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	3301      	adds	r3, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	430b      	orrs	r3, r1
 800179e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	495c      	ldr	r1, [pc, #368]	@ (8001924 <HAL_I2C_Init+0x274>)
 80017b4:	428b      	cmp	r3, r1
 80017b6:	d819      	bhi.n	80017ec <HAL_I2C_Init+0x13c>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e59      	subs	r1, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c6:	1c59      	adds	r1, r3, #1
 80017c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017cc:	400b      	ands	r3, r1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <HAL_I2C_Init+0x138>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e59      	subs	r1, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e6:	e051      	b.n	800188c <HAL_I2C_Init+0x1dc>
 80017e8:	2304      	movs	r3, #4
 80017ea:	e04f      	b.n	800188c <HAL_I2C_Init+0x1dc>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <HAL_I2C_Init+0x168>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	e012      	b.n	800183e <HAL_I2C_Init+0x18e>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e58      	subs	r0, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	0099      	lsls	r1, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	fbb0 f3f3 	udiv	r3, r0, r3
 800182e:	3301      	adds	r3, #1
 8001830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x196>
 8001842:	2301      	movs	r3, #1
 8001844:	e022      	b.n	800188c <HAL_I2C_Init+0x1dc>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10e      	bne.n	800186c <HAL_I2C_Init+0x1bc>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1e58      	subs	r0, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	440b      	add	r3, r1
 800185c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001860:	3301      	adds	r3, #1
 8001862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800186a:	e00f      	b.n	800188c <HAL_I2C_Init+0x1dc>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1e58      	subs	r0, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	0099      	lsls	r1, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001882:	3301      	adds	r3, #1
 8001884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	6809      	ldr	r1, [r1, #0]
 8001890:	4313      	orrs	r3, r2
 8001892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6911      	ldr	r1, [r2, #16]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68d2      	ldr	r2, [r2, #12]
 80018c6:	4311      	orrs	r1, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	000186a0 	.word	0x000186a0
 8001928:	001e847f 	.word	0x001e847f
 800192c:	003d08ff 	.word	0x003d08ff
 8001930:	431bde83 	.word	0x431bde83
 8001934:	10624dd3 	.word	0x10624dd3

08001938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	461a      	mov	r2, r3
 8001944:	460b      	mov	r3, r1
 8001946:	817b      	strh	r3, [r7, #10]
 8001948:	4613      	mov	r3, r2
 800194a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fc1a 	bl	8001184 <HAL_GetTick>
 8001950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b20      	cmp	r3, #32
 800195c:	f040 80e0 	bne.w	8001b20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2319      	movs	r3, #25
 8001966:	2201      	movs	r2, #1
 8001968:	4970      	ldr	r1, [pc, #448]	@ (8001b2c <HAL_I2C_Master_Transmit+0x1f4>)
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 fe50 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001976:	2302      	movs	r3, #2
 8001978:	e0d3      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_I2C_Master_Transmit+0x50>
 8001984:	2302      	movs	r3, #2
 8001986:	e0cc      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ea>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d007      	beq.n	80019ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0201 	orr.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2221      	movs	r2, #33	@ 0x21
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2210      	movs	r2, #16
 80019ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	893a      	ldrh	r2, [r7, #8]
 80019de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4a50      	ldr	r2, [pc, #320]	@ (8001b30 <HAL_I2C_Master_Transmit+0x1f8>)
 80019ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019f0:	8979      	ldrh	r1, [r7, #10]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	6a3a      	ldr	r2, [r7, #32]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fc0a 	bl	8002210 <I2C_MasterRequestWrite>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e08d      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a1c:	e066      	b.n	8001aec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 ff0e 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00d      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d107      	bne.n	8001a46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06b      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11b      	bne.n	8001ac0 <HAL_I2C_Master_Transmit+0x188>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d017      	beq.n	8001ac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	6a39      	ldr	r1, [r7, #32]
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 ff05 	bl	80028d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d107      	bne.n	8001ae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e01a      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d194      	bne.n	8001a1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e000      	b.n	8001b22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b20:	2302      	movs	r3, #2
  }
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	00100002 	.word	0x00100002
 8001b30:	ffff0000 	.word	0xffff0000

08001b34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	4608      	mov	r0, r1
 8001b3e:	4611      	mov	r1, r2
 8001b40:	461a      	mov	r2, r3
 8001b42:	4603      	mov	r3, r0
 8001b44:	817b      	strh	r3, [r7, #10]
 8001b46:	460b      	mov	r3, r1
 8001b48:	813b      	strh	r3, [r7, #8]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b4e:	f7ff fb19 	bl	8001184 <HAL_GetTick>
 8001b52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	f040 80d9 	bne.w	8001d14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2319      	movs	r3, #25
 8001b68:	2201      	movs	r2, #1
 8001b6a:	496d      	ldr	r1, [pc, #436]	@ (8001d20 <HAL_I2C_Mem_Write+0x1ec>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 fd4f 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e0cc      	b.n	8001d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_I2C_Mem_Write+0x56>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e0c5      	b.n	8001d16 <HAL_I2C_Mem_Write+0x1e2>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d007      	beq.n	8001bb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2221      	movs	r2, #33	@ 0x21
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2240      	movs	r2, #64	@ 0x40
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a4d      	ldr	r2, [pc, #308]	@ (8001d24 <HAL_I2C_Mem_Write+0x1f0>)
 8001bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bf2:	88f8      	ldrh	r0, [r7, #6]
 8001bf4:	893a      	ldrh	r2, [r7, #8]
 8001bf6:	8979      	ldrh	r1, [r7, #10]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4603      	mov	r3, r0
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fb86 	bl	8002314 <I2C_RequestMemoryWrite>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d052      	beq.n	8001cb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e081      	b.n	8001d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fe14 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d107      	bne.n	8001c3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06b      	b.n	8001d16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d11b      	bne.n	8001cb4 <HAL_I2C_Mem_Write+0x180>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d017      	beq.n	8001cb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1aa      	bne.n	8001c12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fe07 	bl	80028d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d107      	bne.n	8001ce4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e016      	b.n	8001d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e000      	b.n	8001d16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
  }
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	00100002 	.word	0x00100002
 8001d24:	ffff0000 	.word	0xffff0000

08001d28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	@ 0x30
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	813b      	strh	r3, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d46:	f7ff fa1d 	bl	8001184 <HAL_GetTick>
 8001d4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	f040 8250 	bne.w	80021fa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2319      	movs	r3, #25
 8001d60:	2201      	movs	r2, #1
 8001d62:	4982      	ldr	r1, [pc, #520]	@ (8001f6c <HAL_I2C_Mem_Read+0x244>)
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 fc53 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
 8001d72:	e243      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_I2C_Mem_Read+0x5a>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e23c      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d007      	beq.n	8001da8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2222      	movs	r2, #34	@ 0x22
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2240      	movs	r2, #64	@ 0x40
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a62      	ldr	r2, [pc, #392]	@ (8001f70 <HAL_I2C_Mem_Read+0x248>)
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dea:	88f8      	ldrh	r0, [r7, #6]
 8001dec:	893a      	ldrh	r2, [r7, #8]
 8001dee:	8979      	ldrh	r1, [r7, #10]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fb20 	bl	8002440 <I2C_RequestMemoryRead>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e1f8      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d113      	bne.n	8001e3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e1cc      	b.n	80021d4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d11e      	bne.n	8001e80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e50:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e52:	b672      	cpsid	i
}
 8001e54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e7c:	b662      	cpsie	i
}
 8001e7e:	e035      	b.n	8001eec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d11e      	bne.n	8001ec6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec2:	b662      	cpsie	i
}
 8001ec4:	e012      	b.n	8001eec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ed4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001eec:	e172      	b.n	80021d4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	f200 811f 	bhi.w	8002136 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d123      	bne.n	8001f48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 fd2d 	bl	8002964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e173      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f46:	e145      	b.n	80021d4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d152      	bne.n	8001ff6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f56:	2200      	movs	r2, #0
 8001f58:	4906      	ldr	r1, [pc, #24]	@ (8001f74 <HAL_I2C_Mem_Read+0x24c>)
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fb58 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e148      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
 8001f6a:	bf00      	nop
 8001f6c:	00100002 	.word	0x00100002
 8001f70:	ffff0000 	.word	0xffff0000
 8001f74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fbe:	b662      	cpsie	i
}
 8001fc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ff4:	e0ee      	b.n	80021d4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4981      	ldr	r1, [pc, #516]	@ (8002204 <HAL_I2C_Mem_Read+0x4dc>)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fb05 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0f5      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800201e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002056:	4b6c      	ldr	r3, [pc, #432]	@ (8002208 <HAL_I2C_Mem_Read+0x4e0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	4a6b      	ldr	r2, [pc, #428]	@ (800220c <HAL_I2C_Mem_Read+0x4e4>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0a1a      	lsrs	r2, r3, #8
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00da      	lsls	r2, r3, #3
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	3b01      	subs	r3, #1
 8002074:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d118      	bne.n	80020ae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800209e:	b662      	cpsie	i
}
 80020a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0a6      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d1d9      	bne.n	8002070 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020fe:	b662      	cpsie	i
}
 8002100:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002134:	e04e      	b.n	80021d4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002138:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fc12 	bl	8002964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e058      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d124      	bne.n	80021d4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218e:	2b03      	cmp	r3, #3
 8002190:	d107      	bne.n	80021a2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f47f ae88 	bne.w	8001eee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3728      	adds	r7, #40	@ 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	00010004 	.word	0x00010004
 8002208:	20000000 	.word	0x20000000
 800220c:	14f8b589 	.word	0x14f8b589

08002210 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	460b      	mov	r3, r1
 800221e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d006      	beq.n	800223a <I2C_MasterRequestWrite+0x2a>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d003      	beq.n	800223a <I2C_MasterRequestWrite+0x2a>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002238:	d108      	bne.n	800224c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e00b      	b.n	8002264 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	2b12      	cmp	r3, #18
 8002252:	d107      	bne.n	8002264 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f9cd 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800228a:	d103      	bne.n	8002294 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e035      	b.n	8002304 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022a0:	d108      	bne.n	80022b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	e01b      	b.n	80022ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	11db      	asrs	r3, r3, #7
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 0306 	and.w	r3, r3, #6
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f063 030f 	orn	r3, r3, #15
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	490e      	ldr	r1, [pc, #56]	@ (800230c <I2C_MasterRequestWrite+0xfc>)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fa16 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e010      	b.n	8002304 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4907      	ldr	r1, [pc, #28]	@ (8002310 <I2C_MasterRequestWrite+0x100>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa06 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	00010008 	.word	0x00010008
 8002310:	00010002 	.word	0x00010002

08002314 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	461a      	mov	r2, r3
 8002322:	4603      	mov	r3, r0
 8002324:	817b      	strh	r3, [r7, #10]
 8002326:	460b      	mov	r3, r1
 8002328:	813b      	strh	r3, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800233c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	2200      	movs	r2, #0
 8002346:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f960 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002364:	d103      	bne.n	800236e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e05f      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002372:	897b      	ldrh	r3, [r7, #10]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	492d      	ldr	r1, [pc, #180]	@ (800243c <I2C_RequestMemoryWrite+0x128>)
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f9bb 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e04c      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fa46 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d107      	bne.n	80023d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e02b      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023e0:	893b      	ldrh	r3, [r7, #8]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	e021      	b.n	8002430 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023ec:	893b      	ldrh	r3, [r7, #8]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fc:	6a39      	ldr	r1, [r7, #32]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fa20 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2b04      	cmp	r3, #4
 8002410:	d107      	bne.n	8002422 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e005      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002426:	893b      	ldrh	r3, [r7, #8]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	00010002 	.word	0x00010002

08002440 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002468:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002478:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	2200      	movs	r2, #0
 8002482:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f8c2 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00d      	beq.n	80024ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024a0:	d103      	bne.n	80024aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0aa      	b.n	8002604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	6a3a      	ldr	r2, [r7, #32]
 80024c2:	4952      	ldr	r1, [pc, #328]	@ (800260c <I2C_RequestMemoryRead+0x1cc>)
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f91d 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e097      	b.n	8002604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ec:	6a39      	ldr	r1, [r7, #32]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f9a8 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d107      	bne.n	8002512 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002510:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e076      	b.n	8002604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800251c:	893b      	ldrh	r3, [r7, #8]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	611a      	str	r2, [r3, #16]
 8002526:	e021      	b.n	800256c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002528:	893b      	ldrh	r3, [r7, #8]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b29b      	uxth	r3, r3
 800252e:	b2da      	uxtb	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	6a39      	ldr	r1, [r7, #32]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f982 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	2b04      	cmp	r3, #4
 800254c:	d107      	bne.n	800255e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e050      	b.n	8002604 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002562:	893b      	ldrh	r3, [r7, #8]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256e:	6a39      	ldr	r1, [r7, #32]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f967 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	2b04      	cmp	r3, #4
 8002582:	d107      	bne.n	8002594 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002592:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e035      	b.n	8002604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f82b 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00d      	beq.n	80025dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025ce:	d103      	bne.n	80025d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e013      	b.n	8002604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025dc:	897b      	ldrh	r3, [r7, #10]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	6a3a      	ldr	r2, [r7, #32]
 80025f0:	4906      	ldr	r1, [pc, #24]	@ (800260c <I2C_RequestMemoryRead+0x1cc>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f886 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	00010002 	.word	0x00010002

08002610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002620:	e048      	b.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d044      	beq.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7fe fdab 	bl	8001184 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d139      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10d      	bne.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x56>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	43da      	mvns	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	e00c      	b.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	429a      	cmp	r2, r3
 8002684:	d116      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e023      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10d      	bne.n	80026da <I2C_WaitOnFlagUntilTimeout+0xca>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	43da      	mvns	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	e00c      	b.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d093      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002712:	e071      	b.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	d123      	bne.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002732:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800273c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e067      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d041      	beq.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002774:	f7fe fd06 	bl	8001184 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d302      	bcc.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d136      	bne.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d10c      	bne.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4013      	ands	r3, r2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e00b      	b.n	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e021      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10c      	bne.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e00b      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf14      	ite	ne
 800282e:	2301      	movne	r3, #1
 8002830:	2300      	moveq	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f af6d 	bne.w	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002850:	e034      	b.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8e3 	bl	8002a1e <I2C_IsAcknowledgeFailed>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e034      	b.n	80028cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d028      	beq.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7fe fc8b 	bl	8001184 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d11d      	bne.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288a:	2b80      	cmp	r3, #128	@ 0x80
 800288c:	d016      	beq.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e007      	b.n	80028cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c6:	2b80      	cmp	r3, #128	@ 0x80
 80028c8:	d1c3      	bne.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e0:	e034      	b.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f89b 	bl	8002a1e <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e034      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d028      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe fc43 	bl	8001184 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11d      	bne.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d016      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d1c3      	bne.n	80028e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002970:	e049      	b.n	8002a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b10      	cmp	r3, #16
 800297e:	d119      	bne.n	80029b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0210 	mvn.w	r2, #16
 8002988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e030      	b.n	8002a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b4:	f7fe fbe6 	bl	8001184 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d302      	bcc.n	80029ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11d      	bne.n	8002a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d4:	2b40      	cmp	r3, #64	@ 0x40
 80029d6:	d016      	beq.n	8002a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e007      	b.n	8002a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a10:	2b40      	cmp	r3, #64	@ 0x40
 8002a12:	d1ae      	bne.n	8002972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a34:	d11b      	bne.n	8002a6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f043 0204 	orr.w	r2, r3, #4
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e272      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8087 	beq.w	8002baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a9c:	4b92      	ldr	r3, [pc, #584]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d112      	bne.n	8002ada <HAL_RCC_OscConfig+0x5e>
 8002ab4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac0:	d10b      	bne.n	8002ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac2:	4b89      	ldr	r3, [pc, #548]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d06c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x12c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d168      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e24c      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x76>
 8002ae4:	4b80      	ldr	r3, [pc, #512]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	e02e      	b.n	8002b50 <HAL_RCC_OscConfig+0xd4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x98>
 8002afa:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7a      	ldr	r2, [pc, #488]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b78      	ldr	r3, [pc, #480]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a77      	ldr	r2, [pc, #476]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e01d      	b.n	8002b50 <HAL_RCC_OscConfig+0xd4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0xbc>
 8002b1e:	4b72      	ldr	r3, [pc, #456]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a71      	ldr	r2, [pc, #452]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0xd4>
 8002b38:	4b6b      	ldr	r3, [pc, #428]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b68      	ldr	r3, [pc, #416]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a67      	ldr	r2, [pc, #412]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fb14 	bl	8001184 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe fb10 	bl	8001184 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e200      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0xe4>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe fb00 	bl	8001184 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe fafc 	bl	8001184 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	@ 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1ec      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x10c>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d063      	beq.n	8002c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bc2:	4b49      	ldr	r3, [pc, #292]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x18c>
 8002bce:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	4b43      	ldr	r3, [pc, #268]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x176>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1c0      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4939      	ldr	r1, [pc, #228]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	e03a      	b.n	8002c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c10:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <HAL_RCC_OscConfig+0x270>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe fab5 	bl	8001184 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fab1 	bl	8001184 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1a1      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4927      	ldr	r1, [pc, #156]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b26      	ldr	r3, [pc, #152]	@ (8002cec <HAL_RCC_OscConfig+0x270>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fa94 	bl	8001184 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c60:	f7fe fa90 	bl	8001184 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e180      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d03a      	beq.n	8002d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d019      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <HAL_RCC_OscConfig+0x274>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c98:	f7fe fa74 	bl	8001184 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7fe fa70 	bl	8001184 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e160      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f000 faba 	bl	8003238 <RCC_Delay>
 8002cc4:	e01c      	b.n	8002d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fa5a 	bl	8001184 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fa56 	bl	8001184 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d908      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e146      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	42420000 	.word	0x42420000
 8002cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	4b92      	ldr	r3, [pc, #584]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e9      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80a6 	beq.w	8002e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d12:	4b8b      	ldr	r3, [pc, #556]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	4b88      	ldr	r3, [pc, #544]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4a87      	ldr	r2, [pc, #540]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	61d3      	str	r3, [r2, #28]
 8002d2a:	4b85      	ldr	r3, [pc, #532]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b82      	ldr	r3, [pc, #520]	@ (8002f44 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d118      	bne.n	8002d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d46:	4b7f      	ldr	r3, [pc, #508]	@ (8002f44 <HAL_RCC_OscConfig+0x4c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f44 <HAL_RCC_OscConfig+0x4c8>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fe fa17 	bl	8001184 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5a:	f7fe fa13 	bl	8001184 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	@ 0x64
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e103      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6c:	4b75      	ldr	r3, [pc, #468]	@ (8002f44 <HAL_RCC_OscConfig+0x4c8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0x312>
 8002d80:	4b6f      	ldr	r3, [pc, #444]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a6e      	ldr	r2, [pc, #440]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	e02d      	b.n	8002dea <HAL_RCC_OscConfig+0x36e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x334>
 8002d96:	4b6a      	ldr	r3, [pc, #424]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a69      	ldr	r2, [pc, #420]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	4b67      	ldr	r3, [pc, #412]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a66      	ldr	r2, [pc, #408]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	6213      	str	r3, [r2, #32]
 8002dae:	e01c      	b.n	8002dea <HAL_RCC_OscConfig+0x36e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d10c      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x356>
 8002db8:	4b61      	ldr	r3, [pc, #388]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a60      	ldr	r2, [pc, #384]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	f043 0304 	orr.w	r3, r3, #4
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6213      	str	r3, [r2, #32]
 8002dd0:	e00b      	b.n	8002dea <HAL_RCC_OscConfig+0x36e>
 8002dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	4b58      	ldr	r3, [pc, #352]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a57      	ldr	r2, [pc, #348]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d015      	beq.n	8002e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df2:	f7fe f9c7 	bl	8001184 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fe f9c3 	bl	8001184 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0b1      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e10:	4b4b      	ldr	r3, [pc, #300]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ee      	beq.n	8002dfa <HAL_RCC_OscConfig+0x37e>
 8002e1c:	e014      	b.n	8002e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1e:	f7fe f9b1 	bl	8001184 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fe f9ad 	bl	8001184 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e09b      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3c:	4b40      	ldr	r3, [pc, #256]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ee      	bne.n	8002e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a3b      	ldr	r2, [pc, #236]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8087 	beq.w	8002f72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e64:	4b36      	ldr	r3, [pc, #216]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d061      	beq.n	8002f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d146      	bne.n	8002f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e78:	4b33      	ldr	r3, [pc, #204]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe f981 	bl	8001184 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe f97d 	bl	8001184 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e06d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e98:	4b29      	ldr	r3, [pc, #164]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eae:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4921      	ldr	r1, [pc, #132]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a19      	ldr	r1, [r3, #32]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	491b      	ldr	r1, [pc, #108]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe f951 	bl	8001184 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe f94d 	bl	8001184 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e03d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef8:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x46a>
 8002f04:	e035      	b.n	8002f72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f93a 	bl	8001184 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe f936 	bl	8001184 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e026      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f26:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x498>
 8002f32:	e01e      	b.n	8002f72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e019      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40007000 	.word	0x40007000
 8002f48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_RCC_OscConfig+0x500>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000

08002f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d0      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b6a      	ldr	r3, [pc, #424]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d910      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b67      	ldr	r3, [pc, #412]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 0207 	bic.w	r2, r3, #7
 8002faa:	4965      	ldr	r1, [pc, #404]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b63      	ldr	r3, [pc, #396]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b8      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fdc:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a58      	ldr	r2, [pc, #352]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff4:	4b53      	ldr	r3, [pc, #332]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b50      	ldr	r3, [pc, #320]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	494d      	ldr	r1, [pc, #308]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d040      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b47      	ldr	r3, [pc, #284]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d115      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b41      	ldr	r3, [pc, #260]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e073      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	4b3d      	ldr	r3, [pc, #244]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06b      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b39      	ldr	r3, [pc, #228]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4936      	ldr	r1, [pc, #216]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003070:	f7fe f888 	bl	8001184 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fe f884 	bl	8001184 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e053      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4b27      	ldr	r3, [pc, #156]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d210      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4922      	ldr	r1, [pc, #136]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b20      	ldr	r3, [pc, #128]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e032      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030dc:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4916      	ldr	r1, [pc, #88]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030fa:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	490e      	ldr	r1, [pc, #56]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800310e:	f000 f821 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	490a      	ldr	r1, [pc, #40]	@ (8003148 <HAL_RCC_ClockConfig+0x1c8>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a09      	ldr	r2, [pc, #36]	@ (800314c <HAL_RCC_ClockConfig+0x1cc>)
 8003128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800312a:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <HAL_RCC_ClockConfig+0x1d0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd ffe6 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40022000 	.word	0x40022000
 8003144:	40021000 	.word	0x40021000
 8003148:	08003c18 	.word	0x08003c18
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800316e:	4b1e      	ldr	r3, [pc, #120]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x30>
 800317e:	2b08      	cmp	r3, #8
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x36>
 8003182:	e027      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003184:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003186:	613b      	str	r3, [r7, #16]
      break;
 8003188:	e027      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	0c9b      	lsrs	r3, r3, #18
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	4a17      	ldr	r2, [pc, #92]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031a2:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	0c5b      	lsrs	r3, r3, #17
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	4a11      	ldr	r2, [pc, #68]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a0d      	ldr	r2, [pc, #52]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x98>)
 80031b6:	fb03 f202 	mul.w	r2, r3, r2
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	e004      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0c      	ldr	r2, [pc, #48]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031c8:	fb02 f303 	mul.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	613b      	str	r3, [r7, #16]
      break;
 80031d2:	e002      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031d4:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x98>)
 80031d6:	613b      	str	r3, [r7, #16]
      break;
 80031d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031da:	693b      	ldr	r3, [r7, #16]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	007a1200 	.word	0x007a1200
 80031f0:	08003c30 	.word	0x08003c30
 80031f4:	08003c40 	.word	0x08003c40
 80031f8:	003d0900 	.word	0x003d0900

080031fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003200:	4b02      	ldr	r3, [pc, #8]	@ (800320c <HAL_RCC_GetHCLKFreq+0x10>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	20000000 	.word	0x20000000

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003214:	f7ff fff2 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4903      	ldr	r1, [pc, #12]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	08003c28 	.word	0x08003c28

08003238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <RCC_Delay+0x34>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <RCC_Delay+0x38>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a5b      	lsrs	r3, r3, #9
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003254:	bf00      	nop
  }
  while (Delay --);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1e5a      	subs	r2, r3, #1
 800325a:	60fa      	str	r2, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f9      	bne.n	8003254 <RCC_Delay+0x1c>
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	20000000 	.word	0x20000000
 8003270:	10624dd3 	.word	0x10624dd3

08003274 <siprintf>:
 8003274:	b40e      	push	{r1, r2, r3}
 8003276:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800327a:	b510      	push	{r4, lr}
 800327c:	2400      	movs	r4, #0
 800327e:	b09d      	sub	sp, #116	@ 0x74
 8003280:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003282:	9002      	str	r0, [sp, #8]
 8003284:	9006      	str	r0, [sp, #24]
 8003286:	9107      	str	r1, [sp, #28]
 8003288:	9104      	str	r1, [sp, #16]
 800328a:	4809      	ldr	r0, [pc, #36]	@ (80032b0 <siprintf+0x3c>)
 800328c:	4909      	ldr	r1, [pc, #36]	@ (80032b4 <siprintf+0x40>)
 800328e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003292:	9105      	str	r1, [sp, #20]
 8003294:	6800      	ldr	r0, [r0, #0]
 8003296:	a902      	add	r1, sp, #8
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800329c:	f000 f992 	bl	80035c4 <_svfiprintf_r>
 80032a0:	9b02      	ldr	r3, [sp, #8]
 80032a2:	701c      	strb	r4, [r3, #0]
 80032a4:	b01d      	add	sp, #116	@ 0x74
 80032a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032aa:	b003      	add	sp, #12
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	2000000c 	.word	0x2000000c
 80032b4:	ffff0208 	.word	0xffff0208

080032b8 <memset>:
 80032b8:	4603      	mov	r3, r0
 80032ba:	4402      	add	r2, r0
 80032bc:	4293      	cmp	r3, r2
 80032be:	d100      	bne.n	80032c2 <memset+0xa>
 80032c0:	4770      	bx	lr
 80032c2:	f803 1b01 	strb.w	r1, [r3], #1
 80032c6:	e7f9      	b.n	80032bc <memset+0x4>

080032c8 <__errno>:
 80032c8:	4b01      	ldr	r3, [pc, #4]	@ (80032d0 <__errno+0x8>)
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2000000c 	.word	0x2000000c

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	2600      	movs	r6, #0
 80032d8:	4d0c      	ldr	r5, [pc, #48]	@ (800330c <__libc_init_array+0x38>)
 80032da:	4c0d      	ldr	r4, [pc, #52]	@ (8003310 <__libc_init_array+0x3c>)
 80032dc:	1b64      	subs	r4, r4, r5
 80032de:	10a4      	asrs	r4, r4, #2
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	f000 fc76 	bl	8003bd4 <_init>
 80032e8:	2600      	movs	r6, #0
 80032ea:	4d0a      	ldr	r5, [pc, #40]	@ (8003314 <__libc_init_array+0x40>)
 80032ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003318 <__libc_init_array+0x44>)
 80032ee:	1b64      	subs	r4, r4, r5
 80032f0:	10a4      	asrs	r4, r4, #2
 80032f2:	42a6      	cmp	r6, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fc:	4798      	blx	r3
 80032fe:	3601      	adds	r6, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f855 3b04 	ldr.w	r3, [r5], #4
 8003306:	4798      	blx	r3
 8003308:	3601      	adds	r6, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	08003c78 	.word	0x08003c78
 8003310:	08003c78 	.word	0x08003c78
 8003314:	08003c78 	.word	0x08003c78
 8003318:	08003c7c 	.word	0x08003c7c

0800331c <__retarget_lock_acquire_recursive>:
 800331c:	4770      	bx	lr

0800331e <__retarget_lock_release_recursive>:
 800331e:	4770      	bx	lr

08003320 <_free_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4605      	mov	r5, r0
 8003324:	2900      	cmp	r1, #0
 8003326:	d040      	beq.n	80033aa <_free_r+0x8a>
 8003328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800332c:	1f0c      	subs	r4, r1, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	bfb8      	it	lt
 8003332:	18e4      	addlt	r4, r4, r3
 8003334:	f000 f8de 	bl	80034f4 <__malloc_lock>
 8003338:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <_free_r+0x8c>)
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	b933      	cbnz	r3, 800334c <_free_r+0x2c>
 800333e:	6063      	str	r3, [r4, #4]
 8003340:	6014      	str	r4, [r2, #0]
 8003342:	4628      	mov	r0, r5
 8003344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003348:	f000 b8da 	b.w	8003500 <__malloc_unlock>
 800334c:	42a3      	cmp	r3, r4
 800334e:	d908      	bls.n	8003362 <_free_r+0x42>
 8003350:	6820      	ldr	r0, [r4, #0]
 8003352:	1821      	adds	r1, r4, r0
 8003354:	428b      	cmp	r3, r1
 8003356:	bf01      	itttt	eq
 8003358:	6819      	ldreq	r1, [r3, #0]
 800335a:	685b      	ldreq	r3, [r3, #4]
 800335c:	1809      	addeq	r1, r1, r0
 800335e:	6021      	streq	r1, [r4, #0]
 8003360:	e7ed      	b.n	800333e <_free_r+0x1e>
 8003362:	461a      	mov	r2, r3
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	b10b      	cbz	r3, 800336c <_free_r+0x4c>
 8003368:	42a3      	cmp	r3, r4
 800336a:	d9fa      	bls.n	8003362 <_free_r+0x42>
 800336c:	6811      	ldr	r1, [r2, #0]
 800336e:	1850      	adds	r0, r2, r1
 8003370:	42a0      	cmp	r0, r4
 8003372:	d10b      	bne.n	800338c <_free_r+0x6c>
 8003374:	6820      	ldr	r0, [r4, #0]
 8003376:	4401      	add	r1, r0
 8003378:	1850      	adds	r0, r2, r1
 800337a:	4283      	cmp	r3, r0
 800337c:	6011      	str	r1, [r2, #0]
 800337e:	d1e0      	bne.n	8003342 <_free_r+0x22>
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4408      	add	r0, r1
 8003386:	6010      	str	r0, [r2, #0]
 8003388:	6053      	str	r3, [r2, #4]
 800338a:	e7da      	b.n	8003342 <_free_r+0x22>
 800338c:	d902      	bls.n	8003394 <_free_r+0x74>
 800338e:	230c      	movs	r3, #12
 8003390:	602b      	str	r3, [r5, #0]
 8003392:	e7d6      	b.n	8003342 <_free_r+0x22>
 8003394:	6820      	ldr	r0, [r4, #0]
 8003396:	1821      	adds	r1, r4, r0
 8003398:	428b      	cmp	r3, r1
 800339a:	bf01      	itttt	eq
 800339c:	6819      	ldreq	r1, [r3, #0]
 800339e:	685b      	ldreq	r3, [r3, #4]
 80033a0:	1809      	addeq	r1, r1, r0
 80033a2:	6021      	streq	r1, [r4, #0]
 80033a4:	6063      	str	r3, [r4, #4]
 80033a6:	6054      	str	r4, [r2, #4]
 80033a8:	e7cb      	b.n	8003342 <_free_r+0x22>
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	20000238 	.word	0x20000238

080033b0 <sbrk_aligned>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4e0f      	ldr	r6, [pc, #60]	@ (80033f0 <sbrk_aligned+0x40>)
 80033b4:	460c      	mov	r4, r1
 80033b6:	6831      	ldr	r1, [r6, #0]
 80033b8:	4605      	mov	r5, r0
 80033ba:	b911      	cbnz	r1, 80033c2 <sbrk_aligned+0x12>
 80033bc:	f000 fba8 	bl	8003b10 <_sbrk_r>
 80033c0:	6030      	str	r0, [r6, #0]
 80033c2:	4621      	mov	r1, r4
 80033c4:	4628      	mov	r0, r5
 80033c6:	f000 fba3 	bl	8003b10 <_sbrk_r>
 80033ca:	1c43      	adds	r3, r0, #1
 80033cc:	d103      	bne.n	80033d6 <sbrk_aligned+0x26>
 80033ce:	f04f 34ff 	mov.w	r4, #4294967295
 80033d2:	4620      	mov	r0, r4
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	1cc4      	adds	r4, r0, #3
 80033d8:	f024 0403 	bic.w	r4, r4, #3
 80033dc:	42a0      	cmp	r0, r4
 80033de:	d0f8      	beq.n	80033d2 <sbrk_aligned+0x22>
 80033e0:	1a21      	subs	r1, r4, r0
 80033e2:	4628      	mov	r0, r5
 80033e4:	f000 fb94 	bl	8003b10 <_sbrk_r>
 80033e8:	3001      	adds	r0, #1
 80033ea:	d1f2      	bne.n	80033d2 <sbrk_aligned+0x22>
 80033ec:	e7ef      	b.n	80033ce <sbrk_aligned+0x1e>
 80033ee:	bf00      	nop
 80033f0:	20000234 	.word	0x20000234

080033f4 <_malloc_r>:
 80033f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033f8:	1ccd      	adds	r5, r1, #3
 80033fa:	f025 0503 	bic.w	r5, r5, #3
 80033fe:	3508      	adds	r5, #8
 8003400:	2d0c      	cmp	r5, #12
 8003402:	bf38      	it	cc
 8003404:	250c      	movcc	r5, #12
 8003406:	2d00      	cmp	r5, #0
 8003408:	4606      	mov	r6, r0
 800340a:	db01      	blt.n	8003410 <_malloc_r+0x1c>
 800340c:	42a9      	cmp	r1, r5
 800340e:	d904      	bls.n	800341a <_malloc_r+0x26>
 8003410:	230c      	movs	r3, #12
 8003412:	6033      	str	r3, [r6, #0]
 8003414:	2000      	movs	r0, #0
 8003416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800341a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034f0 <_malloc_r+0xfc>
 800341e:	f000 f869 	bl	80034f4 <__malloc_lock>
 8003422:	f8d8 3000 	ldr.w	r3, [r8]
 8003426:	461c      	mov	r4, r3
 8003428:	bb44      	cbnz	r4, 800347c <_malloc_r+0x88>
 800342a:	4629      	mov	r1, r5
 800342c:	4630      	mov	r0, r6
 800342e:	f7ff ffbf 	bl	80033b0 <sbrk_aligned>
 8003432:	1c43      	adds	r3, r0, #1
 8003434:	4604      	mov	r4, r0
 8003436:	d158      	bne.n	80034ea <_malloc_r+0xf6>
 8003438:	f8d8 4000 	ldr.w	r4, [r8]
 800343c:	4627      	mov	r7, r4
 800343e:	2f00      	cmp	r7, #0
 8003440:	d143      	bne.n	80034ca <_malloc_r+0xd6>
 8003442:	2c00      	cmp	r4, #0
 8003444:	d04b      	beq.n	80034de <_malloc_r+0xea>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	4639      	mov	r1, r7
 800344a:	4630      	mov	r0, r6
 800344c:	eb04 0903 	add.w	r9, r4, r3
 8003450:	f000 fb5e 	bl	8003b10 <_sbrk_r>
 8003454:	4581      	cmp	r9, r0
 8003456:	d142      	bne.n	80034de <_malloc_r+0xea>
 8003458:	6821      	ldr	r1, [r4, #0]
 800345a:	4630      	mov	r0, r6
 800345c:	1a6d      	subs	r5, r5, r1
 800345e:	4629      	mov	r1, r5
 8003460:	f7ff ffa6 	bl	80033b0 <sbrk_aligned>
 8003464:	3001      	adds	r0, #1
 8003466:	d03a      	beq.n	80034de <_malloc_r+0xea>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	442b      	add	r3, r5
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	f8d8 3000 	ldr.w	r3, [r8]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	bb62      	cbnz	r2, 80034d0 <_malloc_r+0xdc>
 8003476:	f8c8 7000 	str.w	r7, [r8]
 800347a:	e00f      	b.n	800349c <_malloc_r+0xa8>
 800347c:	6822      	ldr	r2, [r4, #0]
 800347e:	1b52      	subs	r2, r2, r5
 8003480:	d420      	bmi.n	80034c4 <_malloc_r+0xd0>
 8003482:	2a0b      	cmp	r2, #11
 8003484:	d917      	bls.n	80034b6 <_malloc_r+0xc2>
 8003486:	1961      	adds	r1, r4, r5
 8003488:	42a3      	cmp	r3, r4
 800348a:	6025      	str	r5, [r4, #0]
 800348c:	bf18      	it	ne
 800348e:	6059      	strne	r1, [r3, #4]
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	bf08      	it	eq
 8003494:	f8c8 1000 	streq.w	r1, [r8]
 8003498:	5162      	str	r2, [r4, r5]
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	4630      	mov	r0, r6
 800349e:	f000 f82f 	bl	8003500 <__malloc_unlock>
 80034a2:	f104 000b 	add.w	r0, r4, #11
 80034a6:	1d23      	adds	r3, r4, #4
 80034a8:	f020 0007 	bic.w	r0, r0, #7
 80034ac:	1ac2      	subs	r2, r0, r3
 80034ae:	bf1c      	itt	ne
 80034b0:	1a1b      	subne	r3, r3, r0
 80034b2:	50a3      	strne	r3, [r4, r2]
 80034b4:	e7af      	b.n	8003416 <_malloc_r+0x22>
 80034b6:	6862      	ldr	r2, [r4, #4]
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	bf0c      	ite	eq
 80034bc:	f8c8 2000 	streq.w	r2, [r8]
 80034c0:	605a      	strne	r2, [r3, #4]
 80034c2:	e7eb      	b.n	800349c <_malloc_r+0xa8>
 80034c4:	4623      	mov	r3, r4
 80034c6:	6864      	ldr	r4, [r4, #4]
 80034c8:	e7ae      	b.n	8003428 <_malloc_r+0x34>
 80034ca:	463c      	mov	r4, r7
 80034cc:	687f      	ldr	r7, [r7, #4]
 80034ce:	e7b6      	b.n	800343e <_malloc_r+0x4a>
 80034d0:	461a      	mov	r2, r3
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	42a3      	cmp	r3, r4
 80034d6:	d1fb      	bne.n	80034d0 <_malloc_r+0xdc>
 80034d8:	2300      	movs	r3, #0
 80034da:	6053      	str	r3, [r2, #4]
 80034dc:	e7de      	b.n	800349c <_malloc_r+0xa8>
 80034de:	230c      	movs	r3, #12
 80034e0:	4630      	mov	r0, r6
 80034e2:	6033      	str	r3, [r6, #0]
 80034e4:	f000 f80c 	bl	8003500 <__malloc_unlock>
 80034e8:	e794      	b.n	8003414 <_malloc_r+0x20>
 80034ea:	6005      	str	r5, [r0, #0]
 80034ec:	e7d6      	b.n	800349c <_malloc_r+0xa8>
 80034ee:	bf00      	nop
 80034f0:	20000238 	.word	0x20000238

080034f4 <__malloc_lock>:
 80034f4:	4801      	ldr	r0, [pc, #4]	@ (80034fc <__malloc_lock+0x8>)
 80034f6:	f7ff bf11 	b.w	800331c <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	20000230 	.word	0x20000230

08003500 <__malloc_unlock>:
 8003500:	4801      	ldr	r0, [pc, #4]	@ (8003508 <__malloc_unlock+0x8>)
 8003502:	f7ff bf0c 	b.w	800331e <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	20000230 	.word	0x20000230

0800350c <__ssputs_r>:
 800350c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003510:	461f      	mov	r7, r3
 8003512:	688e      	ldr	r6, [r1, #8]
 8003514:	4682      	mov	sl, r0
 8003516:	42be      	cmp	r6, r7
 8003518:	460c      	mov	r4, r1
 800351a:	4690      	mov	r8, r2
 800351c:	680b      	ldr	r3, [r1, #0]
 800351e:	d82d      	bhi.n	800357c <__ssputs_r+0x70>
 8003520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003528:	d026      	beq.n	8003578 <__ssputs_r+0x6c>
 800352a:	6965      	ldr	r5, [r4, #20]
 800352c:	6909      	ldr	r1, [r1, #16]
 800352e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003532:	eba3 0901 	sub.w	r9, r3, r1
 8003536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800353a:	1c7b      	adds	r3, r7, #1
 800353c:	444b      	add	r3, r9
 800353e:	106d      	asrs	r5, r5, #1
 8003540:	429d      	cmp	r5, r3
 8003542:	bf38      	it	cc
 8003544:	461d      	movcc	r5, r3
 8003546:	0553      	lsls	r3, r2, #21
 8003548:	d527      	bpl.n	800359a <__ssputs_r+0x8e>
 800354a:	4629      	mov	r1, r5
 800354c:	f7ff ff52 	bl	80033f4 <_malloc_r>
 8003550:	4606      	mov	r6, r0
 8003552:	b360      	cbz	r0, 80035ae <__ssputs_r+0xa2>
 8003554:	464a      	mov	r2, r9
 8003556:	6921      	ldr	r1, [r4, #16]
 8003558:	f000 faf8 	bl	8003b4c <memcpy>
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003566:	81a3      	strh	r3, [r4, #12]
 8003568:	6126      	str	r6, [r4, #16]
 800356a:	444e      	add	r6, r9
 800356c:	6026      	str	r6, [r4, #0]
 800356e:	463e      	mov	r6, r7
 8003570:	6165      	str	r5, [r4, #20]
 8003572:	eba5 0509 	sub.w	r5, r5, r9
 8003576:	60a5      	str	r5, [r4, #8]
 8003578:	42be      	cmp	r6, r7
 800357a:	d900      	bls.n	800357e <__ssputs_r+0x72>
 800357c:	463e      	mov	r6, r7
 800357e:	4632      	mov	r2, r6
 8003580:	4641      	mov	r1, r8
 8003582:	6820      	ldr	r0, [r4, #0]
 8003584:	f000 faaa 	bl	8003adc <memmove>
 8003588:	2000      	movs	r0, #0
 800358a:	68a3      	ldr	r3, [r4, #8]
 800358c:	1b9b      	subs	r3, r3, r6
 800358e:	60a3      	str	r3, [r4, #8]
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	4433      	add	r3, r6
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800359a:	462a      	mov	r2, r5
 800359c:	f000 fae4 	bl	8003b68 <_realloc_r>
 80035a0:	4606      	mov	r6, r0
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d1e0      	bne.n	8003568 <__ssputs_r+0x5c>
 80035a6:	4650      	mov	r0, sl
 80035a8:	6921      	ldr	r1, [r4, #16]
 80035aa:	f7ff feb9 	bl	8003320 <_free_r>
 80035ae:	230c      	movs	r3, #12
 80035b0:	f8ca 3000 	str.w	r3, [sl]
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	e7e9      	b.n	8003596 <__ssputs_r+0x8a>
	...

080035c4 <_svfiprintf_r>:
 80035c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c8:	4698      	mov	r8, r3
 80035ca:	898b      	ldrh	r3, [r1, #12]
 80035cc:	4607      	mov	r7, r0
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	460d      	mov	r5, r1
 80035d2:	4614      	mov	r4, r2
 80035d4:	b09d      	sub	sp, #116	@ 0x74
 80035d6:	d510      	bpl.n	80035fa <_svfiprintf_r+0x36>
 80035d8:	690b      	ldr	r3, [r1, #16]
 80035da:	b973      	cbnz	r3, 80035fa <_svfiprintf_r+0x36>
 80035dc:	2140      	movs	r1, #64	@ 0x40
 80035de:	f7ff ff09 	bl	80033f4 <_malloc_r>
 80035e2:	6028      	str	r0, [r5, #0]
 80035e4:	6128      	str	r0, [r5, #16]
 80035e6:	b930      	cbnz	r0, 80035f6 <_svfiprintf_r+0x32>
 80035e8:	230c      	movs	r3, #12
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	b01d      	add	sp, #116	@ 0x74
 80035f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f6:	2340      	movs	r3, #64	@ 0x40
 80035f8:	616b      	str	r3, [r5, #20]
 80035fa:	2300      	movs	r3, #0
 80035fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035fe:	2320      	movs	r3, #32
 8003600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003604:	2330      	movs	r3, #48	@ 0x30
 8003606:	f04f 0901 	mov.w	r9, #1
 800360a:	f8cd 800c 	str.w	r8, [sp, #12]
 800360e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80037a8 <_svfiprintf_r+0x1e4>
 8003612:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003616:	4623      	mov	r3, r4
 8003618:	469a      	mov	sl, r3
 800361a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800361e:	b10a      	cbz	r2, 8003624 <_svfiprintf_r+0x60>
 8003620:	2a25      	cmp	r2, #37	@ 0x25
 8003622:	d1f9      	bne.n	8003618 <_svfiprintf_r+0x54>
 8003624:	ebba 0b04 	subs.w	fp, sl, r4
 8003628:	d00b      	beq.n	8003642 <_svfiprintf_r+0x7e>
 800362a:	465b      	mov	r3, fp
 800362c:	4622      	mov	r2, r4
 800362e:	4629      	mov	r1, r5
 8003630:	4638      	mov	r0, r7
 8003632:	f7ff ff6b 	bl	800350c <__ssputs_r>
 8003636:	3001      	adds	r0, #1
 8003638:	f000 80a7 	beq.w	800378a <_svfiprintf_r+0x1c6>
 800363c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800363e:	445a      	add	r2, fp
 8003640:	9209      	str	r2, [sp, #36]	@ 0x24
 8003642:	f89a 3000 	ldrb.w	r3, [sl]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 809f 	beq.w	800378a <_svfiprintf_r+0x1c6>
 800364c:	2300      	movs	r3, #0
 800364e:	f04f 32ff 	mov.w	r2, #4294967295
 8003652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003656:	f10a 0a01 	add.w	sl, sl, #1
 800365a:	9304      	str	r3, [sp, #16]
 800365c:	9307      	str	r3, [sp, #28]
 800365e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003662:	931a      	str	r3, [sp, #104]	@ 0x68
 8003664:	4654      	mov	r4, sl
 8003666:	2205      	movs	r2, #5
 8003668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800366c:	484e      	ldr	r0, [pc, #312]	@ (80037a8 <_svfiprintf_r+0x1e4>)
 800366e:	f000 fa5f 	bl	8003b30 <memchr>
 8003672:	9a04      	ldr	r2, [sp, #16]
 8003674:	b9d8      	cbnz	r0, 80036ae <_svfiprintf_r+0xea>
 8003676:	06d0      	lsls	r0, r2, #27
 8003678:	bf44      	itt	mi
 800367a:	2320      	movmi	r3, #32
 800367c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003680:	0711      	lsls	r1, r2, #28
 8003682:	bf44      	itt	mi
 8003684:	232b      	movmi	r3, #43	@ 0x2b
 8003686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800368a:	f89a 3000 	ldrb.w	r3, [sl]
 800368e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003690:	d015      	beq.n	80036be <_svfiprintf_r+0xfa>
 8003692:	4654      	mov	r4, sl
 8003694:	2000      	movs	r0, #0
 8003696:	f04f 0c0a 	mov.w	ip, #10
 800369a:	9a07      	ldr	r2, [sp, #28]
 800369c:	4621      	mov	r1, r4
 800369e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036a2:	3b30      	subs	r3, #48	@ 0x30
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	d94b      	bls.n	8003740 <_svfiprintf_r+0x17c>
 80036a8:	b1b0      	cbz	r0, 80036d8 <_svfiprintf_r+0x114>
 80036aa:	9207      	str	r2, [sp, #28]
 80036ac:	e014      	b.n	80036d8 <_svfiprintf_r+0x114>
 80036ae:	eba0 0308 	sub.w	r3, r0, r8
 80036b2:	fa09 f303 	lsl.w	r3, r9, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	46a2      	mov	sl, r4
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	e7d2      	b.n	8003664 <_svfiprintf_r+0xa0>
 80036be:	9b03      	ldr	r3, [sp, #12]
 80036c0:	1d19      	adds	r1, r3, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	9103      	str	r1, [sp, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bfbb      	ittet	lt
 80036ca:	425b      	neglt	r3, r3
 80036cc:	f042 0202 	orrlt.w	r2, r2, #2
 80036d0:	9307      	strge	r3, [sp, #28]
 80036d2:	9307      	strlt	r3, [sp, #28]
 80036d4:	bfb8      	it	lt
 80036d6:	9204      	strlt	r2, [sp, #16]
 80036d8:	7823      	ldrb	r3, [r4, #0]
 80036da:	2b2e      	cmp	r3, #46	@ 0x2e
 80036dc:	d10a      	bne.n	80036f4 <_svfiprintf_r+0x130>
 80036de:	7863      	ldrb	r3, [r4, #1]
 80036e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80036e2:	d132      	bne.n	800374a <_svfiprintf_r+0x186>
 80036e4:	9b03      	ldr	r3, [sp, #12]
 80036e6:	3402      	adds	r4, #2
 80036e8:	1d1a      	adds	r2, r3, #4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	9203      	str	r2, [sp, #12]
 80036ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036f2:	9305      	str	r3, [sp, #20]
 80036f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80037ac <_svfiprintf_r+0x1e8>
 80036f8:	2203      	movs	r2, #3
 80036fa:	4650      	mov	r0, sl
 80036fc:	7821      	ldrb	r1, [r4, #0]
 80036fe:	f000 fa17 	bl	8003b30 <memchr>
 8003702:	b138      	cbz	r0, 8003714 <_svfiprintf_r+0x150>
 8003704:	2240      	movs	r2, #64	@ 0x40
 8003706:	9b04      	ldr	r3, [sp, #16]
 8003708:	eba0 000a 	sub.w	r0, r0, sl
 800370c:	4082      	lsls	r2, r0
 800370e:	4313      	orrs	r3, r2
 8003710:	3401      	adds	r4, #1
 8003712:	9304      	str	r3, [sp, #16]
 8003714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003718:	2206      	movs	r2, #6
 800371a:	4825      	ldr	r0, [pc, #148]	@ (80037b0 <_svfiprintf_r+0x1ec>)
 800371c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003720:	f000 fa06 	bl	8003b30 <memchr>
 8003724:	2800      	cmp	r0, #0
 8003726:	d036      	beq.n	8003796 <_svfiprintf_r+0x1d2>
 8003728:	4b22      	ldr	r3, [pc, #136]	@ (80037b4 <_svfiprintf_r+0x1f0>)
 800372a:	bb1b      	cbnz	r3, 8003774 <_svfiprintf_r+0x1b0>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	3307      	adds	r3, #7
 8003730:	f023 0307 	bic.w	r3, r3, #7
 8003734:	3308      	adds	r3, #8
 8003736:	9303      	str	r3, [sp, #12]
 8003738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800373a:	4433      	add	r3, r6
 800373c:	9309      	str	r3, [sp, #36]	@ 0x24
 800373e:	e76a      	b.n	8003616 <_svfiprintf_r+0x52>
 8003740:	460c      	mov	r4, r1
 8003742:	2001      	movs	r0, #1
 8003744:	fb0c 3202 	mla	r2, ip, r2, r3
 8003748:	e7a8      	b.n	800369c <_svfiprintf_r+0xd8>
 800374a:	2300      	movs	r3, #0
 800374c:	f04f 0c0a 	mov.w	ip, #10
 8003750:	4619      	mov	r1, r3
 8003752:	3401      	adds	r4, #1
 8003754:	9305      	str	r3, [sp, #20]
 8003756:	4620      	mov	r0, r4
 8003758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800375c:	3a30      	subs	r2, #48	@ 0x30
 800375e:	2a09      	cmp	r2, #9
 8003760:	d903      	bls.n	800376a <_svfiprintf_r+0x1a6>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0c6      	beq.n	80036f4 <_svfiprintf_r+0x130>
 8003766:	9105      	str	r1, [sp, #20]
 8003768:	e7c4      	b.n	80036f4 <_svfiprintf_r+0x130>
 800376a:	4604      	mov	r4, r0
 800376c:	2301      	movs	r3, #1
 800376e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003772:	e7f0      	b.n	8003756 <_svfiprintf_r+0x192>
 8003774:	ab03      	add	r3, sp, #12
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	462a      	mov	r2, r5
 800377a:	4638      	mov	r0, r7
 800377c:	4b0e      	ldr	r3, [pc, #56]	@ (80037b8 <_svfiprintf_r+0x1f4>)
 800377e:	a904      	add	r1, sp, #16
 8003780:	f3af 8000 	nop.w
 8003784:	1c42      	adds	r2, r0, #1
 8003786:	4606      	mov	r6, r0
 8003788:	d1d6      	bne.n	8003738 <_svfiprintf_r+0x174>
 800378a:	89ab      	ldrh	r3, [r5, #12]
 800378c:	065b      	lsls	r3, r3, #25
 800378e:	f53f af2d 	bmi.w	80035ec <_svfiprintf_r+0x28>
 8003792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003794:	e72c      	b.n	80035f0 <_svfiprintf_r+0x2c>
 8003796:	ab03      	add	r3, sp, #12
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	462a      	mov	r2, r5
 800379c:	4638      	mov	r0, r7
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <_svfiprintf_r+0x1f4>)
 80037a0:	a904      	add	r1, sp, #16
 80037a2:	f000 f87d 	bl	80038a0 <_printf_i>
 80037a6:	e7ed      	b.n	8003784 <_svfiprintf_r+0x1c0>
 80037a8:	08003c42 	.word	0x08003c42
 80037ac:	08003c48 	.word	0x08003c48
 80037b0:	08003c4c 	.word	0x08003c4c
 80037b4:	00000000 	.word	0x00000000
 80037b8:	0800350d 	.word	0x0800350d

080037bc <_printf_common>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	4616      	mov	r6, r2
 80037c2:	4698      	mov	r8, r3
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	4607      	mov	r7, r0
 80037ca:	4293      	cmp	r3, r2
 80037cc:	bfb8      	it	lt
 80037ce:	4613      	movlt	r3, r2
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037d6:	460c      	mov	r4, r1
 80037d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037dc:	b10a      	cbz	r2, 80037e2 <_printf_common+0x26>
 80037de:	3301      	adds	r3, #1
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	0699      	lsls	r1, r3, #26
 80037e6:	bf42      	ittt	mi
 80037e8:	6833      	ldrmi	r3, [r6, #0]
 80037ea:	3302      	addmi	r3, #2
 80037ec:	6033      	strmi	r3, [r6, #0]
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f015 0506 	ands.w	r5, r5, #6
 80037f4:	d106      	bne.n	8003804 <_printf_common+0x48>
 80037f6:	f104 0a19 	add.w	sl, r4, #25
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	6832      	ldr	r2, [r6, #0]
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	42ab      	cmp	r3, r5
 8003802:	dc2b      	bgt.n	800385c <_printf_common+0xa0>
 8003804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003808:	6822      	ldr	r2, [r4, #0]
 800380a:	3b00      	subs	r3, #0
 800380c:	bf18      	it	ne
 800380e:	2301      	movne	r3, #1
 8003810:	0692      	lsls	r2, r2, #26
 8003812:	d430      	bmi.n	8003876 <_printf_common+0xba>
 8003814:	4641      	mov	r1, r8
 8003816:	4638      	mov	r0, r7
 8003818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800381c:	47c8      	blx	r9
 800381e:	3001      	adds	r0, #1
 8003820:	d023      	beq.n	800386a <_printf_common+0xae>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	6922      	ldr	r2, [r4, #16]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf14      	ite	ne
 800382e:	2500      	movne	r5, #0
 8003830:	6833      	ldreq	r3, [r6, #0]
 8003832:	f04f 0600 	mov.w	r6, #0
 8003836:	bf08      	it	eq
 8003838:	68e5      	ldreq	r5, [r4, #12]
 800383a:	f104 041a 	add.w	r4, r4, #26
 800383e:	bf08      	it	eq
 8003840:	1aed      	subeq	r5, r5, r3
 8003842:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003846:	bf08      	it	eq
 8003848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800384c:	4293      	cmp	r3, r2
 800384e:	bfc4      	itt	gt
 8003850:	1a9b      	subgt	r3, r3, r2
 8003852:	18ed      	addgt	r5, r5, r3
 8003854:	42b5      	cmp	r5, r6
 8003856:	d11a      	bne.n	800388e <_printf_common+0xd2>
 8003858:	2000      	movs	r0, #0
 800385a:	e008      	b.n	800386e <_printf_common+0xb2>
 800385c:	2301      	movs	r3, #1
 800385e:	4652      	mov	r2, sl
 8003860:	4641      	mov	r1, r8
 8003862:	4638      	mov	r0, r7
 8003864:	47c8      	blx	r9
 8003866:	3001      	adds	r0, #1
 8003868:	d103      	bne.n	8003872 <_printf_common+0xb6>
 800386a:	f04f 30ff 	mov.w	r0, #4294967295
 800386e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003872:	3501      	adds	r5, #1
 8003874:	e7c1      	b.n	80037fa <_printf_common+0x3e>
 8003876:	2030      	movs	r0, #48	@ 0x30
 8003878:	18e1      	adds	r1, r4, r3
 800387a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003884:	4422      	add	r2, r4
 8003886:	3302      	adds	r3, #2
 8003888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800388c:	e7c2      	b.n	8003814 <_printf_common+0x58>
 800388e:	2301      	movs	r3, #1
 8003890:	4622      	mov	r2, r4
 8003892:	4641      	mov	r1, r8
 8003894:	4638      	mov	r0, r7
 8003896:	47c8      	blx	r9
 8003898:	3001      	adds	r0, #1
 800389a:	d0e6      	beq.n	800386a <_printf_common+0xae>
 800389c:	3601      	adds	r6, #1
 800389e:	e7d9      	b.n	8003854 <_printf_common+0x98>

080038a0 <_printf_i>:
 80038a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038a4:	7e0f      	ldrb	r7, [r1, #24]
 80038a6:	4691      	mov	r9, r2
 80038a8:	2f78      	cmp	r7, #120	@ 0x78
 80038aa:	4680      	mov	r8, r0
 80038ac:	460c      	mov	r4, r1
 80038ae:	469a      	mov	sl, r3
 80038b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038b6:	d807      	bhi.n	80038c8 <_printf_i+0x28>
 80038b8:	2f62      	cmp	r7, #98	@ 0x62
 80038ba:	d80a      	bhi.n	80038d2 <_printf_i+0x32>
 80038bc:	2f00      	cmp	r7, #0
 80038be:	f000 80d1 	beq.w	8003a64 <_printf_i+0x1c4>
 80038c2:	2f58      	cmp	r7, #88	@ 0x58
 80038c4:	f000 80b8 	beq.w	8003a38 <_printf_i+0x198>
 80038c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038d0:	e03a      	b.n	8003948 <_printf_i+0xa8>
 80038d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038d6:	2b15      	cmp	r3, #21
 80038d8:	d8f6      	bhi.n	80038c8 <_printf_i+0x28>
 80038da:	a101      	add	r1, pc, #4	@ (adr r1, 80038e0 <_printf_i+0x40>)
 80038dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038e0:	08003939 	.word	0x08003939
 80038e4:	0800394d 	.word	0x0800394d
 80038e8:	080038c9 	.word	0x080038c9
 80038ec:	080038c9 	.word	0x080038c9
 80038f0:	080038c9 	.word	0x080038c9
 80038f4:	080038c9 	.word	0x080038c9
 80038f8:	0800394d 	.word	0x0800394d
 80038fc:	080038c9 	.word	0x080038c9
 8003900:	080038c9 	.word	0x080038c9
 8003904:	080038c9 	.word	0x080038c9
 8003908:	080038c9 	.word	0x080038c9
 800390c:	08003a4b 	.word	0x08003a4b
 8003910:	08003977 	.word	0x08003977
 8003914:	08003a05 	.word	0x08003a05
 8003918:	080038c9 	.word	0x080038c9
 800391c:	080038c9 	.word	0x080038c9
 8003920:	08003a6d 	.word	0x08003a6d
 8003924:	080038c9 	.word	0x080038c9
 8003928:	08003977 	.word	0x08003977
 800392c:	080038c9 	.word	0x080038c9
 8003930:	080038c9 	.word	0x080038c9
 8003934:	08003a0d 	.word	0x08003a0d
 8003938:	6833      	ldr	r3, [r6, #0]
 800393a:	1d1a      	adds	r2, r3, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6032      	str	r2, [r6, #0]
 8003940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003948:	2301      	movs	r3, #1
 800394a:	e09c      	b.n	8003a86 <_printf_i+0x1e6>
 800394c:	6833      	ldr	r3, [r6, #0]
 800394e:	6820      	ldr	r0, [r4, #0]
 8003950:	1d19      	adds	r1, r3, #4
 8003952:	6031      	str	r1, [r6, #0]
 8003954:	0606      	lsls	r6, r0, #24
 8003956:	d501      	bpl.n	800395c <_printf_i+0xbc>
 8003958:	681d      	ldr	r5, [r3, #0]
 800395a:	e003      	b.n	8003964 <_printf_i+0xc4>
 800395c:	0645      	lsls	r5, r0, #25
 800395e:	d5fb      	bpl.n	8003958 <_printf_i+0xb8>
 8003960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003964:	2d00      	cmp	r5, #0
 8003966:	da03      	bge.n	8003970 <_printf_i+0xd0>
 8003968:	232d      	movs	r3, #45	@ 0x2d
 800396a:	426d      	negs	r5, r5
 800396c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003970:	230a      	movs	r3, #10
 8003972:	4858      	ldr	r0, [pc, #352]	@ (8003ad4 <_printf_i+0x234>)
 8003974:	e011      	b.n	800399a <_printf_i+0xfa>
 8003976:	6821      	ldr	r1, [r4, #0]
 8003978:	6833      	ldr	r3, [r6, #0]
 800397a:	0608      	lsls	r0, r1, #24
 800397c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003980:	d402      	bmi.n	8003988 <_printf_i+0xe8>
 8003982:	0649      	lsls	r1, r1, #25
 8003984:	bf48      	it	mi
 8003986:	b2ad      	uxthmi	r5, r5
 8003988:	2f6f      	cmp	r7, #111	@ 0x6f
 800398a:	6033      	str	r3, [r6, #0]
 800398c:	bf14      	ite	ne
 800398e:	230a      	movne	r3, #10
 8003990:	2308      	moveq	r3, #8
 8003992:	4850      	ldr	r0, [pc, #320]	@ (8003ad4 <_printf_i+0x234>)
 8003994:	2100      	movs	r1, #0
 8003996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800399a:	6866      	ldr	r6, [r4, #4]
 800399c:	2e00      	cmp	r6, #0
 800399e:	60a6      	str	r6, [r4, #8]
 80039a0:	db05      	blt.n	80039ae <_printf_i+0x10e>
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	432e      	orrs	r6, r5
 80039a6:	f021 0104 	bic.w	r1, r1, #4
 80039aa:	6021      	str	r1, [r4, #0]
 80039ac:	d04b      	beq.n	8003a46 <_printf_i+0x1a6>
 80039ae:	4616      	mov	r6, r2
 80039b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80039b4:	fb03 5711 	mls	r7, r3, r1, r5
 80039b8:	5dc7      	ldrb	r7, [r0, r7]
 80039ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039be:	462f      	mov	r7, r5
 80039c0:	42bb      	cmp	r3, r7
 80039c2:	460d      	mov	r5, r1
 80039c4:	d9f4      	bls.n	80039b0 <_printf_i+0x110>
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d10b      	bne.n	80039e2 <_printf_i+0x142>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	07df      	lsls	r7, r3, #31
 80039ce:	d508      	bpl.n	80039e2 <_printf_i+0x142>
 80039d0:	6923      	ldr	r3, [r4, #16]
 80039d2:	6861      	ldr	r1, [r4, #4]
 80039d4:	4299      	cmp	r1, r3
 80039d6:	bfde      	ittt	le
 80039d8:	2330      	movle	r3, #48	@ 0x30
 80039da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039e2:	1b92      	subs	r2, r2, r6
 80039e4:	6122      	str	r2, [r4, #16]
 80039e6:	464b      	mov	r3, r9
 80039e8:	4621      	mov	r1, r4
 80039ea:	4640      	mov	r0, r8
 80039ec:	f8cd a000 	str.w	sl, [sp]
 80039f0:	aa03      	add	r2, sp, #12
 80039f2:	f7ff fee3 	bl	80037bc <_printf_common>
 80039f6:	3001      	adds	r0, #1
 80039f8:	d14a      	bne.n	8003a90 <_printf_i+0x1f0>
 80039fa:	f04f 30ff 	mov.w	r0, #4294967295
 80039fe:	b004      	add	sp, #16
 8003a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f043 0320 	orr.w	r3, r3, #32
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	2778      	movs	r7, #120	@ 0x78
 8003a0e:	4832      	ldr	r0, [pc, #200]	@ (8003ad8 <_printf_i+0x238>)
 8003a10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	6831      	ldr	r1, [r6, #0]
 8003a18:	061f      	lsls	r7, r3, #24
 8003a1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a1e:	d402      	bmi.n	8003a26 <_printf_i+0x186>
 8003a20:	065f      	lsls	r7, r3, #25
 8003a22:	bf48      	it	mi
 8003a24:	b2ad      	uxthmi	r5, r5
 8003a26:	6031      	str	r1, [r6, #0]
 8003a28:	07d9      	lsls	r1, r3, #31
 8003a2a:	bf44      	itt	mi
 8003a2c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a30:	6023      	strmi	r3, [r4, #0]
 8003a32:	b11d      	cbz	r5, 8003a3c <_printf_i+0x19c>
 8003a34:	2310      	movs	r3, #16
 8003a36:	e7ad      	b.n	8003994 <_printf_i+0xf4>
 8003a38:	4826      	ldr	r0, [pc, #152]	@ (8003ad4 <_printf_i+0x234>)
 8003a3a:	e7e9      	b.n	8003a10 <_printf_i+0x170>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	f023 0320 	bic.w	r3, r3, #32
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	e7f6      	b.n	8003a34 <_printf_i+0x194>
 8003a46:	4616      	mov	r6, r2
 8003a48:	e7bd      	b.n	80039c6 <_printf_i+0x126>
 8003a4a:	6833      	ldr	r3, [r6, #0]
 8003a4c:	6825      	ldr	r5, [r4, #0]
 8003a4e:	1d18      	adds	r0, r3, #4
 8003a50:	6961      	ldr	r1, [r4, #20]
 8003a52:	6030      	str	r0, [r6, #0]
 8003a54:	062e      	lsls	r6, r5, #24
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	d501      	bpl.n	8003a5e <_printf_i+0x1be>
 8003a5a:	6019      	str	r1, [r3, #0]
 8003a5c:	e002      	b.n	8003a64 <_printf_i+0x1c4>
 8003a5e:	0668      	lsls	r0, r5, #25
 8003a60:	d5fb      	bpl.n	8003a5a <_printf_i+0x1ba>
 8003a62:	8019      	strh	r1, [r3, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	4616      	mov	r6, r2
 8003a68:	6123      	str	r3, [r4, #16]
 8003a6a:	e7bc      	b.n	80039e6 <_printf_i+0x146>
 8003a6c:	6833      	ldr	r3, [r6, #0]
 8003a6e:	2100      	movs	r1, #0
 8003a70:	1d1a      	adds	r2, r3, #4
 8003a72:	6032      	str	r2, [r6, #0]
 8003a74:	681e      	ldr	r6, [r3, #0]
 8003a76:	6862      	ldr	r2, [r4, #4]
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f000 f859 	bl	8003b30 <memchr>
 8003a7e:	b108      	cbz	r0, 8003a84 <_printf_i+0x1e4>
 8003a80:	1b80      	subs	r0, r0, r6
 8003a82:	6060      	str	r0, [r4, #4]
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	6123      	str	r3, [r4, #16]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a8e:	e7aa      	b.n	80039e6 <_printf_i+0x146>
 8003a90:	4632      	mov	r2, r6
 8003a92:	4649      	mov	r1, r9
 8003a94:	4640      	mov	r0, r8
 8003a96:	6923      	ldr	r3, [r4, #16]
 8003a98:	47d0      	blx	sl
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d0ad      	beq.n	80039fa <_printf_i+0x15a>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	079b      	lsls	r3, r3, #30
 8003aa2:	d413      	bmi.n	8003acc <_printf_i+0x22c>
 8003aa4:	68e0      	ldr	r0, [r4, #12]
 8003aa6:	9b03      	ldr	r3, [sp, #12]
 8003aa8:	4298      	cmp	r0, r3
 8003aaa:	bfb8      	it	lt
 8003aac:	4618      	movlt	r0, r3
 8003aae:	e7a6      	b.n	80039fe <_printf_i+0x15e>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4632      	mov	r2, r6
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	47d0      	blx	sl
 8003aba:	3001      	adds	r0, #1
 8003abc:	d09d      	beq.n	80039fa <_printf_i+0x15a>
 8003abe:	3501      	adds	r5, #1
 8003ac0:	68e3      	ldr	r3, [r4, #12]
 8003ac2:	9903      	ldr	r1, [sp, #12]
 8003ac4:	1a5b      	subs	r3, r3, r1
 8003ac6:	42ab      	cmp	r3, r5
 8003ac8:	dcf2      	bgt.n	8003ab0 <_printf_i+0x210>
 8003aca:	e7eb      	b.n	8003aa4 <_printf_i+0x204>
 8003acc:	2500      	movs	r5, #0
 8003ace:	f104 0619 	add.w	r6, r4, #25
 8003ad2:	e7f5      	b.n	8003ac0 <_printf_i+0x220>
 8003ad4:	08003c53 	.word	0x08003c53
 8003ad8:	08003c64 	.word	0x08003c64

08003adc <memmove>:
 8003adc:	4288      	cmp	r0, r1
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	eb01 0402 	add.w	r4, r1, r2
 8003ae4:	d902      	bls.n	8003aec <memmove+0x10>
 8003ae6:	4284      	cmp	r4, r0
 8003ae8:	4623      	mov	r3, r4
 8003aea:	d807      	bhi.n	8003afc <memmove+0x20>
 8003aec:	1e43      	subs	r3, r0, #1
 8003aee:	42a1      	cmp	r1, r4
 8003af0:	d008      	beq.n	8003b04 <memmove+0x28>
 8003af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003afa:	e7f8      	b.n	8003aee <memmove+0x12>
 8003afc:	4601      	mov	r1, r0
 8003afe:	4402      	add	r2, r0
 8003b00:	428a      	cmp	r2, r1
 8003b02:	d100      	bne.n	8003b06 <memmove+0x2a>
 8003b04:	bd10      	pop	{r4, pc}
 8003b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b0e:	e7f7      	b.n	8003b00 <memmove+0x24>

08003b10 <_sbrk_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	2300      	movs	r3, #0
 8003b14:	4d05      	ldr	r5, [pc, #20]	@ (8003b2c <_sbrk_r+0x1c>)
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	f7fd fa78 	bl	8001010 <_sbrk>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_sbrk_r+0x1a>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_sbrk_r+0x1a>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	2000022c 	.word	0x2000022c

08003b30 <memchr>:
 8003b30:	4603      	mov	r3, r0
 8003b32:	b510      	push	{r4, lr}
 8003b34:	b2c9      	uxtb	r1, r1
 8003b36:	4402      	add	r2, r0
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	d101      	bne.n	8003b42 <memchr+0x12>
 8003b3e:	2000      	movs	r0, #0
 8003b40:	e003      	b.n	8003b4a <memchr+0x1a>
 8003b42:	7804      	ldrb	r4, [r0, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	428c      	cmp	r4, r1
 8003b48:	d1f6      	bne.n	8003b38 <memchr+0x8>
 8003b4a:	bd10      	pop	{r4, pc}

08003b4c <memcpy>:
 8003b4c:	440a      	add	r2, r1
 8003b4e:	4291      	cmp	r1, r2
 8003b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b54:	d100      	bne.n	8003b58 <memcpy+0xc>
 8003b56:	4770      	bx	lr
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b5e:	4291      	cmp	r1, r2
 8003b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b64:	d1f9      	bne.n	8003b5a <memcpy+0xe>
 8003b66:	bd10      	pop	{r4, pc}

08003b68 <_realloc_r>:
 8003b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	4614      	mov	r4, r2
 8003b70:	460d      	mov	r5, r1
 8003b72:	b921      	cbnz	r1, 8003b7e <_realloc_r+0x16>
 8003b74:	4611      	mov	r1, r2
 8003b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7a:	f7ff bc3b 	b.w	80033f4 <_malloc_r>
 8003b7e:	b92a      	cbnz	r2, 8003b8c <_realloc_r+0x24>
 8003b80:	f7ff fbce 	bl	8003320 <_free_r>
 8003b84:	4625      	mov	r5, r4
 8003b86:	4628      	mov	r0, r5
 8003b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b8c:	f000 f81a 	bl	8003bc4 <_malloc_usable_size_r>
 8003b90:	4284      	cmp	r4, r0
 8003b92:	4606      	mov	r6, r0
 8003b94:	d802      	bhi.n	8003b9c <_realloc_r+0x34>
 8003b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b9a:	d8f4      	bhi.n	8003b86 <_realloc_r+0x1e>
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	f7ff fc28 	bl	80033f4 <_malloc_r>
 8003ba4:	4680      	mov	r8, r0
 8003ba6:	b908      	cbnz	r0, 8003bac <_realloc_r+0x44>
 8003ba8:	4645      	mov	r5, r8
 8003baa:	e7ec      	b.n	8003b86 <_realloc_r+0x1e>
 8003bac:	42b4      	cmp	r4, r6
 8003bae:	4622      	mov	r2, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	bf28      	it	cs
 8003bb4:	4632      	movcs	r2, r6
 8003bb6:	f7ff ffc9 	bl	8003b4c <memcpy>
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f7ff fbaf 	bl	8003320 <_free_r>
 8003bc2:	e7f1      	b.n	8003ba8 <_realloc_r+0x40>

08003bc4 <_malloc_usable_size_r>:
 8003bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc8:	1f18      	subs	r0, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bfbc      	itt	lt
 8003bce:	580b      	ldrlt	r3, [r1, r0]
 8003bd0:	18c0      	addlt	r0, r0, r3
 8003bd2:	4770      	bx	lr

08003bd4 <_init>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr

08003be0 <_fini>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr
