
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a84  080096b0  080096b0  0000a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a134  0800a134  0000c0c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a134  0800a134  0000b134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a13c  0800a13c  0000c0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a13c  0800a13c  0000b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a140  0800a140  0000b140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800a144  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  200000c0  0800a204  0000c0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800a204  0000c538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013721  00000000  00000000  0000c0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a97  00000000  00000000  0001f80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  000232a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc6  00000000  00000000  00024488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a50b  00000000  00000000  0002524e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001841f  00000000  00000000  0003f759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea0e  00000000  00000000  00057b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e0  00000000  00000000  000e65cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000eb9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009698 	.word	0x08009698

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08009698 	.word	0x08009698

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_frsub>:
 80004e8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004ec:	e002      	b.n	80004f4 <__addsf3>
 80004ee:	bf00      	nop

080004f0 <__aeabi_fsub>:
 80004f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004f4 <__addsf3>:
 80004f4:	0042      	lsls	r2, r0, #1
 80004f6:	bf1f      	itttt	ne
 80004f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004fc:	ea92 0f03 	teqne	r2, r3
 8000500:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000504:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000508:	d06a      	beq.n	80005e0 <__addsf3+0xec>
 800050a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800050e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000512:	bfc1      	itttt	gt
 8000514:	18d2      	addgt	r2, r2, r3
 8000516:	4041      	eorgt	r1, r0
 8000518:	4048      	eorgt	r0, r1
 800051a:	4041      	eorgt	r1, r0
 800051c:	bfb8      	it	lt
 800051e:	425b      	neglt	r3, r3
 8000520:	2b19      	cmp	r3, #25
 8000522:	bf88      	it	hi
 8000524:	4770      	bxhi	lr
 8000526:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800052a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800052e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000532:	bf18      	it	ne
 8000534:	4240      	negne	r0, r0
 8000536:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800053e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000542:	bf18      	it	ne
 8000544:	4249      	negne	r1, r1
 8000546:	ea92 0f03 	teq	r2, r3
 800054a:	d03f      	beq.n	80005cc <__addsf3+0xd8>
 800054c:	f1a2 0201 	sub.w	r2, r2, #1
 8000550:	fa41 fc03 	asr.w	ip, r1, r3
 8000554:	eb10 000c 	adds.w	r0, r0, ip
 8000558:	f1c3 0320 	rsb	r3, r3, #32
 800055c:	fa01 f103 	lsl.w	r1, r1, r3
 8000560:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000564:	d502      	bpl.n	800056c <__addsf3+0x78>
 8000566:	4249      	negs	r1, r1
 8000568:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800056c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000570:	d313      	bcc.n	800059a <__addsf3+0xa6>
 8000572:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000576:	d306      	bcc.n	8000586 <__addsf3+0x92>
 8000578:	0840      	lsrs	r0, r0, #1
 800057a:	ea4f 0131 	mov.w	r1, r1, rrx
 800057e:	f102 0201 	add.w	r2, r2, #1
 8000582:	2afe      	cmp	r2, #254	@ 0xfe
 8000584:	d251      	bcs.n	800062a <__addsf3+0x136>
 8000586:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800058a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800058e:	bf08      	it	eq
 8000590:	f020 0001 	biceq.w	r0, r0, #1
 8000594:	ea40 0003 	orr.w	r0, r0, r3
 8000598:	4770      	bx	lr
 800059a:	0049      	lsls	r1, r1, #1
 800059c:	eb40 0000 	adc.w	r0, r0, r0
 80005a0:	3a01      	subs	r2, #1
 80005a2:	bf28      	it	cs
 80005a4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80005a8:	d2ed      	bcs.n	8000586 <__addsf3+0x92>
 80005aa:	fab0 fc80 	clz	ip, r0
 80005ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80005b2:	ebb2 020c 	subs.w	r2, r2, ip
 80005b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80005ba:	bfaa      	itet	ge
 80005bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005c0:	4252      	neglt	r2, r2
 80005c2:	4318      	orrge	r0, r3
 80005c4:	bfbc      	itt	lt
 80005c6:	40d0      	lsrlt	r0, r2
 80005c8:	4318      	orrlt	r0, r3
 80005ca:	4770      	bx	lr
 80005cc:	f092 0f00 	teq	r2, #0
 80005d0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005d4:	bf06      	itte	eq
 80005d6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005da:	3201      	addeq	r2, #1
 80005dc:	3b01      	subne	r3, #1
 80005de:	e7b5      	b.n	800054c <__addsf3+0x58>
 80005e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005e8:	bf18      	it	ne
 80005ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ee:	d021      	beq.n	8000634 <__addsf3+0x140>
 80005f0:	ea92 0f03 	teq	r2, r3
 80005f4:	d004      	beq.n	8000600 <__addsf3+0x10c>
 80005f6:	f092 0f00 	teq	r2, #0
 80005fa:	bf08      	it	eq
 80005fc:	4608      	moveq	r0, r1
 80005fe:	4770      	bx	lr
 8000600:	ea90 0f01 	teq	r0, r1
 8000604:	bf1c      	itt	ne
 8000606:	2000      	movne	r0, #0
 8000608:	4770      	bxne	lr
 800060a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800060e:	d104      	bne.n	800061a <__addsf3+0x126>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	bf28      	it	cs
 8000614:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000618:	4770      	bx	lr
 800061a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800061e:	bf3c      	itt	cc
 8000620:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000624:	4770      	bxcc	lr
 8000626:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800062a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800062e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000632:	4770      	bx	lr
 8000634:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000638:	bf16      	itet	ne
 800063a:	4608      	movne	r0, r1
 800063c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000640:	4601      	movne	r1, r0
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	bf06      	itte	eq
 8000646:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800064a:	ea90 0f01 	teqeq	r0, r1
 800064e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000652:	4770      	bx	lr

08000654 <__aeabi_ui2f>:
 8000654:	f04f 0300 	mov.w	r3, #0
 8000658:	e004      	b.n	8000664 <__aeabi_i2f+0x8>
 800065a:	bf00      	nop

0800065c <__aeabi_i2f>:
 800065c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	ea5f 0c00 	movs.w	ip, r0
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000670:	4601      	mov	r1, r0
 8000672:	f04f 0000 	mov.w	r0, #0
 8000676:	e01c      	b.n	80006b2 <__aeabi_l2f+0x2a>

08000678 <__aeabi_ul2f>:
 8000678:	ea50 0201 	orrs.w	r2, r0, r1
 800067c:	bf08      	it	eq
 800067e:	4770      	bxeq	lr
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e00a      	b.n	800069c <__aeabi_l2f+0x14>
 8000686:	bf00      	nop

08000688 <__aeabi_l2f>:
 8000688:	ea50 0201 	orrs.w	r2, r0, r1
 800068c:	bf08      	it	eq
 800068e:	4770      	bxeq	lr
 8000690:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000694:	d502      	bpl.n	800069c <__aeabi_l2f+0x14>
 8000696:	4240      	negs	r0, r0
 8000698:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069c:	ea5f 0c01 	movs.w	ip, r1
 80006a0:	bf02      	ittt	eq
 80006a2:	4684      	moveq	ip, r0
 80006a4:	4601      	moveq	r1, r0
 80006a6:	2000      	moveq	r0, #0
 80006a8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80006ac:	bf08      	it	eq
 80006ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006b6:	fabc f28c 	clz	r2, ip
 80006ba:	3a08      	subs	r2, #8
 80006bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006c0:	db10      	blt.n	80006e4 <__aeabi_l2f+0x5c>
 80006c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c6:	4463      	add	r3, ip
 80006c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80006cc:	f1c2 0220 	rsb	r2, r2, #32
 80006d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006d4:	fa20 f202 	lsr.w	r2, r0, r2
 80006d8:	eb43 0002 	adc.w	r0, r3, r2
 80006dc:	bf08      	it	eq
 80006de:	f020 0001 	biceq.w	r0, r0, #1
 80006e2:	4770      	bx	lr
 80006e4:	f102 0220 	add.w	r2, r2, #32
 80006e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80006ec:	f1c2 0220 	rsb	r2, r2, #32
 80006f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006f4:	fa21 f202 	lsr.w	r2, r1, r2
 80006f8:	eb43 0002 	adc.w	r0, r3, r2
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000702:	4770      	bx	lr

08000704 <__aeabi_fmul>:
 8000704:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000708:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800070c:	bf1e      	ittt	ne
 800070e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000712:	ea92 0f0c 	teqne	r2, ip
 8000716:	ea93 0f0c 	teqne	r3, ip
 800071a:	d06f      	beq.n	80007fc <__aeabi_fmul+0xf8>
 800071c:	441a      	add	r2, r3
 800071e:	ea80 0c01 	eor.w	ip, r0, r1
 8000722:	0240      	lsls	r0, r0, #9
 8000724:	bf18      	it	ne
 8000726:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800072a:	d01e      	beq.n	800076a <__aeabi_fmul+0x66>
 800072c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000730:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000734:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000738:	fba0 3101 	umull	r3, r1, r0, r1
 800073c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000740:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000744:	bf3e      	ittt	cc
 8000746:	0049      	lslcc	r1, r1, #1
 8000748:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800074c:	005b      	lslcc	r3, r3, #1
 800074e:	ea40 0001 	orr.w	r0, r0, r1
 8000752:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000756:	2afd      	cmp	r2, #253	@ 0xfd
 8000758:	d81d      	bhi.n	8000796 <__aeabi_fmul+0x92>
 800075a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800075e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000762:	bf08      	it	eq
 8000764:	f020 0001 	biceq.w	r0, r0, #1
 8000768:	4770      	bx	lr
 800076a:	f090 0f00 	teq	r0, #0
 800076e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000772:	bf08      	it	eq
 8000774:	0249      	lsleq	r1, r1, #9
 8000776:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800077a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800077e:	3a7f      	subs	r2, #127	@ 0x7f
 8000780:	bfc2      	ittt	gt
 8000782:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000786:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800078a:	4770      	bxgt	lr
 800078c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	3a01      	subs	r2, #1
 8000796:	dc5d      	bgt.n	8000854 <__aeabi_fmul+0x150>
 8000798:	f112 0f19 	cmn.w	r2, #25
 800079c:	bfdc      	itt	le
 800079e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80007a2:	4770      	bxle	lr
 80007a4:	f1c2 0200 	rsb	r2, r2, #0
 80007a8:	0041      	lsls	r1, r0, #1
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	f1c2 0220 	rsb	r2, r2, #32
 80007b2:	fa00 fc02 	lsl.w	ip, r0, r2
 80007b6:	ea5f 0031 	movs.w	r0, r1, rrx
 80007ba:	f140 0000 	adc.w	r0, r0, #0
 80007be:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007c2:	bf08      	it	eq
 80007c4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007c8:	4770      	bx	lr
 80007ca:	f092 0f00 	teq	r2, #0
 80007ce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007d2:	bf02      	ittt	eq
 80007d4:	0040      	lsleq	r0, r0, #1
 80007d6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007da:	3a01      	subeq	r2, #1
 80007dc:	d0f9      	beq.n	80007d2 <__aeabi_fmul+0xce>
 80007de:	ea40 000c 	orr.w	r0, r0, ip
 80007e2:	f093 0f00 	teq	r3, #0
 80007e6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ea:	bf02      	ittt	eq
 80007ec:	0049      	lsleq	r1, r1, #1
 80007ee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007f2:	3b01      	subeq	r3, #1
 80007f4:	d0f9      	beq.n	80007ea <__aeabi_fmul+0xe6>
 80007f6:	ea41 010c 	orr.w	r1, r1, ip
 80007fa:	e78f      	b.n	800071c <__aeabi_fmul+0x18>
 80007fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000800:	ea92 0f0c 	teq	r2, ip
 8000804:	bf18      	it	ne
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d00a      	beq.n	8000822 <__aeabi_fmul+0x11e>
 800080c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000810:	bf18      	it	ne
 8000812:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000816:	d1d8      	bne.n	80007ca <__aeabi_fmul+0xc6>
 8000818:	ea80 0001 	eor.w	r0, r0, r1
 800081c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000820:	4770      	bx	lr
 8000822:	f090 0f00 	teq	r0, #0
 8000826:	bf17      	itett	ne
 8000828:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800082c:	4608      	moveq	r0, r1
 800082e:	f091 0f00 	teqne	r1, #0
 8000832:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000836:	d014      	beq.n	8000862 <__aeabi_fmul+0x15e>
 8000838:	ea92 0f0c 	teq	r2, ip
 800083c:	d101      	bne.n	8000842 <__aeabi_fmul+0x13e>
 800083e:	0242      	lsls	r2, r0, #9
 8000840:	d10f      	bne.n	8000862 <__aeabi_fmul+0x15e>
 8000842:	ea93 0f0c 	teq	r3, ip
 8000846:	d103      	bne.n	8000850 <__aeabi_fmul+0x14c>
 8000848:	024b      	lsls	r3, r1, #9
 800084a:	bf18      	it	ne
 800084c:	4608      	movne	r0, r1
 800084e:	d108      	bne.n	8000862 <__aeabi_fmul+0x15e>
 8000850:	ea80 0001 	eor.w	r0, r0, r1
 8000854:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800085c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000860:	4770      	bx	lr
 8000862:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000866:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800086a:	4770      	bx	lr

0800086c <__aeabi_fdiv>:
 800086c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000870:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000874:	bf1e      	ittt	ne
 8000876:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800087a:	ea92 0f0c 	teqne	r2, ip
 800087e:	ea93 0f0c 	teqne	r3, ip
 8000882:	d069      	beq.n	8000958 <__aeabi_fdiv+0xec>
 8000884:	eba2 0203 	sub.w	r2, r2, r3
 8000888:	ea80 0c01 	eor.w	ip, r0, r1
 800088c:	0249      	lsls	r1, r1, #9
 800088e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000892:	d037      	beq.n	8000904 <__aeabi_fdiv+0x98>
 8000894:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000898:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800089c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008a4:	428b      	cmp	r3, r1
 80008a6:	bf38      	it	cc
 80008a8:	005b      	lslcc	r3, r3, #1
 80008aa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80008ae:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80008b2:	428b      	cmp	r3, r1
 80008b4:	bf24      	itt	cs
 80008b6:	1a5b      	subcs	r3, r3, r1
 80008b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008bc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008c0:	bf24      	itt	cs
 80008c2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008c6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ce:	bf24      	itt	cs
 80008d0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008dc:	bf24      	itt	cs
 80008de:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008e2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	bf18      	it	ne
 80008ea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ee:	d1e0      	bne.n	80008b2 <__aeabi_fdiv+0x46>
 80008f0:	2afd      	cmp	r2, #253	@ 0xfd
 80008f2:	f63f af50 	bhi.w	8000796 <__aeabi_fmul+0x92>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000908:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090c:	327f      	adds	r2, #127	@ 0x7f
 800090e:	bfc2      	ittt	gt
 8000910:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000914:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000918:	4770      	bxgt	lr
 800091a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800091e:	f04f 0300 	mov.w	r3, #0
 8000922:	3a01      	subs	r2, #1
 8000924:	e737      	b.n	8000796 <__aeabi_fmul+0x92>
 8000926:	f092 0f00 	teq	r2, #0
 800092a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800092e:	bf02      	ittt	eq
 8000930:	0040      	lsleq	r0, r0, #1
 8000932:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000936:	3a01      	subeq	r2, #1
 8000938:	d0f9      	beq.n	800092e <__aeabi_fdiv+0xc2>
 800093a:	ea40 000c 	orr.w	r0, r0, ip
 800093e:	f093 0f00 	teq	r3, #0
 8000942:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000946:	bf02      	ittt	eq
 8000948:	0049      	lsleq	r1, r1, #1
 800094a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800094e:	3b01      	subeq	r3, #1
 8000950:	d0f9      	beq.n	8000946 <__aeabi_fdiv+0xda>
 8000952:	ea41 010c 	orr.w	r1, r1, ip
 8000956:	e795      	b.n	8000884 <__aeabi_fdiv+0x18>
 8000958:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800095c:	ea92 0f0c 	teq	r2, ip
 8000960:	d108      	bne.n	8000974 <__aeabi_fdiv+0x108>
 8000962:	0242      	lsls	r2, r0, #9
 8000964:	f47f af7d 	bne.w	8000862 <__aeabi_fmul+0x15e>
 8000968:	ea93 0f0c 	teq	r3, ip
 800096c:	f47f af70 	bne.w	8000850 <__aeabi_fmul+0x14c>
 8000970:	4608      	mov	r0, r1
 8000972:	e776      	b.n	8000862 <__aeabi_fmul+0x15e>
 8000974:	ea93 0f0c 	teq	r3, ip
 8000978:	d104      	bne.n	8000984 <__aeabi_fdiv+0x118>
 800097a:	024b      	lsls	r3, r1, #9
 800097c:	f43f af4c 	beq.w	8000818 <__aeabi_fmul+0x114>
 8000980:	4608      	mov	r0, r1
 8000982:	e76e      	b.n	8000862 <__aeabi_fmul+0x15e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1ca      	bne.n	8000926 <__aeabi_fdiv+0xba>
 8000990:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000994:	f47f af5c 	bne.w	8000850 <__aeabi_fmul+0x14c>
 8000998:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800099c:	f47f af3c 	bne.w	8000818 <__aeabi_fmul+0x114>
 80009a0:	e75f      	b.n	8000862 <__aeabi_fmul+0x15e>
 80009a2:	bf00      	nop

080009a4 <__gesf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpsf2+0x4>
 80009aa:	bf00      	nop

080009ac <__lesf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpsf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpsf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ce:	d011      	beq.n	80009f4 <__cmpsf2+0x40>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009d6:	bf18      	it	ne
 80009d8:	ea90 0f01 	teqne	r0, r1
 80009dc:	bf58      	it	pl
 80009de:	ebb2 0003 	subspl.w	r0, r2, r3
 80009e2:	bf88      	it	hi
 80009e4:	17c8      	asrhi	r0, r1, #31
 80009e6:	bf38      	it	cc
 80009e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009ec:	bf18      	it	ne
 80009ee:	f040 0001 	orrne.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009f8:	d102      	bne.n	8000a00 <__cmpsf2+0x4c>
 80009fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009fe:	d105      	bne.n	8000a0c <__cmpsf2+0x58>
 8000a00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a04:	d1e4      	bne.n	80009d0 <__cmpsf2+0x1c>
 8000a06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a0a:	d0e1      	beq.n	80009d0 <__cmpsf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cfrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4608      	mov	r0, r1
 8000a18:	4661      	mov	r1, ip
 8000a1a:	e7ff      	b.n	8000a1c <__aeabi_cfcmpeq>

08000a1c <__aeabi_cfcmpeq>:
 8000a1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a1e:	f7ff ffc9 	bl	80009b4 <__cmpsf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a2c <__aeabi_fcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cfcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_fcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cfcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_fcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cfcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_fcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffd2 	bl	8000a14 <__aeabi_cfrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_fcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc8 	bl	8000a14 <__aeabi_cfrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_uldivmod>:
 8000a90:	b953      	cbnz	r3, 8000aa8 <__aeabi_uldivmod+0x18>
 8000a92:	b94a      	cbnz	r2, 8000aa8 <__aeabi_uldivmod+0x18>
 8000a94:	2900      	cmp	r1, #0
 8000a96:	bf08      	it	eq
 8000a98:	2800      	cmpeq	r0, #0
 8000a9a:	bf1c      	itt	ne
 8000a9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa0:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa4:	f000 b98c 	b.w	8000dc0 <__aeabi_idiv0>
 8000aa8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab0:	f000 f806 	bl	8000ac0 <__udivmoddi4>
 8000ab4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000abc:	b004      	add	sp, #16
 8000abe:	4770      	bx	lr

08000ac0 <__udivmoddi4>:
 8000ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac4:	9d08      	ldr	r5, [sp, #32]
 8000ac6:	468e      	mov	lr, r1
 8000ac8:	4604      	mov	r4, r0
 8000aca:	4688      	mov	r8, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14a      	bne.n	8000b66 <__udivmoddi4+0xa6>
 8000ad0:	428a      	cmp	r2, r1
 8000ad2:	4617      	mov	r7, r2
 8000ad4:	d962      	bls.n	8000b9c <__udivmoddi4+0xdc>
 8000ad6:	fab2 f682 	clz	r6, r2
 8000ada:	b14e      	cbz	r6, 8000af0 <__udivmoddi4+0x30>
 8000adc:	f1c6 0320 	rsb	r3, r6, #32
 8000ae0:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	40b7      	lsls	r7, r6
 8000aea:	ea43 0808 	orr.w	r8, r3, r8
 8000aee:	40b4      	lsls	r4, r6
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b00:	fb01 f20c 	mul.w	r2, r1, ip
 8000b04:	0c23      	lsrs	r3, r4, #16
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d909      	bls.n	8000b22 <__udivmoddi4+0x62>
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b14:	f080 80eb 	bcs.w	8000cee <__udivmoddi4+0x22e>
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f240 80e8 	bls.w	8000cee <__udivmoddi4+0x22e>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	443b      	add	r3, r7
 8000b22:	1a9a      	subs	r2, r3, r2
 8000b24:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b28:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	b2a3      	uxth	r3, r4
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	459c      	cmp	ip, r3
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0x8e>
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b40:	f080 80d7 	bcs.w	8000cf2 <__udivmoddi4+0x232>
 8000b44:	459c      	cmp	ip, r3
 8000b46:	f240 80d4 	bls.w	8000cf2 <__udivmoddi4+0x232>
 8000b4a:	443b      	add	r3, r7
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b52:	2100      	movs	r1, #0
 8000b54:	eba3 030c 	sub.w	r3, r3, ip
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa2>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	40f3      	lsrs	r3, r6
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xb6>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb0>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa2>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x14c>
 8000b7e:	4573      	cmp	r3, lr
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xc8>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 8108 	bhi.w	8000d98 <__udivmoddi4+0x2d8>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	4690      	mov	r8, r2
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d0e5      	beq.n	8000b62 <__udivmoddi4+0xa2>
 8000b96:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9a:	e7e2      	b.n	8000b62 <__udivmoddi4+0xa2>
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f000 8091 	beq.w	8000cc4 <__udivmoddi4+0x204>
 8000ba2:	fab2 f682 	clz	r6, r2
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f040 80a5 	bne.w	8000cf6 <__udivmoddi4+0x236>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0c03      	lsrs	r3, r0, #16
 8000bb2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb6:	b280      	uxth	r0, r0
 8000bb8:	b2bc      	uxth	r4, r7
 8000bba:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bbe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bc6:	fb04 f20c 	mul.w	r2, r4, ip
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x11e>
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x11c>
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	f200 80e3 	bhi.w	8000da2 <__udivmoddi4+0x2e2>
 8000bdc:	46c4      	mov	ip, r8
 8000bde:	1a9b      	subs	r3, r3, r2
 8000be0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000be8:	fb02 f404 	mul.w	r4, r2, r4
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	d907      	bls.n	8000c04 <__udivmoddi4+0x144>
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x142>
 8000bfc:	429c      	cmp	r4, r3
 8000bfe:	f200 80cd 	bhi.w	8000d9c <__udivmoddi4+0x2dc>
 8000c02:	4602      	mov	r2, r0
 8000c04:	1b1b      	subs	r3, r3, r4
 8000c06:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x98>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa2e fa06 	lsr.w	sl, lr, r6
 8000c1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c20:	fbba f8f9 	udiv	r8, sl, r9
 8000c24:	fa0e fe01 	lsl.w	lr, lr, r1
 8000c28:	fa20 f306 	lsr.w	r3, r0, r6
 8000c2c:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c30:	fa1f fc87 	uxth.w	ip, r7
 8000c34:	ea43 030e 	orr.w	r3, r3, lr
 8000c38:	fa00 fe01 	lsl.w	lr, r0, r1
 8000c3c:	fb08 f00c 	mul.w	r0, r8, ip
 8000c40:	0c1c      	lsrs	r4, r3, #16
 8000c42:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c46:	42a0      	cmp	r0, r4
 8000c48:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x1a4>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 809e 	bcs.w	8000d94 <__udivmoddi4+0x2d4>
 8000c58:	42a0      	cmp	r0, r4
 8000c5a:	f240 809b 	bls.w	8000d94 <__udivmoddi4+0x2d4>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	1a24      	subs	r4, r4, r0
 8000c66:	b298      	uxth	r0, r3
 8000c68:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c6c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c74:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000c78:	45a4      	cmp	ip, r4
 8000c7a:	d909      	bls.n	8000c90 <__udivmoddi4+0x1d0>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c82:	f080 8085 	bcs.w	8000d90 <__udivmoddi4+0x2d0>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	f240 8082 	bls.w	8000d90 <__udivmoddi4+0x2d0>
 8000c8c:	3b02      	subs	r3, #2
 8000c8e:	443c      	add	r4, r7
 8000c90:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000c94:	eba4 040c 	sub.w	r4, r4, ip
 8000c98:	fba0 8c02 	umull	r8, ip, r0, r2
 8000c9c:	4564      	cmp	r4, ip
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	46e1      	mov	r9, ip
 8000ca2:	d364      	bcc.n	8000d6e <__udivmoddi4+0x2ae>
 8000ca4:	d061      	beq.n	8000d6a <__udivmoddi4+0x2aa>
 8000ca6:	b15d      	cbz	r5, 8000cc0 <__udivmoddi4+0x200>
 8000ca8:	ebbe 0203 	subs.w	r2, lr, r3
 8000cac:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb0:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb4:	fa22 f301 	lsr.w	r3, r2, r1
 8000cb8:	431e      	orrs	r6, r3
 8000cba:	40cc      	lsrs	r4, r1
 8000cbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e74e      	b.n	8000b62 <__udivmoddi4+0xa2>
 8000cc4:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cc8:	0c01      	lsrs	r1, r0, #16
 8000cca:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cce:	b280      	uxth	r0, r0
 8000cd0:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cda:	4638      	mov	r0, r7
 8000cdc:	463c      	mov	r4, r7
 8000cde:	46b8      	mov	r8, r7
 8000ce0:	46be      	mov	lr, r7
 8000ce2:	2620      	movs	r6, #32
 8000ce4:	eba2 0208 	sub.w	r2, r2, r8
 8000ce8:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cec:	e765      	b.n	8000bba <__udivmoddi4+0xfa>
 8000cee:	4601      	mov	r1, r0
 8000cf0:	e717      	b.n	8000b22 <__udivmoddi4+0x62>
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	e72b      	b.n	8000b4e <__udivmoddi4+0x8e>
 8000cf6:	f1c6 0120 	rsb	r1, r6, #32
 8000cfa:	fa2e fc01 	lsr.w	ip, lr, r1
 8000cfe:	40b7      	lsls	r7, r6
 8000d00:	fa0e fe06 	lsl.w	lr, lr, r6
 8000d04:	fa20 f101 	lsr.w	r1, r0, r1
 8000d08:	ea41 010e 	orr.w	r1, r1, lr
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fbbc f8fe 	udiv	r8, ip, lr
 8000d14:	b2bc      	uxth	r4, r7
 8000d16:	fb0e cc18 	mls	ip, lr, r8, ip
 8000d1a:	fb08 f904 	mul.w	r9, r8, r4
 8000d1e:	0c0a      	lsrs	r2, r1, #16
 8000d20:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000d24:	40b0      	lsls	r0, r6
 8000d26:	4591      	cmp	r9, r2
 8000d28:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	d93e      	bls.n	8000dae <__udivmoddi4+0x2ee>
 8000d30:	18ba      	adds	r2, r7, r2
 8000d32:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d36:	d201      	bcs.n	8000d3c <__udivmoddi4+0x27c>
 8000d38:	4591      	cmp	r9, r2
 8000d3a:	d81f      	bhi.n	8000d7c <__udivmoddi4+0x2bc>
 8000d3c:	eba2 0209 	sub.w	r2, r2, r9
 8000d40:	fbb2 f9fe 	udiv	r9, r2, lr
 8000d44:	fb09 f804 	mul.w	r8, r9, r4
 8000d48:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000d4c:	b28a      	uxth	r2, r1
 8000d4e:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000d52:	4542      	cmp	r2, r8
 8000d54:	d229      	bcs.n	8000daa <__udivmoddi4+0x2ea>
 8000d56:	18ba      	adds	r2, r7, r2
 8000d58:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5c:	d2c2      	bcs.n	8000ce4 <__udivmoddi4+0x224>
 8000d5e:	4542      	cmp	r2, r8
 8000d60:	d2c0      	bcs.n	8000ce4 <__udivmoddi4+0x224>
 8000d62:	f1a9 0102 	sub.w	r1, r9, #2
 8000d66:	443a      	add	r2, r7
 8000d68:	e7bc      	b.n	8000ce4 <__udivmoddi4+0x224>
 8000d6a:	45c6      	cmp	lr, r8
 8000d6c:	d29b      	bcs.n	8000ca6 <__udivmoddi4+0x1e6>
 8000d6e:	ebb8 0302 	subs.w	r3, r8, r2
 8000d72:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d76:	3801      	subs	r0, #1
 8000d78:	46e1      	mov	r9, ip
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1e6>
 8000d7c:	eba7 0909 	sub.w	r9, r7, r9
 8000d80:	444a      	add	r2, r9
 8000d82:	fbb2 f9fe 	udiv	r9, r2, lr
 8000d86:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d8a:	fb09 f804 	mul.w	r8, r9, r4
 8000d8e:	e7db      	b.n	8000d48 <__udivmoddi4+0x288>
 8000d90:	4603      	mov	r3, r0
 8000d92:	e77d      	b.n	8000c90 <__udivmoddi4+0x1d0>
 8000d94:	46d0      	mov	r8, sl
 8000d96:	e765      	b.n	8000c64 <__udivmoddi4+0x1a4>
 8000d98:	4608      	mov	r0, r1
 8000d9a:	e6fa      	b.n	8000b92 <__udivmoddi4+0xd2>
 8000d9c:	443b      	add	r3, r7
 8000d9e:	3a02      	subs	r2, #2
 8000da0:	e730      	b.n	8000c04 <__udivmoddi4+0x144>
 8000da2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da6:	443b      	add	r3, r7
 8000da8:	e719      	b.n	8000bde <__udivmoddi4+0x11e>
 8000daa:	4649      	mov	r1, r9
 8000dac:	e79a      	b.n	8000ce4 <__udivmoddi4+0x224>
 8000dae:	eba2 0209 	sub.w	r2, r2, r9
 8000db2:	fbb2 f9fe 	udiv	r9, r2, lr
 8000db6:	46c4      	mov	ip, r8
 8000db8:	fb09 f804 	mul.w	r8, r9, r4
 8000dbc:	e7c4      	b.n	8000d48 <__udivmoddi4+0x288>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f003 ffed 	bl	8004dac <HAL_ADCEx_Calibration_Start>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <ADC_Init+0x18>
    {
        Error_Handler();
 8000dd8:	f001 f9d4 	bl	8002184 <Error_Handler>
    }
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b08b      	sub	sp, #44	@ 0x2c
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	617b      	str	r3, [r7, #20]

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000e02:	4b88      	ldr	r3, [pc, #544]	@ (8001024 <ADC_ReadAllChannels+0x240>)
 8000e04:	623b      	str	r3, [r7, #32]
    const float DRY_RUN_THRESHOLD = .0f; // Threshold for dry run detection
 8000e06:	f04f 0300 	mov.w	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
    const float GROUND_THRESHOLD = 0.1f; // Threshold to consider as ground (0V)
 8000e0c:	4b86      	ldr	r3, [pc, #536]	@ (8001028 <ADC_ReadAllChannels+0x244>)
 8000e0e:	61bb      	str	r3, [r7, #24]

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e16:	e0fb      	b.n	8001010 <ADC_ReadAllChannels+0x22c>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 8000e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e1c:	4a83      	ldr	r2, [pc, #524]	@ (800102c <ADC_ReadAllChannels+0x248>)
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	60fb      	str	r3, [r7, #12]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f003 fe2a 	bl	8004a84 <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f003 fc67 	bl	8004704 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000e36:	210a      	movs	r1, #10
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f003 fd11 	bl	8004860 <HAL_ADC_PollForConversion>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f040 80c9 	bne.w	8000fd8 <ADC_ReadAllChannels+0x1f4>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 8000e46:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f003 fe0e 	bl	8004a6c <HAL_ADC_GetValue>
 8000e50:	4602      	mov	r2, r0
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 8000e58:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fbf6 	bl	8000654 <__aeabi_ui2f>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4971      	ldr	r1, [pc, #452]	@ (8001030 <ADC_ReadAllChannels+0x24c>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fc49 	bl	8000704 <__aeabi_fmul>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000e78:	496e      	ldr	r1, [pc, #440]	@ (8001034 <ADC_ReadAllChannels+0x250>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fcf6 	bl	800086c <__aeabi_fdiv>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4619      	mov	r1, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	1da2      	adds	r2, r4, #6
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 8000e8c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	3206      	adds	r2, #6
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4614      	mov	r4, r2
 8000e9c:	4966      	ldr	r1, [pc, #408]	@ (8001038 <ADC_ReadAllChannels+0x254>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fde2 	bl	8000a68 <__aeabi_fcmpge>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <ADC_ReadAllChannels+0xca>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	461c      	mov	r4, r3
 8000eae:	b2e2      	uxtb	r2, r4
 8000eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	460a      	mov	r2, r1
 8000ebc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check if the voltage is close to ground
            if (data->voltages[i] < GROUND_THRESHOLD)
 8000ec0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	3206      	adds	r2, #6
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	69b8      	ldr	r0, [r7, #24]
 8000ed0:	f7ff fdd4 	bl	8000a7c <__aeabi_fcmpgt>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00d      	beq.n	8000ef6 <ADC_ReadAllChannels+0x112>
            {
                data->rawValues[i] = 0; // Set raw value to 0
 8000eda:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                data->voltages[i] = 0.0f; // Set voltage to 0.0V
 8000ee6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	3206      	adds	r2, #6
 8000eee:	f04f 0100 	mov.w	r1, #0
 8000ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 8000ef6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3206      	adds	r2, #6
 8000efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f02:	4619      	mov	r1, r3
 8000f04:	6a38      	ldr	r0, [r7, #32]
 8000f06:	f7ff fda5 	bl	8000a54 <__aeabi_fcmple>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d04d      	beq.n	8000fac <ADC_ReadAllChannels+0x1c8>
            {
                switch (i)
 8000f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d875      	bhi.n	8001004 <ADC_ReadAllChannels+0x220>
 8000f18:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <ADC_ReadAllChannels+0x13c>)
 8000f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1e:	bf00      	nop
 8000f20:	08000f35 	.word	0x08000f35
 8000f24:	08000f4d 	.word	0x08000f4d
 8000f28:	08000f65 	.word	0x08000f65
 8000f2c:	08000f7d 	.word	0x08000f7d
 8000f30:	08000f95 	.word	0x08000f95
                {
                    case 0: // IN0
                        sprintf(dataPacketTx, "@10W#"); // Use sprintf to format the string
 8000f34:	4941      	ldr	r1, [pc, #260]	@ (800103c <ADC_ReadAllChannels+0x258>)
 8000f36:	4842      	ldr	r0, [pc, #264]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f38:	f007 faae 	bl	8008498 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000f3c:	4940      	ldr	r1, [pc, #256]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f3e:	4841      	ldr	r0, [pc, #260]	@ (8001044 <ADC_ReadAllChannels+0x260>)
 8000f40:	f003 fa06 	bl	8004350 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000f44:	4b40      	ldr	r3, [pc, #256]	@ (8001048 <ADC_ReadAllChannels+0x264>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
                        break;
 8000f4a:	e05c      	b.n	8001006 <ADC_ReadAllChannels+0x222>
                    case 1: // IN1
                        sprintf(dataPacketTx, "@30W#");
 8000f4c:	493f      	ldr	r1, [pc, #252]	@ (800104c <ADC_ReadAllChannels+0x268>)
 8000f4e:	483c      	ldr	r0, [pc, #240]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f50:	f007 faa2 	bl	8008498 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000f54:	493a      	ldr	r1, [pc, #232]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f56:	483b      	ldr	r0, [pc, #236]	@ (8001044 <ADC_ReadAllChannels+0x260>)
 8000f58:	f003 f9fa 	bl	8004350 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001048 <ADC_ReadAllChannels+0x264>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
                        break;
 8000f62:	e050      	b.n	8001006 <ADC_ReadAllChannels+0x222>
                    case 2: // IN2
                        sprintf(dataPacketTx, "@70W#");
 8000f64:	493a      	ldr	r1, [pc, #232]	@ (8001050 <ADC_ReadAllChannels+0x26c>)
 8000f66:	4836      	ldr	r0, [pc, #216]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f68:	f007 fa96 	bl	8008498 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000f6c:	4934      	ldr	r1, [pc, #208]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f6e:	4835      	ldr	r0, [pc, #212]	@ (8001044 <ADC_ReadAllChannels+0x260>)
 8000f70:	f003 f9ee 	bl	8004350 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000f74:	4b34      	ldr	r3, [pc, #208]	@ (8001048 <ADC_ReadAllChannels+0x264>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
                        break;
 8000f7a:	e044      	b.n	8001006 <ADC_ReadAllChannels+0x222>
                    case 3: // IN3
                        sprintf(dataPacketTx, "@1:W#");
 8000f7c:	4935      	ldr	r1, [pc, #212]	@ (8001054 <ADC_ReadAllChannels+0x270>)
 8000f7e:	4830      	ldr	r0, [pc, #192]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f80:	f007 fa8a 	bl	8008498 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000f84:	492e      	ldr	r1, [pc, #184]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f86:	482f      	ldr	r0, [pc, #188]	@ (8001044 <ADC_ReadAllChannels+0x260>)
 8000f88:	f003 f9e2 	bl	8004350 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001048 <ADC_ReadAllChannels+0x264>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
                        break;
 8000f92:	e038      	b.n	8001006 <ADC_ReadAllChannels+0x222>
                    case 4: // IN4
                        sprintf(dataPacketTx, "@DRY#");
 8000f94:	4930      	ldr	r1, [pc, #192]	@ (8001058 <ADC_ReadAllChannels+0x274>)
 8000f96:	482a      	ldr	r0, [pc, #168]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f98:	f007 fa7e 	bl	8008498 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000f9c:	4928      	ldr	r1, [pc, #160]	@ (8001040 <ADC_ReadAllChannels+0x25c>)
 8000f9e:	4829      	ldr	r0, [pc, #164]	@ (8001044 <ADC_ReadAllChannels+0x260>)
 8000fa0:	f003 f9d6 	bl	8004350 <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <ADC_ReadAllChannels+0x264>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
                        break;
 8000faa:	e02c      	b.n	8001006 <ADC_ReadAllChannels+0x222>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 8000fac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3206      	adds	r2, #6
 8000fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	69f8      	ldr	r0, [r7, #28]
 8000fbc:	f7ff fd5e 	bl	8000a7c <__aeabi_fcmpgt>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d01f      	beq.n	8001006 <ADC_ReadAllChannels+0x222>
 8000fc6:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <ADC_ReadAllChannels+0x264>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d11a      	bne.n	8001006 <ADC_ReadAllChannels+0x222>
            {
                // If the voltage is below the dry run threshold and the motor is on
                // This part was commented out in the original, keeping it commented for consistency
                // sprintf(dataPacketTx, "@MT0#");
                // UART_TransmitString(&huart1, dataPacketTx);
                motorStatus = 0; // Set motor status to off
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <ADC_ReadAllChannels+0x264>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e016      	b.n	8001006 <ADC_ReadAllChannels+0x222>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 8000fd8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 8000fe4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	3206      	adds	r2, #6
 8000fec:	f04f 0100 	mov.w	r1, #0
 8000ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 8000ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8001002:	e000      	b.n	8001006 <ADC_ReadAllChannels+0x222>
                        break;
 8001004:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800100a:	3301      	adds	r3, #1
 800100c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001014:	2b05      	cmp	r3, #5
 8001016:	f67f aeff 	bls.w	8000e18 <ADC_ReadAllChannels+0x34>
        }
    }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	372c      	adds	r7, #44	@ 0x2c
 8001020:	46bd      	mov	sp, r7
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	40400000 	.word	0x40400000
 8001028:	3dcccccd 	.word	0x3dcccccd
 800102c:	08009f88 	.word	0x08009f88
 8001030:	40533333 	.word	0x40533333
 8001034:	457ff000 	.word	0x457ff000
 8001038:	404ccccd 	.word	0x404ccccd
 800103c:	080096b0 	.word	0x080096b0
 8001040:	200000dc 	.word	0x200000dc
 8001044:	20000220 	.word	0x20000220
 8001048:	200002e0 	.word	0x200002e0
 800104c:	080096b8 	.word	0x080096b8
 8001050:	080096c0 	.word	0x080096c0
 8001054:	080096c8 	.word	0x080096c8
 8001058:	080096d0 	.word	0x080096d0

0800105c <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 800105c:	b490      	push	{r4, r7}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4603      	mov	r3, r0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	717b      	strb	r3, [r7, #5]
 8001076:	4613      	mov	r3, r2
 8001078:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	f023 030f 	bic.w	r3, r3, #15
 8001086:	b25a      	sxtb	r2, r3
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	4313      	orrs	r3, r2
 800108e:	b25b      	sxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <map_nibble_ctrl+0x40>
 8001098:	2208      	movs	r2, #8
 800109a:	e000      	b.n	800109e <map_nibble_ctrl+0x42>
 800109c:	2200      	movs	r2, #0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 80010a8:	797b      	ldrb	r3, [r7, #5]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <map_nibble_ctrl+0x56>
 80010ae:	2204      	movs	r2, #4
 80010b0:	e000      	b.n	80010b4 <map_nibble_ctrl+0x58>
 80010b2:	2200      	movs	r2, #0
 80010b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	b25a      	sxtb	r2, r3
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	73fb      	strb	r3, [r7, #15]
    return b;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc90      	pop	{r4, r7}
 80010e0:	4770      	bx	lr
	...

080010e4 <expander_write>:

static void expander_write(uint8_t data)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	2364      	movs	r3, #100	@ 0x64
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	214e      	movs	r1, #78	@ 0x4e
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <expander_write+0x24>)
 80010fa:	f004 faf9 	bl	80056f0 <HAL_I2C_Master_Transmit>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000160 	.word	0x20000160

0800110c <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffe0 	bl	80010e4 <expander_write>
    HAL_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f003 f9f1 	bl	800450c <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f023 0304 	bic.w	r3, r3, #4
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ffd6 	bl	80010e4 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f003 f9e7 	bl	800450c <HAL_Delay>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	460b      	mov	r3, r1
 8001152:	71bb      	strb	r3, [r7, #6]
 8001154:	4613      	mov	r3, r2
 8001156:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	79b9      	ldrb	r1, [r7, #6]
 800115c:	79f8      	ldrb	r0, [r7, #7]
 800115e:	2201      	movs	r2, #1
 8001160:	f7ff ff7c 	bl	800105c <map_nibble_ctrl>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffba 	bl	80010e4 <expander_write>
    pulse_enable(x);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ffca 	bl	800110c <pulse_enable>
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8001186:	2308      	movs	r3, #8
 8001188:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ffa9 	bl	80010e4 <expander_write>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f023 030f 	bic.w	r3, r3, #15
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2201      	movs	r2, #1
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffc8 	bl	8001146 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2201      	movs	r2, #1
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffc0 	bl	8001146 <write4bits>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f023 030f 	bic.w	r3, r3, #15
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2201      	movs	r2, #1
 80011e2:	2101      	movs	r1, #1
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ffae 	bl	8001146 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2201      	movs	r2, #1
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ffa6 	bl	8001146 <write4bits>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <lcd_clear>:

void lcd_clear(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff ffc7 	bl	800119a <lcd_send_cmd>
    HAL_Delay(2);
 800120c:	2002      	movs	r0, #2
 800120e:	f003 f97d 	bl	800450c <HAL_Delay>
    lcd_send_cmd(0x80);
 8001212:	2080      	movs	r0, #128	@ 0x80
 8001214:	f7ff ffc1 	bl	800119a <lcd_send_cmd>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d901      	bls.n	8001236 <lcd_put_cur+0x1a>
 8001232:	2301      	movs	r3, #1
 8001234:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4a08      	ldr	r2, [pc, #32]	@ (800125c <lcd_put_cur+0x40>)
 800123a:	5cd2      	ldrb	r2, [r2, r3]
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	4413      	add	r3, r2
 8001240:	b2db      	uxtb	r3, r3
 8001242:	b25b      	sxtb	r3, r3
 8001244:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001248:	b25b      	sxtb	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ffa4 	bl	800119a <lcd_send_cmd>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	08009fa0 	.word	0x08009fa0

08001260 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8001268:	e006      	b.n	8001278 <lcd_send_string+0x18>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ffab 	bl	80011ce <lcd_send_data>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f4      	bne.n	800126a <lcd_send_string+0xa>
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <lcd_init>:

void lcd_init(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 800128e:	2032      	movs	r0, #50	@ 0x32
 8001290:	f003 f93c 	bl	800450c <HAL_Delay>
    lcd_backlight_on();
 8001294:	f7ff ff74 	bl	8001180 <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8001298:	2201      	movs	r2, #1
 800129a:	2100      	movs	r1, #0
 800129c:	2030      	movs	r0, #48	@ 0x30
 800129e:	f7ff ff52 	bl	8001146 <write4bits>
 80012a2:	2005      	movs	r0, #5
 80012a4:	f003 f932 	bl	800450c <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2100      	movs	r1, #0
 80012ac:	2030      	movs	r0, #48	@ 0x30
 80012ae:	f7ff ff4a 	bl	8001146 <write4bits>
 80012b2:	2001      	movs	r0, #1
 80012b4:	f003 f92a 	bl	800450c <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2100      	movs	r1, #0
 80012bc:	2030      	movs	r0, #48	@ 0x30
 80012be:	f7ff ff42 	bl	8001146 <write4bits>
 80012c2:	2001      	movs	r0, #1
 80012c4:	f003 f922 	bl	800450c <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2100      	movs	r1, #0
 80012cc:	2020      	movs	r0, #32
 80012ce:	f7ff ff3a 	bl	8001146 <write4bits>
 80012d2:	2001      	movs	r0, #1
 80012d4:	f003 f91a 	bl	800450c <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 80012d8:	2028      	movs	r0, #40	@ 0x28
 80012da:	f7ff ff5e 	bl	800119a <lcd_send_cmd>
 80012de:	2001      	movs	r0, #1
 80012e0:	f003 f914 	bl	800450c <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 80012e4:	2008      	movs	r0, #8
 80012e6:	f7ff ff58 	bl	800119a <lcd_send_cmd>
 80012ea:	2001      	movs	r0, #1
 80012ec:	f003 f90e 	bl	800450c <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 80012f0:	f7ff ff87 	bl	8001202 <lcd_clear>
 80012f4:	2002      	movs	r0, #2
 80012f6:	f003 f909 	bl	800450c <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 80012fa:	2006      	movs	r0, #6
 80012fc:	f7ff ff4d 	bl	800119a <lcd_send_cmd>
 8001300:	2001      	movs	r0, #1
 8001302:	f003 f903 	bl	800450c <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8001306:	200c      	movs	r0, #12
 8001308:	f7ff ff47 	bl	800119a <lcd_send_cmd>
 800130c:	2001      	movs	r0, #1
 800130e:	f003 f8fd 	bl	800450c <HAL_Delay>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
 800131a:	f003 f8ed 	bl	80044f8 <HAL_GetTick>
 800131e:	4603      	mov	r3, r0
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}

08001324 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	460a      	mov	r2, r1
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	4613      	mov	r3, r2
 8001332:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <led_write+0x30>)
 8001338:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <led_write+0x34>)
 8001340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	4619      	mov	r1, r3
 8001348:	f004 f85d 	bl	8005406 <HAL_GPIO_WritePin>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000010 	.word	0x20000010

0800135c <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2101      	movs	r1, #1
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffda 	bl	8001324 <led_write>
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ffcc 	bl	8001324 <led_write>
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <LED_Task>:
    }
}

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 800139a:	f7ff ffbc 	bl	8001316 <now_ms>
 800139e:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	e064      	b.n	8001470 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 80013a6:	4a36      	ldr	r2, [pc, #216]	@ (8001480 <LED_Task+0xec>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <LED_Task+0x24>
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d00b      	beq.n	80013ce <LED_Task+0x3a>
 80013b6:	e015      	b.n	80013e4 <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 80013b8:	4a32      	ldr	r2, [pc, #200]	@ (8001484 <LED_Task+0xf0>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ffd6 	bl	8001378 <led_off>
            break;
 80013cc:	e04d      	b.n	800146a <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 80013ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001484 <LED_Task+0xf0>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ffbd 	bl	800135c <led_on>
            break;
 80013e2:	e042      	b.n	800146a <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 80013e4:	4a26      	ldr	r2, [pc, #152]	@ (8001480 <LED_Task+0xec>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	885b      	ldrh	r3, [r3, #2]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d106      	bne.n	8001400 <LED_Task+0x6c>
 80013f2:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <LED_Task+0xec>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013fe:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 8001400:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <LED_Task+0xf4>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	dc2b      	bgt.n	8001468 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <LED_Task+0xf0>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4619      	mov	r1, r3
 8001424:	4a17      	ldr	r2, [pc, #92]	@ (8001484 <LED_Task+0xf0>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	460a      	mov	r2, r1
 800142c:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 800142e:	4a15      	ldr	r2, [pc, #84]	@ (8001484 <LED_Task+0xf0>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <LED_Task+0xb2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff8c 	bl	800135c <led_on>
 8001444:	e004      	b.n	8001450 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff94 	bl	8001378 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001450:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <LED_Task+0xec>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	885b      	ldrh	r3, [r3, #2]
 800145a:	461a      	mov	r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	441a      	add	r2, r3
 8001460:	4909      	ldr	r1, [pc, #36]	@ (8001488 <LED_Task+0xf4>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 8001468:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3301      	adds	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b03      	cmp	r3, #3
 8001474:	dd97      	ble.n	80013a6 <LED_Task+0x12>
        }
    }
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200000e8 	.word	0x200000e8
 8001484:	200000f8 	.word	0x200000f8
 8001488:	200000fc 	.word	0x200000fc

0800148c <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e00d      	b.n	80014b4 <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <LED_ClearAllIntents+0x3c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2100      	movs	r1, #0
 800149e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 80014a2:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <LED_ClearAllIntents+0x3c>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	2200      	movs	r2, #0
 80014ac:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3301      	adds	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	ddee      	ble.n	8001498 <LED_ClearAllIntents+0xc>
    }
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200000e8 	.word	0x200000e8

080014cc <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	460b      	mov	r3, r1
 80014d8:	71bb      	strb	r3, [r7, #6]
 80014da:	4613      	mov	r3, r2
 80014dc:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d80b      	bhi.n	80014fc <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4908      	ldr	r1, [pc, #32]	@ (8001508 <LED_SetIntent+0x3c>)
 80014e8:	79ba      	ldrb	r2, [r7, #6]
 80014ea:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <LED_SetIntent+0x3c>)
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	88ba      	ldrh	r2, [r7, #4]
 80014f8:	805a      	strh	r2, [r3, #2]
 80014fa:	e000      	b.n	80014fe <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80014fc:	bf00      	nop
}
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200000e8 	.word	0x200000e8

0800150c <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <LoRa_WriteReg>:


//uint8_t rxBuffer[256]; // Buffer for received data

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	460a      	mov	r2, r1
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	4613      	mov	r3, r2
 8001526:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800152e:	b2db      	uxtb	r3, r3
 8001530:	733b      	strb	r3, [r7, #12]
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800153c:	480a      	ldr	r0, [pc, #40]	@ (8001568 <LoRa_WriteReg+0x50>)
 800153e:	f003 ff62 	bl	8005406 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001542:	f107 010c 	add.w	r1, r7, #12
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	2202      	movs	r2, #2
 800154c:	4807      	ldr	r0, [pc, #28]	@ (800156c <LoRa_WriteReg+0x54>)
 800154e:	f005 ff4e 	bl	80073ee <HAL_SPI_Transmit>
    NSS_HIGH();
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001558:	4803      	ldr	r0, [pc, #12]	@ (8001568 <LoRa_WriteReg+0x50>)
 800155a:	f003 ff54 	bl	8005406 <HAL_GPIO_WritePin>
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40010800 	.word	0x40010800
 800156c:	200001c8 	.word	0x200001c8

08001570 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800158e:	480f      	ldr	r0, [pc, #60]	@ (80015cc <LoRa_ReadReg+0x5c>)
 8001590:	f003 ff39 	bl	8005406 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8001594:	f107 010f 	add.w	r1, r7, #15
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	2201      	movs	r2, #1
 800159e:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <LoRa_ReadReg+0x60>)
 80015a0:	f005 ff25 	bl	80073ee <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 80015a4:	f107 010e 	add.w	r1, r7, #14
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	2201      	movs	r2, #1
 80015ae:	4808      	ldr	r0, [pc, #32]	@ (80015d0 <LoRa_ReadReg+0x60>)
 80015b0:	f006 f861 	bl	8007676 <HAL_SPI_Receive>
    NSS_HIGH();
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015ba:	4804      	ldr	r0, [pc, #16]	@ (80015cc <LoRa_ReadReg+0x5c>)
 80015bc:	f003 ff23 	bl	8005406 <HAL_GPIO_WritePin>
    return rx;
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40010800 	.word	0x40010800
 80015d0:	200001c8 	.word	0x200001c8

080015d4 <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015f4:	480e      	ldr	r0, [pc, #56]	@ (8001630 <LoRa_WriteBuffer+0x5c>)
 80015f6:	f003 ff06 	bl	8005406 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 80015fa:	f107 010f 	add.w	r1, r7, #15
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	2201      	movs	r2, #1
 8001604:	480b      	ldr	r0, [pc, #44]	@ (8001634 <LoRa_WriteBuffer+0x60>)
 8001606:	f005 fef2 	bl	80073ee <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 800160a:	79bb      	ldrb	r3, [r7, #6]
 800160c:	b29a      	uxth	r2, r3
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	4807      	ldr	r0, [pc, #28]	@ (8001634 <LoRa_WriteBuffer+0x60>)
 8001616:	f005 feea 	bl	80073ee <HAL_SPI_Transmit>
    NSS_HIGH();
 800161a:	2201      	movs	r2, #1
 800161c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <LoRa_WriteBuffer+0x5c>)
 8001622:	f003 fef0 	bl	8005406 <HAL_GPIO_WritePin>
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40010800 	.word	0x40010800
 8001634:	200001c8 	.word	0x200001c8

08001638 <LoRa_ReadBuffer>:

void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	4613      	mov	r3, r2
 8001646:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr & 0x7F;
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800164e:	b2db      	uxtb	r3, r3
 8001650:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001658:	480e      	ldr	r0, [pc, #56]	@ (8001694 <LoRa_ReadBuffer+0x5c>)
 800165a:	f003 fed4 	bl	8005406 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 800165e:	f107 010f 	add.w	r1, r7, #15
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	2201      	movs	r2, #1
 8001668:	480b      	ldr	r0, [pc, #44]	@ (8001698 <LoRa_ReadBuffer+0x60>)
 800166a:	f005 fec0 	bl	80073ee <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	b29a      	uxth	r2, r3
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	4807      	ldr	r0, [pc, #28]	@ (8001698 <LoRa_ReadBuffer+0x60>)
 800167a:	f005 fffc 	bl	8007676 <HAL_SPI_Receive>
    NSS_HIGH();
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <LoRa_ReadBuffer+0x5c>)
 8001686:	f003 febe 	bl	8005406 <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40010800 	.word	0x40010800
 8001698:	200001c8 	.word	0x200001c8

0800169c <LoRa_Reset>:

/* --- reset --- */
void LoRa_Reset(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2140      	movs	r1, #64	@ 0x40
 80016a4:	4807      	ldr	r0, [pc, #28]	@ (80016c4 <LoRa_Reset+0x28>)
 80016a6:	f003 feae 	bl	8005406 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80016aa:	2002      	movs	r0, #2
 80016ac:	f002 ff2e 	bl	800450c <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2140      	movs	r1, #64	@ 0x40
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <LoRa_Reset+0x28>)
 80016b6:	f003 fea6 	bl	8005406 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80016ba:	200a      	movs	r0, #10
 80016bc:	f002 ff26 	bl	800450c <HAL_Delay>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40010c00 	.word	0x40010c00

080016c8 <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	2000      	movs	r0, #0
 80016d4:	460a      	mov	r2, r1
 80016d6:	4603      	mov	r3, r0
 80016d8:	0b55      	lsrs	r5, r2, #13
 80016da:	04d4      	lsls	r4, r2, #19
 80016dc:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <LoRa_SetFrequency+0x78>)
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7ff f9d3 	bl	8000a90 <__aeabi_uldivmod>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 80016f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	0c02      	lsrs	r2, r0, #16
 8001700:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001704:	0c0b      	lsrs	r3, r1, #16
 8001706:	b2d3      	uxtb	r3, r2
 8001708:	4619      	mov	r1, r3
 800170a:	2006      	movs	r0, #6
 800170c:	f7ff ff04 	bl	8001518 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8001710:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	0a02      	lsrs	r2, r0, #8
 800171e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001722:	0a0b      	lsrs	r3, r1, #8
 8001724:	b2d3      	uxtb	r3, r2
 8001726:	4619      	mov	r1, r3
 8001728:	2007      	movs	r0, #7
 800172a:	f7ff fef5 	bl	8001518 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 800172e:	7a3b      	ldrb	r3, [r7, #8]
 8001730:	4619      	mov	r1, r3
 8001732:	2008      	movs	r0, #8
 8001734:	f7ff fef0 	bl	8001518 <LoRa_WriteReg>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bdb0      	pop	{r4, r5, r7, pc}
 8001740:	01e84800 	.word	0x01e84800

08001744 <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    LoRa_Reset();
 8001748:	f7ff ffa8 	bl	800169c <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 800174c:	2100      	movs	r1, #0
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff fee2 	bl	8001518 <LoRa_WriteReg>
    HAL_Delay(5);
 8001754:	2005      	movs	r0, #5
 8001756:	f002 fed9 	bl	800450c <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff fedb 	bl	8001518 <LoRa_WriteReg>
    HAL_Delay(5);
 8001762:	2005      	movs	r0, #5
 8001764:	f002 fed2 	bl	800450c <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(LORA_FREQUENCY);
 8001768:	4818      	ldr	r0, [pc, #96]	@ (80017cc <LoRa_Init+0x88>)
 800176a:	f7ff ffad 	bl	80016c8 <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 800176e:	218f      	movs	r1, #143	@ 0x8f
 8001770:	2009      	movs	r0, #9
 8001772:	f7ff fed1 	bl	8001518 <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 8001776:	2187      	movs	r1, #135	@ 0x87
 8001778:	204d      	movs	r0, #77	@ 0x4d
 800177a:	f7ff fecd 	bl	8001518 <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 800177e:	2123      	movs	r1, #35	@ 0x23
 8001780:	200c      	movs	r0, #12
 8001782:	f7ff fec9 	bl	8001518 <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 8001786:	2172      	movs	r1, #114	@ 0x72
 8001788:	201d      	movs	r0, #29
 800178a:	f7ff fec5 	bl	8001518 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 800178e:	2174      	movs	r1, #116	@ 0x74
 8001790:	201e      	movs	r0, #30
 8001792:	f7ff fec1 	bl	8001518 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 8001796:	2104      	movs	r1, #4
 8001798:	2026      	movs	r0, #38	@ 0x26
 800179a:	f7ff febd 	bl	8001518 <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 800179e:	2100      	movs	r1, #0
 80017a0:	2020      	movs	r0, #32
 80017a2:	f7ff feb9 	bl	8001518 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80017a6:	2108      	movs	r1, #8
 80017a8:	2021      	movs	r0, #33	@ 0x21
 80017aa:	f7ff feb5 	bl	8001518 <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 80017ae:	2122      	movs	r1, #34	@ 0x22
 80017b0:	2039      	movs	r0, #57	@ 0x39
 80017b2:	f7ff feb1 	bl	8001518 <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 80017b6:	2100      	movs	r1, #0
 80017b8:	2040      	movs	r0, #64	@ 0x40
 80017ba:	f7ff fead 	bl	8001518 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 80017be:	21ff      	movs	r1, #255	@ 0xff
 80017c0:	2012      	movs	r0, #18
 80017c2:	f7ff fea9 	bl	8001518 <LoRa_WriteReg>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	19cf0e40 	.word	0x19cf0e40

080017d0 <LoRa_SetStandby>:

/**
  * @brief Sets the LoRa module to Standby mode.
  */
void LoRa_SetStandby(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x81); // Standby mode
 80017d4:	2181      	movs	r1, #129	@ 0x81
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff fe9e 	bl	8001518 <LoRa_WriteReg>
    HAL_Delay(2);
 80017dc:	2002      	movs	r0, #2
 80017de:	f002 fe95 	bl	800450c <HAL_Delay>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <LoRa_SetRxContinuous>:

/**
  * @brief Sets the LoRa module to Continuous Receive mode.
  */
void LoRa_SetRxContinuous(void) {
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x85); // Continuous RX mode
 80017ea:	2185      	movs	r1, #133	@ 0x85
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fe93 	bl	8001518 <LoRa_WriteReg>
    HAL_Delay(2);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f002 fe8a 	bl	800450c <HAL_Delay>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <LoRa_SetTx>:

/**
  * @brief Sets the LoRa module to Transmit mode.
  */
void LoRa_SetTx(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x83); // TX mode
 8001800:	2183      	movs	r1, #131	@ 0x83
 8001802:	2001      	movs	r0, #1
 8001804:	f7ff fe88 	bl	8001518 <LoRa_WriteReg>
    HAL_Delay(2);
 8001808:	2002      	movs	r0, #2
 800180a:	f002 fe7f 	bl	800450c <HAL_Delay>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}

08001812 <LoRa_SendPacket>:

/* --- send packet, poll TxDone, return to RX --- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	70fb      	strb	r3, [r7, #3]
    LoRa_SetStandby(); // Go to Standby before TX
 800181e:	f7ff ffd7 	bl	80017d0 <LoRa_SetStandby>

    /* Reset FIFO pointers */
    LoRa_WriteReg(0x0E, 0x00);
 8001822:	2100      	movs	r1, #0
 8001824:	200e      	movs	r0, #14
 8001826:	f7ff fe77 	bl	8001518 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 800182a:	2100      	movs	r1, #0
 800182c:	200d      	movs	r0, #13
 800182e:	f7ff fe73 	bl	8001518 <LoRa_WriteReg>

    /* Write payload */
    LoRa_WriteBuffer(0x00, buffer, size);
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	461a      	mov	r2, r3
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fecb 	bl	80015d4 <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	4619      	mov	r1, r3
 8001842:	2022      	movs	r0, #34	@ 0x22
 8001844:	f7ff fe68 	bl	8001518 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 8001848:	21ff      	movs	r1, #255	@ 0xff
 800184a:	2012      	movs	r0, #18
 800184c:	f7ff fe64 	bl	8001518 <LoRa_WriteReg>

    LoRa_SetTx(); // Enter TX
 8001850:	f7ff ffd4 	bl	80017fc <LoRa_SetTx>

    /* Wait for TxDone */
    uint32_t t0 = HAL_GetTick();
 8001854:	f002 fe50 	bl	80044f8 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 800185a:	e00a      	b.n	8001872 <LoRa_SendPacket+0x60>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 800185c:	f002 fe4c 	bl	80044f8 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800186a:	d80b      	bhi.n	8001884 <LoRa_SendPacket+0x72>
        HAL_Delay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f002 fe4d 	bl	800450c <HAL_Delay>
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 8001872:	2012      	movs	r0, #18
 8001874:	f7ff fe7c 	bl	8001570 <LoRa_ReadReg>
 8001878:	4603      	mov	r3, r0
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ec      	beq.n	800185c <LoRa_SendPacket+0x4a>
 8001882:	e000      	b.n	8001886 <LoRa_SendPacket+0x74>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 8001884:	bf00      	nop
    }

    /* Clear TxDone (if set) */
    LoRa_WriteReg(0x12, 0x08);
 8001886:	2108      	movs	r1, #8
 8001888:	2012      	movs	r0, #18
 800188a:	f7ff fe45 	bl	8001518 <LoRa_WriteReg>

    LoRa_SetRxContinuous(); // Back to RX after TX
 800188e:	f7ff ffaa 	bl	80017e6 <LoRa_SetRxContinuous>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <LoRa_ReceivePacket>:

/* --- receive helper: returns length or 0 --- */
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
    uint8_t irq = LoRa_ReadReg(0x12);
 80018a2:	2012      	movs	r0, #18
 80018a4:	f7ff fe64 	bl	8001570 <LoRa_ReadReg>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
    if (irq & 0x40) { // RxDone
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d025      	beq.n	8001902 <LoRa_ReceivePacket+0x68>
        /* If CRC error bit (0x20) is set, ignore */
        if (irq & 0x20) {
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <LoRa_ReceivePacket+0x32>
            /* CRC error */
            LoRa_WriteReg(0x12, 0xFF);
 80018c0:	21ff      	movs	r1, #255	@ 0xff
 80018c2:	2012      	movs	r0, #18
 80018c4:	f7ff fe28 	bl	8001518 <LoRa_WriteReg>
            return 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	e01b      	b.n	8001904 <LoRa_ReceivePacket+0x6a>
        }
        uint8_t nb = LoRa_ReadReg(0x13);   // RegRxNbBytes
 80018cc:	2013      	movs	r0, #19
 80018ce:	f7ff fe4f 	bl	8001570 <LoRa_ReadReg>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73bb      	strb	r3, [r7, #14]
        uint8_t addr = LoRa_ReadReg(0x10); // RegFifoRxCurrentAddr
 80018d6:	2010      	movs	r0, #16
 80018d8:	f7ff fe4a 	bl	8001570 <LoRa_ReadReg>
 80018dc:	4603      	mov	r3, r0
 80018de:	737b      	strb	r3, [r7, #13]
        LoRa_WriteReg(0x0D, addr);
 80018e0:	7b7b      	ldrb	r3, [r7, #13]
 80018e2:	4619      	mov	r1, r3
 80018e4:	200d      	movs	r0, #13
 80018e6:	f7ff fe17 	bl	8001518 <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, nb);
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	461a      	mov	r2, r3
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fea1 	bl	8001638 <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF); // clear IRQs
 80018f6:	21ff      	movs	r1, #255	@ 0xff
 80018f8:	2012      	movs	r0, #18
 80018fa:	f7ff fe0d 	bl	8001518 <LoRa_WriteReg>
        return nb;
 80018fe:	7bbb      	ldrb	r3, [r7, #14]
 8001900:	e000      	b.n	8001904 <LoRa_ReceivePacket+0x6a>
    }
    return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <LoRa_Task>:

/* --- LoRa Task --- */
void LoRa_Task(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b098      	sub	sp, #96	@ 0x60
 8001910:	af00      	add	r7, sp, #0
    // Set the initial mode
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 8001912:	4bb0      	ldr	r3, [pc, #704]	@ (8001bd4 <LoRa_Task+0x2c8>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <LoRa_Task+0x16>
 800191a:	4bae      	ldr	r3, [pc, #696]	@ (8001bd4 <LoRa_Task+0x2c8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d105      	bne.n	800192e <LoRa_Task+0x22>
        LoRa_SetRxContinuous(); // Start in RX mode if receiver or transceiver
 8001922:	f7ff ff60 	bl	80017e6 <LoRa_SetRxContinuous>
        Debug_Print("LoRa set to RX Continuous mode.\r\n");
 8001926:	48ac      	ldr	r0, [pc, #688]	@ (8001bd8 <LoRa_Task+0x2cc>)
 8001928:	f000 f9f4 	bl	8001d14 <Debug_Print>
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 800192c:	e004      	b.n	8001938 <LoRa_Task+0x2c>
    } else {
        LoRa_SetStandby(); // Otherwise, start in Standby
 800192e:	f7ff ff4f 	bl	80017d0 <LoRa_SetStandby>
        Debug_Print("LoRa set to Standby mode.\r\n");
 8001932:	48aa      	ldr	r0, [pc, #680]	@ (8001bdc <LoRa_Task+0x2d0>)
 8001934:	f000 f9ee 	bl	8001d14 <Debug_Print>
    }

    // === Verify LoRa chip ===
    uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 8001938:	2042      	movs	r0, #66	@ 0x42
 800193a:	f7ff fe19 	bl	8001570 <LoRa_ReadReg>
 800193e:	4603      	mov	r3, r0
 8001940:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (version != 0x12) {
 8001944:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001948:	2b12      	cmp	r3, #18
 800194a:	d012      	beq.n	8001972 <LoRa_Task+0x66>
        z = 1;
 800194c:	4ba4      	ldr	r3, [pc, #656]	@ (8001be0 <LoRa_Task+0x2d4>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
        char errMsg[LORA_BUFFER_SIZE];
        sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 8001952:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8001956:	463b      	mov	r3, r7
 8001958:	49a2      	ldr	r1, [pc, #648]	@ (8001be4 <LoRa_Task+0x2d8>)
 800195a:	4618      	mov	r0, r3
 800195c:	f006 fd9c 	bl	8008498 <siprintf>
        Debug_Print(errMsg);
 8001960:	463b      	mov	r3, r7
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f9d6 	bl	8001d14 <Debug_Print>
        HAL_Delay(2000);
 8001968:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800196c:	f002 fdce 	bl	800450c <HAL_Delay>
 8001970:	e188      	b.n	8001c84 <LoRa_Task+0x378>
        return; // retry until chip responds
    }

    switch (loraMode) {
 8001972:	4b98      	ldr	r3, [pc, #608]	@ (8001bd4 <LoRa_Task+0x2c8>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	f000 80c1 	beq.w	8001afe <LoRa_Task+0x1f2>
 800197c:	2b03      	cmp	r3, #3
 800197e:	f300 8179 	bgt.w	8001c74 <LoRa_Task+0x368>
 8001982:	2b01      	cmp	r3, #1
 8001984:	d002      	beq.n	800198c <LoRa_Task+0x80>
 8001986:	2b02      	cmp	r3, #2
 8001988:	d01a      	beq.n	80019c0 <LoRa_Task+0xb4>
 800198a:	e173      	b.n	8001c74 <LoRa_Task+0x368>
        case LORA_MODE_TRANSMITTER:
            // Transmitter logic
            Debug_Print("LoRa Mode: Transmitter\r\n");
 800198c:	4896      	ldr	r0, [pc, #600]	@ (8001be8 <LoRa_Task+0x2dc>)
 800198e:	f000 f9c1 	bl	8001d14 <Debug_Print>
            uint8_t tx_msg[] = "HELLO_TX";
 8001992:	4a96      	ldr	r2, [pc, #600]	@ (8001bec <LoRa_Task+0x2e0>)
 8001994:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001998:	ca07      	ldmia	r2, {r0, r1, r2}
 800199a:	c303      	stmia	r3!, {r0, r1}
 800199c:	701a      	strb	r2, [r3, #0]
            z = 5;
 800199e:	4b90      	ldr	r3, [pc, #576]	@ (8001be0 <LoRa_Task+0x2d4>)
 80019a0:	2205      	movs	r2, #5
 80019a2:	701a      	strb	r2, [r3, #0]
            LoRa_SendPacket(tx_msg, sizeof(tx_msg) - 1);
 80019a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80019a8:	2108      	movs	r1, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff31 	bl	8001812 <LoRa_SendPacket>
            Debug_Print("Sent: HELLO_TX\r\n");
 80019b0:	488f      	ldr	r0, [pc, #572]	@ (8001bf0 <LoRa_Task+0x2e4>)
 80019b2:	f000 f9af 	bl	8001d14 <Debug_Print>
            HAL_Delay(2000); // Send every 2 seconds
 80019b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019ba:	f002 fda7 	bl	800450c <HAL_Delay>
            break;
 80019be:	e161      	b.n	8001c84 <LoRa_Task+0x378>

        case LORA_MODE_RECEIVER:
            Debug_Print("LoRa Mode: Receiver\r\n");
 80019c0:	488c      	ldr	r0, [pc, #560]	@ (8001bf4 <LoRa_Task+0x2e8>)
 80019c2:	f000 f9a7 	bl	8001d14 <Debug_Print>
            connectionStatus = 0; // Reset connection status
 80019c6:	4b8c      	ldr	r3, [pc, #560]	@ (8001bf8 <LoRa_Task+0x2ec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]

            // Step 1: Wait for "PING" from transmitter
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 80019cc:	2300      	movs	r3, #0
 80019ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019d0:	e038      	b.n	8001a44 <LoRa_Task+0x138>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 80019d2:	488a      	ldr	r0, [pc, #552]	@ (8001bfc <LoRa_Task+0x2f0>)
 80019d4:	f7ff ff61 	bl	800189a <LoRa_ReceivePacket>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                if (len > 0) {
 80019de:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d028      	beq.n	8001a38 <LoRa_Task+0x12c>
                    rxBuffer[len] = '\0'; // null terminate
 80019e6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80019ea:	4a84      	ldr	r2, [pc, #528]	@ (8001bfc <LoRa_Task+0x2f0>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	54d1      	strb	r1, [r2, r3]
                    char dbg_rx[LORA_BUFFER_SIZE];
                    sprintf(dbg_rx, "Received: %s\r\n", rxBuffer);
 80019f0:	463b      	mov	r3, r7
 80019f2:	4a82      	ldr	r2, [pc, #520]	@ (8001bfc <LoRa_Task+0x2f0>)
 80019f4:	4982      	ldr	r1, [pc, #520]	@ (8001c00 <LoRa_Task+0x2f4>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f006 fd4e 	bl	8008498 <siprintf>
                    Debug_Print(dbg_rx);
 80019fc:	463b      	mov	r3, r7
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f988 	bl	8001d14 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 8001a04:	2204      	movs	r2, #4
 8001a06:	497f      	ldr	r1, [pc, #508]	@ (8001c04 <LoRa_Task+0x2f8>)
 8001a08:	487c      	ldr	r0, [pc, #496]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001a0a:	f006 fd9d 	bl	8008548 <strncmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d111      	bne.n	8001a38 <LoRa_Task+0x12c>
                        // Step 2: Reply with "ACK"
                        uint8_t ack_msg[] = LORA_ACK_MSG;
 8001a14:	4b7c      	ldr	r3, [pc, #496]	@ (8001c08 <LoRa_Task+0x2fc>)
 8001a16:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 8001a18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fef7 	bl	8001812 <LoRa_SendPacket>
                        Debug_Print("Sent: ACK\r\n");
 8001a24:	4879      	ldr	r0, [pc, #484]	@ (8001c0c <LoRa_Task+0x300>)
 8001a26:	f000 f975 	bl	8001d14 <Debug_Print>

                        connectionStatus = 1;
 8001a2a:	4b73      	ldr	r3, [pc, #460]	@ (8001bf8 <LoRa_Task+0x2ec>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
                        z = 6; // connection established
 8001a30:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <LoRa_Task+0x2d4>)
 8001a32:	2206      	movs	r2, #6
 8001a34:	701a      	strb	r2, [r3, #0]
                        break;
 8001a36:	e008      	b.n	8001a4a <LoRa_Task+0x13e>
                    }
                }
                HAL_Delay(25);
 8001a38:	2019      	movs	r0, #25
 8001a3a:	f002 fd67 	bl	800450c <HAL_Delay>
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 8001a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a40:	3301      	adds	r3, #1
 8001a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a46:	2b27      	cmp	r3, #39	@ 0x27
 8001a48:	ddc3      	ble.n	80019d2 <LoRa_Task+0xc6>
            }

            // Step 3: Handle failed connection
            if (!connectionStatus) {
 8001a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf8 <LoRa_Task+0x2ec>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <LoRa_Task+0x15c>
                Debug_Print("Connection failed. No PING received.\r\n");
 8001a52:	486f      	ldr	r0, [pc, #444]	@ (8001c10 <LoRa_Task+0x304>)
 8001a54:	f000 f95e 	bl	8001d14 <Debug_Print>
                z = 7;
 8001a58:	4b61      	ldr	r3, [pc, #388]	@ (8001be0 <LoRa_Task+0x2d4>)
 8001a5a:	2207      	movs	r2, #7
 8001a5c:	701a      	strb	r2, [r3, #0]
                HAL_Delay(1000); // retry delay
 8001a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a62:	f002 fd53 	bl	800450c <HAL_Delay>
 8001a66:	e046      	b.n	8001af6 <LoRa_Task+0x1ea>
            } else {
                // Step 4: Wait for HELLO after PING->ACK
                Debug_Print("Waiting for HELLO...\r\n");
 8001a68:	486a      	ldr	r0, [pc, #424]	@ (8001c14 <LoRa_Task+0x308>)
 8001a6a:	f000 f953 	bl	8001d14 <Debug_Print>
                connectionStatus = 0; // reset until HELLO is confirmed
 8001a6e:	4b62      	ldr	r3, [pc, #392]	@ (8001bf8 <LoRa_Task+0x2ec>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 8001a74:	2300      	movs	r3, #0
 8001a76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a78:	e030      	b.n	8001adc <LoRa_Task+0x1d0>
                    uint8_t rx_len = LoRa_ReceivePacket(rxBuffer);
 8001a7a:	4860      	ldr	r0, [pc, #384]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001a7c:	f7ff ff0d 	bl	800189a <LoRa_ReceivePacket>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (rx_len > 0) {
 8001a86:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d020      	beq.n	8001ad0 <LoRa_Task+0x1c4>
                        rxBuffer[rx_len] = '\0';
 8001a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a92:	4a5a      	ldr	r2, [pc, #360]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001a94:	2100      	movs	r1, #0
 8001a96:	54d1      	strb	r1, [r2, r3]
                        char dbg_rx2[LORA_BUFFER_SIZE];
                        sprintf(dbg_rx2, "Data Received: %s\r\n", rxBuffer);
 8001a98:	463b      	mov	r3, r7
 8001a9a:	4a58      	ldr	r2, [pc, #352]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001a9c:	495e      	ldr	r1, [pc, #376]	@ (8001c18 <LoRa_Task+0x30c>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 fcfa 	bl	8008498 <siprintf>
                        Debug_Print(dbg_rx2);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f934 	bl	8001d14 <Debug_Print>

                        if (strncmp((char*)rxBuffer, LORA_HELLO_MSG, strlen(LORA_HELLO_MSG)) == 0) {
 8001aac:	2205      	movs	r2, #5
 8001aae:	495b      	ldr	r1, [pc, #364]	@ (8001c1c <LoRa_Task+0x310>)
 8001ab0:	4852      	ldr	r0, [pc, #328]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001ab2:	f006 fd49 	bl	8008548 <strncmp>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <LoRa_Task+0x1c4>
                            Debug_Print("HELLO received -> Final Connection Established\r\n");
 8001abc:	4858      	ldr	r0, [pc, #352]	@ (8001c20 <LoRa_Task+0x314>)
 8001abe:	f000 f929 	bl	8001d14 <Debug_Print>
                            connectionStatus = 1;
 8001ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf8 <LoRa_Task+0x2ec>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
                            z = 8; // Final established state
 8001ac8:	4b45      	ldr	r3, [pc, #276]	@ (8001be0 <LoRa_Task+0x2d4>)
 8001aca:	2208      	movs	r2, #8
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e008      	b.n	8001ae2 <LoRa_Task+0x1d6>
                            break;
                        }
                    }
                    HAL_Delay(25);
 8001ad0:	2019      	movs	r0, #25
 8001ad2:	f002 fd1b 	bl	800450c <HAL_Delay>
                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 8001ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ad8:	3301      	adds	r3, #1
 8001ada:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001adc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ade:	2b27      	cmp	r3, #39	@ 0x27
 8001ae0:	ddcb      	ble.n	8001a7a <LoRa_Task+0x16e>
                }

                if (!connectionStatus) {
 8001ae2:	4b45      	ldr	r3, [pc, #276]	@ (8001bf8 <LoRa_Task+0x2ec>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d105      	bne.n	8001af6 <LoRa_Task+0x1ea>
                    Debug_Print("HELLO not received after ACK.\r\n");
 8001aea:	484e      	ldr	r0, [pc, #312]	@ (8001c24 <LoRa_Task+0x318>)
 8001aec:	f000 f912 	bl	8001d14 <Debug_Print>
                    z = 9; // special error state for HELLO timeout
 8001af0:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <LoRa_Task+0x2d4>)
 8001af2:	2209      	movs	r2, #9
 8001af4:	701a      	strb	r2, [r3, #0]
                }
            }

            HAL_Delay(100);
 8001af6:	2064      	movs	r0, #100	@ 0x64
 8001af8:	f002 fd08 	bl	800450c <HAL_Delay>
            break;
 8001afc:	e0c2      	b.n	8001c84 <LoRa_Task+0x378>

        case LORA_MODE_TRANCEIVER:
            // Transceiver logic (send and receive)
            Debug_Print("LoRa Mode: Transceiver\r\n");
 8001afe:	484a      	ldr	r0, [pc, #296]	@ (8001c28 <LoRa_Task+0x31c>)
 8001b00:	f000 f908 	bl	8001d14 <Debug_Print>

            // Try to receive first
            uint8_t rx_len_tr = LoRa_ReceivePacket(rxBuffer);
 8001b04:	483d      	ldr	r0, [pc, #244]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001b06:	f7ff fec8 	bl	800189a <LoRa_ReceivePacket>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (rx_len_tr > 0) {
 8001b10:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d021      	beq.n	8001b5c <LoRa_Task+0x250>
                rxBuffer[rx_len_tr] = '\0'; // null terminate
 8001b18:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001b1c:	4a37      	ldr	r2, [pc, #220]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	54d1      	strb	r1, [r2, r3]
                char dbg_rx_tr[LORA_BUFFER_SIZE];
                sprintf(dbg_rx_tr, "Received: %s\r\n", rxBuffer);
 8001b22:	463b      	mov	r3, r7
 8001b24:	4a35      	ldr	r2, [pc, #212]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001b26:	4936      	ldr	r1, [pc, #216]	@ (8001c00 <LoRa_Task+0x2f4>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f006 fcb5 	bl	8008498 <siprintf>
                Debug_Print(dbg_rx_tr);
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f8ef 	bl	8001d14 <Debug_Print>

                // If "PING" is received, send "ACK"
                if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 8001b36:	2204      	movs	r2, #4
 8001b38:	4932      	ldr	r1, [pc, #200]	@ (8001c04 <LoRa_Task+0x2f8>)
 8001b3a:	4830      	ldr	r0, [pc, #192]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001b3c:	f006 fd04 	bl	8008548 <strncmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <LoRa_Task+0x250>
                    uint8_t ack_msg[] = LORA_ACK_MSG;
 8001b46:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <LoRa_Task+0x2fc>)
 8001b48:	637b      	str	r3, [r7, #52]	@ 0x34
                    LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 8001b4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b4e:	2103      	movs	r1, #3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fe5e 	bl	8001812 <LoRa_SendPacket>
                    Debug_Print("Sent: ACK\r\n");
 8001b56:	482d      	ldr	r0, [pc, #180]	@ (8001c0c <LoRa_Task+0x300>)
 8001b58:	f000 f8dc 	bl	8001d14 <Debug_Print>
                }
            }

            // Then send a PING
            uint8_t tx_msg_tr[] = LORA_PING_MSG;
 8001b5c:	4b33      	ldr	r3, [pc, #204]	@ (8001c2c <LoRa_Task+0x320>)
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            LoRa_SendPacket(tx_msg_tr, sizeof(tx_msg_tr) - 1);
 8001b66:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fe50 	bl	8001812 <LoRa_SendPacket>
            Debug_Print("Sent: PING\r\n");
 8001b72:	482f      	ldr	r0, [pc, #188]	@ (8001c30 <LoRa_Task+0x324>)
 8001b74:	f000 f8ce 	bl	8001d14 <Debug_Print>

            // Wait for ACK (max 500 ms)
            connectionStatus = 0;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <LoRa_Task+0x2ec>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8001b7e:	2300      	movs	r3, #0
 8001b80:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b82:	e061      	b.n	8001c48 <LoRa_Task+0x33c>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 8001b84:	481d      	ldr	r0, [pc, #116]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001b86:	f7ff fe88 	bl	800189a <LoRa_ReceivePacket>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (len > 0) {
 8001b90:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d051      	beq.n	8001c3c <LoRa_Task+0x330>
                    rxBuffer[len] = '\0'; // null terminate
 8001b98:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001b9c:	4a17      	ldr	r2, [pc, #92]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	54d1      	strb	r1, [r2, r3]
                    char dbg_ack[LORA_BUFFER_SIZE];
                    sprintf(dbg_ack, "Received ACK check: %s\r\n", rxBuffer);
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4a15      	ldr	r2, [pc, #84]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001ba6:	4923      	ldr	r1, [pc, #140]	@ (8001c34 <LoRa_Task+0x328>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f006 fc75 	bl	8008498 <siprintf>
                    Debug_Print(dbg_ack);
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f8af 	bl	8001d14 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_ACK_MSG, strlen(LORA_ACK_MSG)) == 0) {
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	491f      	ldr	r1, [pc, #124]	@ (8001c38 <LoRa_Task+0x32c>)
 8001bba:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <LoRa_Task+0x2f0>)
 8001bbc:	f006 fcc4 	bl	8008548 <strncmp>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d13a      	bne.n	8001c3c <LoRa_Task+0x330>
                        connectionStatus = 1;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <LoRa_Task+0x2ec>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
                        z = 3;
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <LoRa_Task+0x2d4>)
 8001bce:	2203      	movs	r2, #3
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e03c      	b.n	8001c4e <LoRa_Task+0x342>
 8001bd4:	20000018 	.word	0x20000018
 8001bd8:	080096d8 	.word	0x080096d8
 8001bdc:	080096fc 	.word	0x080096fc
 8001be0:	2000012c 	.word	0x2000012c
 8001be4:	08009718 	.word	0x08009718
 8001be8:	0800973c 	.word	0x0800973c
 8001bec:	080098e4 	.word	0x080098e4
 8001bf0:	08009758 	.word	0x08009758
 8001bf4:	0800976c 	.word	0x0800976c
 8001bf8:	2000012d 	.word	0x2000012d
 8001bfc:	2000010c 	.word	0x2000010c
 8001c00:	08009784 	.word	0x08009784
 8001c04:	08009794 	.word	0x08009794
 8001c08:	004b4341 	.word	0x004b4341
 8001c0c:	0800979c 	.word	0x0800979c
 8001c10:	080097a8 	.word	0x080097a8
 8001c14:	080097d0 	.word	0x080097d0
 8001c18:	080097e8 	.word	0x080097e8
 8001c1c:	080097fc 	.word	0x080097fc
 8001c20:	08009804 	.word	0x08009804
 8001c24:	08009838 	.word	0x08009838
 8001c28:	08009858 	.word	0x08009858
 8001c2c:	474e4950 	.word	0x474e4950
 8001c30:	08009874 	.word	0x08009874
 8001c34:	08009884 	.word	0x08009884
 8001c38:	080098a0 	.word	0x080098a0
                        break;
                    }
                }
                HAL_Delay(25);
 8001c3c:	2019      	movs	r0, #25
 8001c3e:	f002 fc65 	bl	800450c <HAL_Delay>
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8001c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c44:	3301      	adds	r3, #1
 8001c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4a:	2b13      	cmp	r3, #19
 8001c4c:	dd9a      	ble.n	8001b84 <LoRa_Task+0x278>
            }

            if (!connectionStatus) {
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <LoRa_Task+0x380>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <LoRa_Task+0x358>
                Debug_Print("Connection: LOST\r\n");
 8001c56:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <LoRa_Task+0x384>)
 8001c58:	f000 f85c 	bl	8001d14 <Debug_Print>
                z = 4;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <LoRa_Task+0x388>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e002      	b.n	8001c6a <LoRa_Task+0x35e>
            } else {
                Debug_Print("Connection: OK\r\n");
 8001c64:	480c      	ldr	r0, [pc, #48]	@ (8001c98 <LoRa_Task+0x38c>)
 8001c66:	f000 f855 	bl	8001d14 <Debug_Print>
            }

            HAL_Delay(1000); // Delay before next cycle in transceiver mode
 8001c6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c6e:	f002 fc4d 	bl	800450c <HAL_Delay>
            break;
 8001c72:	e007      	b.n	8001c84 <LoRa_Task+0x378>

        default:
            Debug_Print("Invalid LoRa Mode!\r\n");
 8001c74:	4809      	ldr	r0, [pc, #36]	@ (8001c9c <LoRa_Task+0x390>)
 8001c76:	f000 f84d 	bl	8001d14 <Debug_Print>
            HAL_Delay(1000);
 8001c7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c7e:	f002 fc45 	bl	800450c <HAL_Delay>
            break;
 8001c82:	bf00      	nop
    }
}
 8001c84:	3760      	adds	r7, #96	@ 0x60
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000012d 	.word	0x2000012d
 8001c90:	080098a4 	.word	0x080098a4
 8001c94:	2000012c 	.word	0x2000012c
 8001c98:	080098b8 	.word	0x080098b8
 8001c9c:	080098cc 	.word	0x080098cc

08001ca0 <I2C_Scan>:
static void MX_RTC_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan(void) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	 if (HAL_I2C_IsDeviceReady(&hi2c2, SLAVE_ADDRESS_LCD, 2, 10) == HAL_OK) {
 8001ca4:	230a      	movs	r3, #10
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	214e      	movs	r1, #78	@ 0x4e
 8001caa:	4813      	ldr	r0, [pc, #76]	@ (8001cf8 <I2C_Scan+0x58>)
 8001cac:	f004 f892 	bl	8005dd4 <HAL_I2C_IsDeviceReady>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <I2C_Scan+0x42>
	        Debug_Print("✅ LCD ACK at configured address.\r\n");
 8001cb6:	4811      	ldr	r0, [pc, #68]	@ (8001cfc <I2C_Scan+0x5c>)
 8001cb8:	f000 f82c 	bl	8001d14 <Debug_Print>
	        lcd_init();
 8001cbc:	f7ff fae5 	bl	800128a <lcd_init>
	        lcd_clear();
 8001cc0:	f7ff fa9f 	bl	8001202 <lcd_clear>
	        lcd_put_cur(0, 0);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff faa8 	bl	800121c <lcd_put_cur>
	        lcd_send_string("LCD FOUND");
 8001ccc:	480c      	ldr	r0, [pc, #48]	@ (8001d00 <I2C_Scan+0x60>)
 8001cce:	f7ff fac7 	bl	8001260 <lcd_send_string>
	        lcd_put_cur(1, 0);
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f7ff faa1 	bl	800121c <lcd_put_cur>
	        lcd_send_string("I2C OK");
 8001cda:	480a      	ldr	r0, [pc, #40]	@ (8001d04 <I2C_Scan+0x64>)
 8001cdc:	f7ff fac0 	bl	8001260 <lcd_send_string>
	    } else {
	        Debug_Print("❌ LCD not responding at configured address.\r\n");
	        Debug_Print("   Tip: Many boards use 0x27 or 0x3F (8-bit: 0x4E/0x7E).\r\n");
	        Debug_Print("   Update SLAVE_ADDRESS_LCD in lcd_i2c.h if needed.\r\n");
	    }
}
 8001ce0:	e008      	b.n	8001cf4 <I2C_Scan+0x54>
	        Debug_Print("❌ LCD not responding at configured address.\r\n");
 8001ce2:	4809      	ldr	r0, [pc, #36]	@ (8001d08 <I2C_Scan+0x68>)
 8001ce4:	f000 f816 	bl	8001d14 <Debug_Print>
	        Debug_Print("   Tip: Many boards use 0x27 or 0x3F (8-bit: 0x4E/0x7E).\r\n");
 8001ce8:	4808      	ldr	r0, [pc, #32]	@ (8001d0c <I2C_Scan+0x6c>)
 8001cea:	f000 f813 	bl	8001d14 <Debug_Print>
	        Debug_Print("   Update SLAVE_ADDRESS_LCD in lcd_i2c.h if needed.\r\n");
 8001cee:	4808      	ldr	r0, [pc, #32]	@ (8001d10 <I2C_Scan+0x70>)
 8001cf0:	f000 f810 	bl	8001d14 <Debug_Print>
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000160 	.word	0x20000160
 8001cfc:	080098f0 	.word	0x080098f0
 8001d00:	08009918 	.word	0x08009918
 8001d04:	08009924 	.word	0x08009924
 8001d08:	0800992c 	.word	0x0800992c
 8001d0c:	0800995c 	.word	0x0800995c
 8001d10:	08009998 	.word	0x08009998

08001d14 <Debug_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    // Use the new UART_TransmitString function
    UART_TransmitString(&huart1, msg);
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4803      	ldr	r0, [pc, #12]	@ (8001d2c <Debug_Print+0x18>)
 8001d20:	f002 fb16 	bl	8004350 <UART_TransmitString>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000220 	.word	0x20000220

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d36:	f002 fb87 	bl	8004448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3a:	f000 f869 	bl	8001e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3e:	f000 f98d 	bl	800205c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d42:	f000 f8bf 	bl	8001ec4 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8001d46:	f000 f929 	bl	8001f9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d4a:	f000 f95d 	bl	8002008 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001d4e:	f000 f8f7 	bl	8001f40 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001d52:	f7ff fa9a 	bl	800128a <lcd_init>
  ADC_Init(&hadc1);
 8001d56:	482b      	ldr	r0, [pc, #172]	@ (8001e04 <main+0xd4>)
 8001d58:	f7ff f834 	bl	8000dc4 <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 8001d5c:	f7ff fcf2 	bl	8001744 <LoRa_Init>
  I2C_Scan();
 8001d60:	f7ff ff9e 	bl	8001ca0 <I2C_Scan>
  Screen_Init();
 8001d64:	f001 fb8a 	bl	800347c <Screen_Init>
  UART_Init(); // Initialize UART reception (starts the first IT)
 8001d68:	f002 fad4 	bl	8004314 <UART_Init>
  Switches_Init();
 8001d6c:	f002 fa3e 	bl	80041ec <Switches_Init>
//
//  Debug_Print("System Initialized\r\n");
  uint8_t modem = LoRa_ReadReg(0x1D);
 8001d70:	201d      	movs	r0, #29
 8001d72:	f7ff fbfd 	bl	8001570 <LoRa_ReadReg>
 8001d76:	4603      	mov	r3, r0
 8001d78:	72fb      	strb	r3, [r7, #11]
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 8001d7a:	201e      	movs	r0, #30
 8001d7c:	f7ff fbf8 	bl	8001570 <LoRa_ReadReg>
 8001d80:	4603      	mov	r3, r0
 8001d82:	72bb      	strb	r3, [r7, #10]
//
//      }
//  }

         // Process all active modes
         ModelHandle_Process();
 8001d84:	f000 fe88 	bl	8002a98 <ModelHandle_Process>
  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
         while (1)
         {
             /* --- UI handling (switches + LCD) --- */
             Screen_HandleSwitches();  // Check buttons and update UI state
 8001d88:	f001 ffee 	bl	8003d68 <Screen_HandleSwitches>
             Screen_Update();          // Refresh display and cursor blink
 8001d8c:	f001 fa0a 	bl	80031a4 <Screen_Update>
             /* --- Periodic data acquisition --- */
             ADC_ReadAllChannels(&hadc1, &adcData);   // update voltages
 8001d90:	491d      	ldr	r1, [pc, #116]	@ (8001e08 <main+0xd8>)
 8001d92:	481c      	ldr	r0, [pc, #112]	@ (8001e04 <main+0xd4>)
 8001d94:	f7ff f826 	bl	8000de4 <ADC_ReadAllChannels>
             Get_Time();                              // update RTC
 8001d98:	f000 fefc 	bl	8002b94 <Get_Time>
             LoRa_Task();                             // maintain LoRa stack
 8001d9c:	f7ff fdb6 	bl	800190c <LoRa_Task>

             /* --- UART command handling --- */
             if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 8001da0:	2140      	movs	r1, #64	@ 0x40
 8001da2:	481a      	ldr	r0, [pc, #104]	@ (8001e0c <main+0xdc>)
 8001da4:	f002 fae8 	bl	8004378 <UART_GetReceivedPacket>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01f      	beq.n	8001dee <main+0xbe>
                 char *p = receivedUartPacket;
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <main+0xdc>)
 8001db0:	60fb      	str	r3, [r7, #12]
                 size_t n = strlen(receivedUartPacket);
 8001db2:	4816      	ldr	r0, [pc, #88]	@ (8001e0c <main+0xdc>)
 8001db4:	f7fe f9d4 	bl	8000160 <strlen>
 8001db8:	6078      	str	r0, [r7, #4]
                 if (n >= 2 && p[0] == '@' && p[n-1] == '#') {
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d913      	bls.n	8001de8 <main+0xb8>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b40      	cmp	r3, #64	@ 0x40
 8001dc6:	d10f      	bne.n	8001de8 <main+0xb8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b23      	cmp	r3, #35	@ 0x23
 8001dd4:	d108      	bne.n	8001de8 <main+0xb8>
                     p[n-1] = '\0';  // strip end marker
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
                     p++;            // strip start marker
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
                 }
                 ModelHandle_ProcessUartCommand(p);   // parse + update model
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fcc5 	bl	8002778 <ModelHandle_ProcessUartCommand>
             }

             /* --- Business logic: model → hardware --- */
             ModelHandle_Process();   // compute intents for motor, relays, LEDs, timers
 8001dee:	f000 fe53 	bl	8002a98 <ModelHandle_Process>
             Relay_All(false);        // Example: you can still drive relays individually in model
 8001df2:	2000      	movs	r0, #0
 8001df4:	f000 fe9e 	bl	8002b34 <Relay_All>
             LED_Task();              // blink patterns / status LEDs
 8001df8:	f7ff facc 	bl	8001394 <LED_Task>

             /* --- Cooperative delay for smoothness --- */
             HAL_Delay(10);           // ~100Hz loop rate (good for UI responsiveness)
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f002 fb85 	bl	800450c <HAL_Delay>
         {
 8001e02:	e7c1      	b.n	8001d88 <main+0x58>
 8001e04:	20000130 	.word	0x20000130
 8001e08:	20000268 	.word	0x20000268
 8001e0c:	200002a0 	.word	0x200002a0

08001e10 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */


void SystemClock_Config(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b094      	sub	sp, #80	@ 0x50
 8001e14:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e1a:	2228      	movs	r2, #40	@ 0x28
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 fb8a 	bl	8008538 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e40:	2302      	movs	r3, #2
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e44:	2301      	movs	r3, #1
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e48:	2310      	movs	r3, #16
 8001e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2; // HSI/2 = 4 MHz
 8001e50:	2300      	movs	r3, #0
 8001e52:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;             // 4*16 = 64 MHz
 8001e54:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8001e5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 fc92 	bl	8006788 <HAL_RCC_OscConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <SystemClock_Config+0x5e>
 8001e6a:	f000 f98b 	bl	8002184 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e6e:	230f      	movs	r3, #15
 8001e70:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Updated line
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e7e:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2102      	movs	r1, #2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 fefe 	bl	8006c8c <HAL_RCC_ClockConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0x8a>
 8001e96:	f000 f975 	bl	8002184 <Error_Handler>

    // Use LSI (internal ~40 kHz) for RTC, and HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ea2:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ea8:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	4618      	mov	r0, r3
 8001eae:	f005 f87b 	bl	8006fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0xac>
 8001eb8:	f000 f964 	bl	8002184 <Error_Handler>
}
 8001ebc:	bf00      	nop
 8001ebe:	3750      	adds	r7, #80	@ 0x50
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001ed6:	4a19      	ldr	r2, [pc, #100]	@ (8001f3c <MX_ADC1_Init+0x78>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001eee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ef2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f00:	480d      	ldr	r0, [pc, #52]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001f02:	f002 fb27 	bl	8004554 <HAL_ADC_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001f0c:	f000 f93a 	bl	8002184 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f14:	2301      	movs	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <MX_ADC1_Init+0x74>)
 8001f22:	f002 fdaf 	bl	8004a84 <HAL_ADC_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001f2c:	f000 f92a 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000130 	.word	0x20000130
 8001f3c:	40012400 	.word	0x40012400

08001f40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f46:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <MX_I2C2_Init+0x54>)
 8001f48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <MX_I2C2_Init+0x58>)
 8001f4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f70:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f7c:	4804      	ldr	r0, [pc, #16]	@ (8001f90 <MX_I2C2_Init+0x50>)
 8001f7e:	f003 fa73 	bl	8005468 <HAL_I2C_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f88:	f000 f8fc 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000160 	.word	0x20000160
 8001f94:	40005800 	.word	0x40005800
 8001f98:	000186a0 	.word	0x000186a0

08001f9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fa2:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <MX_SPI1_Init+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fae:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fd0:	2218      	movs	r2, #24
 8001fd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fe8:	220a      	movs	r2, #10
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fec:	4804      	ldr	r0, [pc, #16]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fee:	f005 f97a 	bl	80072e6 <HAL_SPI_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ff8:	f000 f8c4 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200001c8 	.word	0x200001c8
 8002004:	40013000 	.word	0x40013000

08002008 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <MX_USART1_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002040:	f005 fee7 	bl	8007e12 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 f89b 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000220 	.word	0x20000220
 8002058:	40013800 	.word	0x40013800

0800205c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002070:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <MX_GPIO_Init+0x118>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a3f      	ldr	r2, [pc, #252]	@ (8002174 <MX_GPIO_Init+0x118>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b3d      	ldr	r3, [pc, #244]	@ (8002174 <MX_GPIO_Init+0x118>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002088:	4b3a      	ldr	r3, [pc, #232]	@ (8002174 <MX_GPIO_Init+0x118>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a39      	ldr	r2, [pc, #228]	@ (8002174 <MX_GPIO_Init+0x118>)
 800208e:	f043 0320 	orr.w	r3, r3, #32
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b37      	ldr	r3, [pc, #220]	@ (8002174 <MX_GPIO_Init+0x118>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	4b34      	ldr	r3, [pc, #208]	@ (8002174 <MX_GPIO_Init+0x118>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a33      	ldr	r2, [pc, #204]	@ (8002174 <MX_GPIO_Init+0x118>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b31      	ldr	r3, [pc, #196]	@ (8002174 <MX_GPIO_Init+0x118>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002174 <MX_GPIO_Init+0x118>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <MX_GPIO_Init+0x118>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <MX_GPIO_Init+0x118>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 80020d0:	2200      	movs	r2, #0
 80020d2:	f240 3147 	movw	r1, #839	@ 0x347
 80020d6:	4828      	ldr	r0, [pc, #160]	@ (8002178 <MX_GPIO_Init+0x11c>)
 80020d8:	f003 f995 	bl	8005406 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 80020e2:	4826      	ldr	r0, [pc, #152]	@ (800217c <MX_GPIO_Init+0x120>)
 80020e4:	f003 f98f 	bl	8005406 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 80020e8:	23c0      	movs	r3, #192	@ 0xc0
 80020ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ec:	2303      	movs	r3, #3
 80020ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4619      	mov	r1, r3
 80020f6:	4821      	ldr	r0, [pc, #132]	@ (800217c <MX_GPIO_Init+0x120>)
 80020f8:	f002 ffea 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 80020fc:	f240 3347 	movw	r3, #839	@ 0x347
 8002100:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2302      	movs	r3, #2
 800210c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4619      	mov	r1, r3
 8002114:	4818      	ldr	r0, [pc, #96]	@ (8002178 <MX_GPIO_Init+0x11c>)
 8002116:	f002 ffdb 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800211a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800211e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <MX_GPIO_Init+0x124>)
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002124:	2301      	movs	r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4619      	mov	r1, r3
 800212e:	4812      	ldr	r0, [pc, #72]	@ (8002178 <MX_GPIO_Init+0x11c>)
 8002130:	f002 ffce 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8002134:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2302      	movs	r3, #2
 8002144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	4619      	mov	r1, r3
 800214c:	480b      	ldr	r0, [pc, #44]	@ (800217c <MX_GPIO_Init+0x120>)
 800214e:	f002 ffbf 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4619      	mov	r1, r3
 8002164:	4804      	ldr	r0, [pc, #16]	@ (8002178 <MX_GPIO_Init+0x11c>)
 8002166:	f002 ffb3 	bl	80050d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800216a:	bf00      	nop
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	40010c00 	.word	0x40010c00
 800217c:	40010800 	.word	0x40010800
 8002180:	10310000 	.word	0x10310000

08002184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002188:	b672      	cpsid	i
}
 800218a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <Error_Handler+0x8>

08002190 <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL; // 2h
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
 8002194:	f002 f9b0 	bl	80044f8 <HAL_GetTick>
 8002198:	4603      	mov	r3, r0
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}

0800219e <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	460a      	mov	r2, r1
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	4613      	mov	r3, r2
 80021ac:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80021b4:	fb02 f103 	mul.w	r1, r2, r3
 80021b8:	79ba      	ldrb	r2, [r7, #6]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
	...

080021d0 <ModelHandle_SecondsToTime>:

void ModelHandle_SecondsToTime(uint32_t sec, uint8_t* hh, uint8_t* mm) {
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
    sec %= 24UL * 3600UL;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a16      	ldr	r2, [pc, #88]	@ (8002238 <ModelHandle_SecondsToTime+0x68>)
 80021e0:	fba2 1203 	umull	r1, r2, r2, r3
 80021e4:	0c12      	lsrs	r2, r2, #16
 80021e6:	4915      	ldr	r1, [pc, #84]	@ (800223c <ModelHandle_SecondsToTime+0x6c>)
 80021e8:	fb01 f202 	mul.w	r2, r1, r2
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
    if (hh) *hh = (uint8_t)(sec / 3600UL);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <ModelHandle_SecondsToTime+0x36>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <ModelHandle_SecondsToTime+0x70>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0adb      	lsrs	r3, r3, #11
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	701a      	strb	r2, [r3, #0]
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d010      	beq.n	800222e <ModelHandle_SecondsToTime+0x5e>
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <ModelHandle_SecondsToTime+0x70>)
 8002210:	fba3 1302 	umull	r1, r3, r3, r2
 8002214:	0adb      	lsrs	r3, r3, #11
 8002216:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <ModelHandle_SecondsToTime+0x74>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	b2da      	uxtb	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	701a      	strb	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	c22e4507 	.word	0xc22e4507
 800223c:	00015180 	.word	0x00015180
 8002240:	91a2b3c5 	.word	0x91a2b3c5
 8002244:	88888889 	.word	0x88888889

08002248 <motor_apply>:

/* ===== Motor ===== */
static void motor_apply(bool on)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4619      	mov	r1, r3
 8002256:	2001      	movs	r0, #1
 8002258:	f000 fc3e 	bl	8002ad8 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <motor_apply+0x1e>
 8002262:	2201      	movs	r2, #1
 8002264:	e000      	b.n	8002268 <motor_apply+0x20>
 8002266:	2200      	movs	r2, #0
 8002268:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <motor_apply+0x58>)
 800226a:	701a      	strb	r2, [r3, #0]

    if (on) {
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00f      	beq.n	8002292 <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8002272:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <motor_apply+0x5c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <motor_apply+0x50>
            maxRunTimerArmed = true;
 8002280:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <motor_apply+0x5c>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8002286:	f7ff ff83 	bl	8002190 <now_ms>
 800228a:	4603      	mov	r3, r0
 800228c:	4a06      	ldr	r2, [pc, #24]	@ (80022a8 <motor_apply+0x60>)
 800228e:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8002290:	e002      	b.n	8002298 <motor_apply+0x50>
        maxRunTimerArmed = false;
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <motor_apply+0x5c>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200002e0 	.word	0x200002e0
 80022a4:	2000032c 	.word	0x2000032c
 80022a8:	20000330 	.word	0x20000330

080022ac <countdown_start>:

/* ===== Countdown ===== */
static void countdown_start(bool onMode, uint32_t seconds)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
    if (seconds == 0) { countdownActive = false; return; }
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <countdown_start+0x1a>
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <countdown_start+0x5c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e01d      	b.n	8002302 <countdown_start+0x56>
    countdownMode     = onMode;
 80022c6:	4a11      	ldr	r2, [pc, #68]	@ (800230c <countdown_start+0x60>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	7013      	strb	r3, [r2, #0]
    countdownDuration = seconds;
 80022cc:	4a10      	ldr	r2, [pc, #64]	@ (8002310 <countdown_start+0x64>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6013      	str	r3, [r2, #0]
    countdownActive   = true;
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <countdown_start+0x5c>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
    countdownDeadline = now_ms() + (seconds * 1000UL);
 80022d8:	f7ff ff5a 	bl	8002190 <now_ms>
 80022dc:	4602      	mov	r2, r0
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <countdown_start+0x68>)
 80022ec:	6013      	str	r3, [r2, #0]

    if (onMode) motor_apply(true);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <countdown_start+0x50>
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7ff ffa7 	bl	8002248 <motor_apply>
 80022fa:	e002      	b.n	8002302 <countdown_start+0x56>
    else        motor_apply(false);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff ffa3 	bl	8002248 <motor_apply>
}
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200002e1 	.word	0x200002e1
 800230c:	20000019 	.word	0x20000019
 8002310:	200002e4 	.word	0x200002e4
 8002314:	200002e8 	.word	0x200002e8

08002318 <countdown_tick>:

static void countdown_tick(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 800231e:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <countdown_tick+0x74>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d12a      	bne.n	8002384 <countdown_tick+0x6c>

    uint32_t tnow = now_ms();
 800232e:	f7ff ff2f 	bl	8002190 <now_ms>
 8002332:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8002334:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <countdown_tick+0x78>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	dc12      	bgt.n	8002366 <countdown_tick+0x4e>
        if (countdownMode) motor_apply(false);
 8002340:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <countdown_tick+0x7c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <countdown_tick+0x3a>
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff ff7c 	bl	8002248 <motor_apply>
 8002350:	e002      	b.n	8002358 <countdown_tick+0x40>
        else               motor_apply(true);
 8002352:	2001      	movs	r0, #1
 8002354:	f7ff ff78 	bl	8002248 <motor_apply>
        countdownActive   = false;
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <countdown_tick+0x74>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <countdown_tick+0x80>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
        return;
 8002364:	e00f      	b.n	8002386 <countdown_tick+0x6e>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <countdown_tick+0x78>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8002376:	4a09      	ldr	r2, [pc, #36]	@ (800239c <countdown_tick+0x84>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	4a06      	ldr	r2, [pc, #24]	@ (8002398 <countdown_tick+0x80>)
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e000      	b.n	8002386 <countdown_tick+0x6e>
    if (!countdownActive) return;
 8002384:	bf00      	nop
}
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200002e1 	.word	0x200002e1
 8002390:	200002e8 	.word	0x200002e8
 8002394:	20000019 	.word	0x20000019
 8002398:	200002e4 	.word	0x200002e4
 800239c:	10624dd3 	.word	0x10624dd3

080023a0 <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) return;
 80023a6:	4b22      	ldr	r3, [pc, #136]	@ (8002430 <twist_tick+0x90>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	f083 0301 	eor.w	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d137      	bne.n	8002424 <twist_tick+0x84>

    uint32_t tnow = now_ms();
 80023b4:	f7ff feec 	bl	8002190 <now_ms>
 80023b8:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <twist_tick+0x94>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	dc30      	bgt.n	8002428 <twist_tick+0x88>

    twist_on_phase = !twist_on_phase;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <twist_tick+0x98>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf14      	ite	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	2300      	moveq	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f083 0301 	eor.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <twist_tick+0x98>)
 80023e2:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <twist_tick+0x98>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <twist_tick+0x68>
        motor_apply(true);
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7ff ff2b 	bl	8002248 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 80023f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <twist_tick+0x90>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023fa:	fb03 f202 	mul.w	r2, r3, r2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a0c      	ldr	r2, [pc, #48]	@ (8002434 <twist_tick+0x94>)
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e010      	b.n	800242a <twist_tick+0x8a>
    } else {
        motor_apply(false);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff ff1d 	bl	8002248 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 800240e:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <twist_tick+0x90>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002416:	fb03 f202 	mul.w	r2, r3, r2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <twist_tick+0x94>)
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e002      	b.n	800242a <twist_tick+0x8a>
    if (!twistSettings.twistActive) return;
 8002424:	bf00      	nop
 8002426:	e000      	b.n	800242a <twist_tick+0x8a>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8002428:	bf00      	nop
    }
}
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000028 	.word	0x20000028
 8002434:	20000338 	.word	0x20000338
 8002438:	20000334 	.word	0x20000334

0800243c <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) return;
 8002442:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <search_tick+0x84>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f083 0301 	eor.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d131      	bne.n	80024b4 <search_tick+0x78>

    uint32_t tnow = now_ms();
 8002450:	f7ff fe9e 	bl	8002190 <now_ms>
 8002454:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <search_tick+0x88>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	dc2a      	bgt.n	80024b8 <search_tick+0x7c>

    if (!search_in_test) {
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <search_tick+0x8c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f083 0301 	eor.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d010      	beq.n	8002492 <search_tick+0x56>
        search_in_test = true;
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <search_tick+0x8c>)
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
        motor_apply(true);
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff fee6 	bl	8002248 <motor_apply>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 800247c:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <search_tick+0x84>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002484:	fb03 f202 	mul.w	r2, r3, r2
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	4a0d      	ldr	r2, [pc, #52]	@ (80024c4 <search_tick+0x88>)
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e013      	b.n	80024ba <search_tick+0x7e>
    } else {
        motor_apply(false);
 8002492:	2000      	movs	r0, #0
 8002494:	f7ff fed8 	bl	8002248 <motor_apply>
        search_in_test = false;
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <search_tick+0x8c>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
        search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 800249e:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <search_tick+0x84>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024a6:	fb03 f202 	mul.w	r2, r3, r2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	@ (80024c4 <search_tick+0x88>)
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e002      	b.n	80024ba <search_tick+0x7e>
    if (!searchSettings.searchActive) return;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <search_tick+0x7e>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 80024b8:	bf00      	nop
    }
}
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000001c 	.word	0x2000001c
 80024c4:	20000340 	.word	0x20000340
 80024c8:	2000033c 	.word	0x2000033c

080024cc <seconds_since_midnight>:

/* ===== Timer (daily window) ===== */
static uint32_t seconds_since_midnight(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
    /* TODO: replace with RTC if available */
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 80024d2:	f7ff fe5d 	bl	8002190 <now_ms>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <seconds_since_midnight+0x30>)
 80024da:	fba2 1203 	umull	r1, r2, r2, r3
 80024de:	0e12      	lsrs	r2, r2, #24
 80024e0:	4907      	ldr	r1, [pc, #28]	@ (8002500 <seconds_since_midnight+0x34>)
 80024e2:	fb01 f202 	mul.w	r2, r1, r2
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <seconds_since_midnight+0x38>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	099b      	lsrs	r3, r3, #6
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	31b5d43b 	.word	0x31b5d43b
 8002500:	05265c00 	.word	0x05265c00
 8002504:	10624dd3 	.word	0x10624dd3

08002508 <timer_tick>:

static void timer_tick(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
    uint32_t nowS = seconds_since_midnight();
 800250e:	f7ff ffdd 	bl	80024cc <seconds_since_midnight>
 8002512:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e045      	b.n	80025a6 <timer_tick+0x9e>
        TimerSlot* s = &timerSlots[i];
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4a24      	ldr	r2, [pc, #144]	@ (80025b8 <timer_tick+0xb0>)
 8002526:	4413      	add	r3, r2
 8002528:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	7a1b      	ldrb	r3, [r3, #8]
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d132      	bne.n	800259e <timer_tick+0x96>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d812      	bhi.n	800256a <timer_tick+0x62>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	d306      	bcc.n	800255c <timer_tick+0x54>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d201      	bcs.n	800255c <timer_tick+0x54>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <timer_tick+0x56>
 800255c:	2300      	movs	r3, #0
 800255e:	72fb      	strb	r3, [r7, #11]
 8002560:	7afb      	ldrb	r3, [r7, #11]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	72fb      	strb	r3, [r7, #11]
 8002568:	e011      	b.n	800258e <timer_tick+0x86>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	d204      	bcs.n	800257e <timer_tick+0x76>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	d201      	bcs.n	8002582 <timer_tick+0x7a>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <timer_tick+0x7c>
 8002582:	2300      	movs	r3, #0
 8002584:	72fb      	strb	r3, [r7, #11]
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <timer_tick+0x98>
            motor_apply(inWindow);
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fe56 	bl	8002248 <motor_apply>
 800259c:	e000      	b.n	80025a0 <timer_tick+0x98>
        if (!s->active) continue;
 800259e:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	ddb6      	ble.n	800251a <timer_tick+0x12>
        }
    }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200002ec 	.word	0x200002ec

080025bc <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
    if (senseDryRun && motorStatus == 1U) {
 80025c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002634 <protections_tick+0x78>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <protections_tick+0x1e>
 80025ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <protections_tick+0x7c>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <protections_tick+0x1e>
        motor_apply(false);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff fe37 	bl	8002248 <motor_apply>
    }

    if (senseOverLoad && motorStatus == 1U) {
 80025da:	4b18      	ldr	r3, [pc, #96]	@ (800263c <protections_tick+0x80>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <protections_tick+0x38>
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <protections_tick+0x7c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <protections_tick+0x38>
        motor_apply(false);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff fe2a 	bl	8002248 <motor_apply>
    }

    if (senseOverUnderVolt) {
 80025f4:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <protections_tick+0x84>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <protections_tick+0x48>
        motor_apply(false);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff fe22 	bl	8002248 <motor_apply>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8002604:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <protections_tick+0x88>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d011      	beq.n	8002630 <protections_tick+0x74>
 800260c:	f7ff fdc0 	bl	8002190 <now_ms>
 8002610:	4602      	mov	r2, r0
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <protections_tick+0x8c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	4a0c      	ldr	r2, [pc, #48]	@ (800264c <protections_tick+0x90>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d308      	bcc.n	8002630 <protections_tick+0x74>
        motor_apply(false);
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff fe12 	bl	8002248 <motor_apply>
        senseMaxRunReached = true;
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <protections_tick+0x94>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <protections_tick+0x88>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
    }
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000328 	.word	0x20000328
 8002638:	200002e0 	.word	0x200002e0
 800263c:	20000329 	.word	0x20000329
 8002640:	2000032a 	.word	0x2000032a
 8002644:	2000032c 	.word	0x2000032c
 8002648:	20000330 	.word	0x20000330
 800264c:	006ddd00 	.word	0x006ddd00
 8002650:	2000032b 	.word	0x2000032b

08002654 <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 8002658:	f7fe ff18 	bl	800148c <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 800265c:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <leds_from_model+0x9c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d104      	bne.n	8002670 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2101      	movs	r1, #1
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe ff2e 	bl	80014cc <LED_SetIntent>
    }
    if (countdownActive && countdownMode) {
 8002670:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <leds_from_model+0xa0>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <leds_from_model+0x3c>
 800267a:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <leds_from_model+0xa4>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <leds_from_model+0x3c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 8002684:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002688:	2102      	movs	r1, #2
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe ff1e 	bl	80014cc <LED_SetIntent>
    }
    if (senseDryRun) {
 8002690:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <leds_from_model+0xa8>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <leds_from_model+0x50>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2101      	movs	r1, #1
 800269e:	2001      	movs	r0, #1
 80026a0:	f7fe ff14 	bl	80014cc <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 80026a4:	4b16      	ldr	r3, [pc, #88]	@ (8002700 <leds_from_model+0xac>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <leds_from_model+0x66>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 80026ae:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80026b2:	2102      	movs	r1, #2
 80026b4:	2001      	movs	r0, #1
 80026b6:	f7fe ff09 	bl	80014cc <LED_SetIntent>
    }
    if (senseOverLoad) {
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <leds_from_model+0xb0>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <leds_from_model+0x7c>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 80026c4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80026c8:	2102      	movs	r1, #2
 80026ca:	2002      	movs	r0, #2
 80026cc:	f7fe fefe 	bl	80014cc <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 80026d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <leds_from_model+0xb4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <leds_from_model+0x92>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 80026da:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80026de:	2102      	movs	r1, #2
 80026e0:	2003      	movs	r0, #3
 80026e2:	f7fe fef3 	bl	80014cc <LED_SetIntent>
    }

    LED_ApplyIntents();
 80026e6:	f7fe ff11 	bl	800150c <LED_ApplyIntents>
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200002e0 	.word	0x200002e0
 80026f4:	200002e1 	.word	0x200002e1
 80026f8:	20000019 	.word	0x20000019
 80026fc:	20000328 	.word	0x20000328
 8002700:	2000032b 	.word	0x2000032b
 8002704:	20000329 	.word	0x20000329
 8002708:	2000032a 	.word	0x2000032a

0800270c <parse_mm_ss>:

/* ===== Helpers ===== */
static int parse_mm_ss(const char* p, uint8_t* mm, uint8_t* ss)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
    int m, s;
    if (sscanf(p, "%d:%d", &m, &s) == 2) {
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	f107 0214 	add.w	r2, r7, #20
 8002720:	4914      	ldr	r1, [pc, #80]	@ (8002774 <parse_mm_ss+0x68>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f005 feda 	bl	80084dc <siscanf>
 8002728:	4603      	mov	r3, r0
 800272a:	2b02      	cmp	r3, #2
 800272c:	d11d      	bne.n	800276a <parse_mm_ss+0x5e>
        if (m < 0) { m = 0; } if (m > 59) { m = 59; }
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	da01      	bge.n	8002738 <parse_mm_ss+0x2c>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b3b      	cmp	r3, #59	@ 0x3b
 800273c:	dd01      	ble.n	8002742 <parse_mm_ss+0x36>
 800273e:	233b      	movs	r3, #59	@ 0x3b
 8002740:	617b      	str	r3, [r7, #20]
        if (s < 0) { s = 0; } if (s > 59) { s = 59; }
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	da01      	bge.n	800274c <parse_mm_ss+0x40>
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002750:	dd01      	ble.n	8002756 <parse_mm_ss+0x4a>
 8002752:	233b      	movs	r3, #59	@ 0x3b
 8002754:	613b      	str	r3, [r7, #16]
        *mm = (uint8_t)m; *ss = (uint8_t)s;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	701a      	strb	r2, [r3, #0]
        return 1;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <parse_mm_ss+0x60>
    }
    return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	08009a90 	.word	0x08009a90

08002778 <ModelHandle_ProcessUartCommand>:

/* ===== Command parser (from LCD/UI or serial) ===== */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af02      	add	r7, sp, #8
 800277e:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 815f 	beq.w	8002a46 <ModelHandle_ProcessUartCommand+0x2ce>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 815a 	beq.w	8002a46 <ModelHandle_ProcessUartCommand+0x2ce>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 8002792:	49af      	ldr	r1, [pc, #700]	@ (8002a50 <ModelHandle_ProcessUartCommand+0x2d8>)
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7fd fcd9 	bl	800014c <strcmp>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <ModelHandle_ProcessUartCommand+0x30>
        motor_apply(true);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7ff fd51 	bl	8002248 <motor_apply>
 80027a6:	e14f      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 80027a8:	49aa      	ldr	r1, [pc, #680]	@ (8002a54 <ModelHandle_ProcessUartCommand+0x2dc>)
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fd fcce 	bl	800014c <strcmp>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <ModelHandle_ProcessUartCommand+0x46>
        motor_apply(false);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff fd46 	bl	8002248 <motor_apply>
 80027bc:	e144      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_ON:", 13) == 0) {
 80027be:	220d      	movs	r2, #13
 80027c0:	49a5      	ldr	r1, [pc, #660]	@ (8002a58 <ModelHandle_ProcessUartCommand+0x2e0>)
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f005 fec0 	bl	8008548 <strncmp>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11b      	bne.n	8002806 <ModelHandle_ProcessUartCommand+0x8e>
        int minutes = atoi(cmd + 13);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	330d      	adds	r3, #13
 80027d2:	4618      	mov	r0, r3
 80027d4:	f005 fda0 	bl	8008318 <atoi>
 80027d8:	61f8      	str	r0, [r7, #28]
        if (minutes < 0) minutes = 0;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	da01      	bge.n	80027e4 <ModelHandle_ProcessUartCommand+0x6c>
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
        if (minutes > 600) minutes = 600;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80027ea:	dd02      	ble.n	80027f2 <ModelHandle_ProcessUartCommand+0x7a>
 80027ec:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80027f0:	61fb      	str	r3, [r7, #28]
        countdown_start(true, (uint32_t)minutes * 60UL);
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4619      	mov	r1, r3
 80027fe:	2001      	movs	r0, #1
 8002800:	f7ff fd54 	bl	80022ac <countdown_start>
 8002804:	e120      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_OFF:", 14) == 0) {
 8002806:	220e      	movs	r2, #14
 8002808:	4994      	ldr	r1, [pc, #592]	@ (8002a5c <ModelHandle_ProcessUartCommand+0x2e4>)
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f005 fe9c 	bl	8008548 <strncmp>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11b      	bne.n	800284e <ModelHandle_ProcessUartCommand+0xd6>
        int minutes = atoi(cmd + 14);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	330e      	adds	r3, #14
 800281a:	4618      	mov	r0, r3
 800281c:	f005 fd7c 	bl	8008318 <atoi>
 8002820:	61b8      	str	r0, [r7, #24]
        if (minutes < 0) minutes = 0;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	da01      	bge.n	800282c <ModelHandle_ProcessUartCommand+0xb4>
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
        if (minutes > 600) minutes = 600;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002832:	dd02      	ble.n	800283a <ModelHandle_ProcessUartCommand+0xc2>
 8002834:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002838:	61bb      	str	r3, [r7, #24]
        countdown_start(false, (uint32_t)minutes * 60UL);
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4619      	mov	r1, r3
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff fd30 	bl	80022ac <countdown_start>
 800284c:	e0fc      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "TIMER_SET:1:", 12) == 0) {
 800284e:	220c      	movs	r2, #12
 8002850:	4983      	ldr	r1, [pc, #524]	@ (8002a60 <ModelHandle_ProcessUartCommand+0x2e8>)
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f005 fe78 	bl	8008548 <strncmp>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d136      	bne.n	80028cc <ModelHandle_ProcessUartCommand+0x154>
        uint8_t onH=0,onM=0,offH=0,offM=0;
 800285e:	2300      	movs	r3, #0
 8002860:	74fb      	strb	r3, [r7, #19]
 8002862:	2300      	movs	r3, #0
 8002864:	74bb      	strb	r3, [r7, #18]
 8002866:	2300      	movs	r3, #0
 8002868:	747b      	strb	r3, [r7, #17]
 800286a:	2300      	movs	r3, #0
 800286c:	743b      	strb	r3, [r7, #16]
        const char* p = cmd + 12;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	330c      	adds	r3, #12
 8002872:	617b      	str	r3, [r7, #20]
        if (sscanf(p, "%hhu:%hhu:%hhu:%hhu", &onH,&onM,&offH,&offM) == 4) {
 8002874:	f107 0112 	add.w	r1, r7, #18
 8002878:	f107 0213 	add.w	r2, r7, #19
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	f107 0311 	add.w	r3, r7, #17
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	460b      	mov	r3, r1
 800288a:	4976      	ldr	r1, [pc, #472]	@ (8002a64 <ModelHandle_ProcessUartCommand+0x2ec>)
 800288c:	6978      	ldr	r0, [r7, #20]
 800288e:	f005 fe25 	bl	80084dc <siscanf>
 8002892:	4603      	mov	r3, r0
 8002894:	2b04      	cmp	r3, #4
 8002896:	f040 80d7 	bne.w	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
            timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(onH,onM);
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	7cba      	ldrb	r2, [r7, #18]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fc7c 	bl	800219e <ModelHandle_TimeToSeconds>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4a6f      	ldr	r2, [pc, #444]	@ (8002a68 <ModelHandle_ProcessUartCommand+0x2f0>)
 80028aa:	6013      	str	r3, [r2, #0]
            timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(offH,offM);
 80028ac:	7c7b      	ldrb	r3, [r7, #17]
 80028ae:	7c3a      	ldrb	r2, [r7, #16]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fc73 	bl	800219e <ModelHandle_TimeToSeconds>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002a68 <ModelHandle_ProcessUartCommand+0x2f0>)
 80028bc:	6053      	str	r3, [r2, #4]
            timerSlots[0].active = true;
 80028be:	4b6a      	ldr	r3, [pc, #424]	@ (8002a68 <ModelHandle_ProcessUartCommand+0x2f0>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	721a      	strb	r2, [r3, #8]
            timerSlots[0].executedToday = false;
 80028c4:	4b68      	ldr	r3, [pc, #416]	@ (8002a68 <ModelHandle_ProcessUartCommand+0x2f0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	725a      	strb	r2, [r3, #9]
 80028ca:	e0bd      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_GAP:", 11) == 0) {
 80028cc:	220b      	movs	r2, #11
 80028ce:	4967      	ldr	r1, [pc, #412]	@ (8002a6c <ModelHandle_ProcessUartCommand+0x2f4>)
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f005 fe39 	bl	8008548 <strncmp>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d11b      	bne.n	8002914 <ModelHandle_ProcessUartCommand+0x19c>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 11, &mm, &ss)) {
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	330b      	adds	r3, #11
 80028e0:	f107 020e 	add.w	r2, r7, #14
 80028e4:	f107 010f 	add.w	r1, r7, #15
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff0f 	bl	800270c <parse_mm_ss>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a9 	beq.w	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.testingGapSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	461a      	mov	r2, r3
 8002904:	7bbb      	ldrb	r3, [r7, #14]
 8002906:	4413      	add	r3, r2
 8002908:	4a59      	ldr	r2, [pc, #356]	@ (8002a70 <ModelHandle_ProcessUartCommand+0x2f8>)
 800290a:	6053      	str	r3, [r2, #4]
            searchSettings.searchActive = true;
 800290c:	4b58      	ldr	r3, [pc, #352]	@ (8002a70 <ModelHandle_ProcessUartCommand+0x2f8>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e099      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_DRYRUN:", 14) == 0) {
 8002914:	220e      	movs	r2, #14
 8002916:	4957      	ldr	r1, [pc, #348]	@ (8002a74 <ModelHandle_ProcessUartCommand+0x2fc>)
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f005 fe15 	bl	8008548 <strncmp>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11b      	bne.n	800295c <ModelHandle_ProcessUartCommand+0x1e4>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 14, &mm, &ss)) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	330e      	adds	r3, #14
 8002928:	f107 020c 	add.w	r2, r7, #12
 800292c:	f107 010d 	add.w	r1, r7, #13
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff feeb 	bl	800270c <parse_mm_ss>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8085 	beq.w	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.dryRunTimeSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 800293e:	7b7b      	ldrb	r3, [r7, #13]
 8002940:	461a      	mov	r2, r3
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	7b3b      	ldrb	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	4a47      	ldr	r2, [pc, #284]	@ (8002a70 <ModelHandle_ProcessUartCommand+0x2f8>)
 8002952:	6093      	str	r3, [r2, #8]
            searchSettings.searchActive = true;
 8002954:	4b46      	ldr	r3, [pc, #280]	@ (8002a70 <ModelHandle_ProcessUartCommand+0x2f8>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e075      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_ONDUR:", 12) == 0) {
 800295c:	220c      	movs	r2, #12
 800295e:	4946      	ldr	r1, [pc, #280]	@ (8002a78 <ModelHandle_ProcessUartCommand+0x300>)
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f005 fdf1 	bl	8008548 <strncmp>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d122      	bne.n	80029b2 <ModelHandle_ProcessUartCommand+0x23a>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 12, &mm, &ss)) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	330c      	adds	r3, #12
 8002970:	f107 020a 	add.w	r2, r7, #10
 8002974:	f107 010b 	add.w	r1, r7, #11
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fec7 	bl	800270c <parse_mm_ss>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d061      	beq.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.onDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	461a      	mov	r2, r3
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	461a      	mov	r2, r3
 8002992:	7abb      	ldrb	r3, [r7, #10]
 8002994:	4413      	add	r3, r2
 8002996:	4a39      	ldr	r2, [pc, #228]	@ (8002a7c <ModelHandle_ProcessUartCommand+0x304>)
 8002998:	6053      	str	r3, [r2, #4]
            twistSettings.twistActive = true;
 800299a:	4b38      	ldr	r3, [pc, #224]	@ (8002a7c <ModelHandle_ProcessUartCommand+0x304>)
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 80029a0:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <ModelHandle_ProcessUartCommand+0x308>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 80029a6:	f7ff fbf3 	bl	8002190 <now_ms>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a35      	ldr	r2, [pc, #212]	@ (8002a84 <ModelHandle_ProcessUartCommand+0x30c>)
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e04a      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_OFFDUR:", 13) == 0) {
 80029b2:	220d      	movs	r2, #13
 80029b4:	4934      	ldr	r1, [pc, #208]	@ (8002a88 <ModelHandle_ProcessUartCommand+0x310>)
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f005 fdc6 	bl	8008548 <strncmp>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d122      	bne.n	8002a08 <ModelHandle_ProcessUartCommand+0x290>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 13, &mm, &ss)) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	330d      	adds	r3, #13
 80029c6:	f107 0208 	add.w	r2, r7, #8
 80029ca:	f107 0109 	add.w	r1, r7, #9
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fe9c 	bl	800270c <parse_mm_ss>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d036      	beq.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.offDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 80029da:	7a7b      	ldrb	r3, [r7, #9]
 80029dc:	461a      	mov	r2, r3
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	461a      	mov	r2, r3
 80029e8:	7a3b      	ldrb	r3, [r7, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a23      	ldr	r2, [pc, #140]	@ (8002a7c <ModelHandle_ProcessUartCommand+0x304>)
 80029ee:	6093      	str	r3, [r2, #8]
            twistSettings.twistActive = true;
 80029f0:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <ModelHandle_ProcessUartCommand+0x304>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 80029f6:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <ModelHandle_ProcessUartCommand+0x308>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 80029fc:	f7ff fbc8 	bl	8002190 <now_ms>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4a20      	ldr	r2, [pc, #128]	@ (8002a84 <ModelHandle_ProcessUartCommand+0x30c>)
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e01f      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strcmp(cmd, "TWIST_OFF") == 0) {
 8002a08:	4920      	ldr	r1, [pc, #128]	@ (8002a8c <ModelHandle_ProcessUartCommand+0x314>)
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fd fb9e 	bl	800014c <strcmp>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <ModelHandle_ProcessUartCommand+0x2ac>
        twistSettings.twistActive = false;
 8002a16:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <ModelHandle_ProcessUartCommand+0x304>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff fc13 	bl	8002248 <motor_apply>
 8002a22:	e011      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "SEARCH_OFF") == 0) {
 8002a24:	491a      	ldr	r1, [pc, #104]	@ (8002a90 <ModelHandle_ProcessUartCommand+0x318>)
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fd fb90 	bl	800014c <strcmp>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
        searchSettings.searchActive = false;
 8002a32:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <ModelHandle_ProcessUartCommand+0x2f8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
        search_in_test = false;
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <ModelHandle_ProcessUartCommand+0x31c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff fc02 	bl	8002248 <motor_apply>
 8002a44:	e000      	b.n	8002a48 <ModelHandle_ProcessUartCommand+0x2d0>
    if (!cmd || !*cmd) return;
 8002a46:	bf00      	nop
    }
}
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	08009a98 	.word	0x08009a98
 8002a54:	08009aa4 	.word	0x08009aa4
 8002a58:	08009ab0 	.word	0x08009ab0
 8002a5c:	08009ac0 	.word	0x08009ac0
 8002a60:	08009ad0 	.word	0x08009ad0
 8002a64:	08009ae0 	.word	0x08009ae0
 8002a68:	200002ec 	.word	0x200002ec
 8002a6c:	08009af4 	.word	0x08009af4
 8002a70:	2000001c 	.word	0x2000001c
 8002a74:	08009b00 	.word	0x08009b00
 8002a78:	08009b10 	.word	0x08009b10
 8002a7c:	20000028 	.word	0x20000028
 8002a80:	20000334 	.word	0x20000334
 8002a84:	20000338 	.word	0x20000338
 8002a88:	08009b20 	.word	0x08009b20
 8002a8c:	08009b30 	.word	0x08009b30
 8002a90:	08009b3c 	.word	0x08009b3c
 8002a94:	2000033c 	.word	0x2000033c

08002a98 <ModelHandle_Process>:
void ModelHandle_SetOverUnderVolt(bool on) { senseOverUnderVolt = on; }
void ModelHandle_ClearMaxRunFlag(void)     { senseMaxRunReached = false; }

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
    countdown_tick();
 8002a9c:	f7ff fc3c 	bl	8002318 <countdown_tick>
    twist_tick();
 8002aa0:	f7ff fc7e 	bl	80023a0 <twist_tick>
    search_tick();
 8002aa4:	f7ff fcca 	bl	800243c <search_tick>
    timer_tick();
 8002aa8:	f7ff fd2e 	bl	8002508 <timer_tick>
    protections_tick();
 8002aac:	f7ff fd86 	bl	80025bc <protections_tick>
    leds_from_model();
 8002ab0:	f7ff fdd0 	bl	8002654 <leds_from_model>
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <Motor_GetStatus>:

/* ===== UI helper ===== */
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <Motor_GetStatus+0x1c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	200002e0 	.word	0x200002e0

08002ad8 <Relay_Set>:
    /* Ensure off on start (change if your relay is active-low) */
    HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin|Relay2_Pin|Relay3_Pin, GPIO_PIN_RESET);
}

void Relay_Set(uint8_t relay_no, bool on)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	460a      	mov	r2, r1
 8002ae2:	71fb      	strb	r3, [r7, #7]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71bb      	strb	r3, [r7, #6]
    switch (relay_no) {
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d014      	beq.n	8002b18 <Relay_Set+0x40>
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	dc19      	bgt.n	8002b26 <Relay_Set+0x4e>
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d002      	beq.n	8002afc <Relay_Set+0x24>
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d007      	beq.n	8002b0a <Relay_Set+0x32>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        default: break;
 8002afa:	e014      	b.n	8002b26 <Relay_Set+0x4e>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8002afc:	79bb      	ldrb	r3, [r7, #6]
 8002afe:	461a      	mov	r2, r3
 8002b00:	2101      	movs	r1, #1
 8002b02:	480b      	ldr	r0, [pc, #44]	@ (8002b30 <Relay_Set+0x58>)
 8002b04:	f002 fc7f 	bl	8005406 <HAL_GPIO_WritePin>
 8002b08:	e00e      	b.n	8002b28 <Relay_Set+0x50>
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8002b0a:	79bb      	ldrb	r3, [r7, #6]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4807      	ldr	r0, [pc, #28]	@ (8002b30 <Relay_Set+0x58>)
 8002b12:	f002 fc78 	bl	8005406 <HAL_GPIO_WritePin>
 8002b16:	e007      	b.n	8002b28 <Relay_Set+0x50>
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8002b18:	79bb      	ldrb	r3, [r7, #6]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	4804      	ldr	r0, [pc, #16]	@ (8002b30 <Relay_Set+0x58>)
 8002b20:	f002 fc71 	bl	8005406 <HAL_GPIO_WritePin>
 8002b24:	e000      	b.n	8002b28 <Relay_Set+0x50>
        default: break;
 8002b26:	bf00      	nop
    }
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40010c00 	.word	0x40010c00

08002b34 <Relay_All>:
    }
    return (s == GPIO_PIN_SET);
}

void Relay_All(bool on)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	4619      	mov	r1, r3
 8002b42:	2001      	movs	r0, #1
 8002b44:	f7ff ffc8 	bl	8002ad8 <Relay_Set>
    Relay_Set(2, on);
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2002      	movs	r0, #2
 8002b4e:	f7ff ffc3 	bl	8002ad8 <Relay_Set>
    Relay_Set(3, on);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	4619      	mov	r1, r3
 8002b56:	2003      	movs	r0, #3
 8002b58:	f7ff ffbe 	bl	8002ad8 <Relay_Set>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <bcdToDec>:

uint8_t decToBcd(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

int bcdToDec(uint8_t val) {
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	461a      	mov	r2, r3
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4413      	add	r3, r2
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <Get_Time>:
        sprintf(err, "RTC Set Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
        Debug_Print(err);
    }
}

void Get_Time(void) {
 8002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b96:	b0a5      	sub	sp, #148	@ 0x94
 8002b98:	af06      	add	r7, sp, #24
    uint8_t get_time[7];

    if (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00,
 8002b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	2307      	movs	r3, #7
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2301      	movs	r3, #1
 8002bac:	2200      	movs	r2, #0
 8002bae:	21d0      	movs	r1, #208	@ 0xd0
 8002bb0:	4849      	ldr	r0, [pc, #292]	@ (8002cd8 <Get_Time+0x144>)
 8002bb2:	f002 fe9b 	bl	80058ec <HAL_I2C_Mem_Read>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d028      	beq.n	8002c0e <Get_Time+0x7a>
                         I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
        char err[50];
        sprintf(err, "RTC Read Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
 8002bbc:	4846      	ldr	r0, [pc, #280]	@ (8002cd8 <Get_Time+0x144>)
 8002bbe:	f003 fa37 	bl	8006030 <HAL_I2C_GetError>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	4945      	ldr	r1, [pc, #276]	@ (8002cdc <Get_Time+0x148>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f005 fc65 	bl	8008498 <siprintf>
        Debug_Print(err);
 8002bce:	463b      	mov	r3, r7
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff f89f 	bl	8001d14 <Debug_Print>

        time.seconds = time.minutes = time.hour =
        time.dayofweek = time.dayofmonth =
        time.month = time.year = 0xFF;
 8002bd6:	4b42      	ldr	r3, [pc, #264]	@ (8002ce0 <Get_Time+0x14c>)
 8002bd8:	22ff      	movs	r2, #255	@ 0xff
 8002bda:	719a      	strb	r2, [r3, #6]
 8002bdc:	4b40      	ldr	r3, [pc, #256]	@ (8002ce0 <Get_Time+0x14c>)
 8002bde:	799a      	ldrb	r2, [r3, #6]
 8002be0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce0 <Get_Time+0x14c>)
 8002be2:	715a      	strb	r2, [r3, #5]
 8002be4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce0 <Get_Time+0x14c>)
 8002be6:	795a      	ldrb	r2, [r3, #5]
        time.dayofweek = time.dayofmonth =
 8002be8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <Get_Time+0x14c>)
 8002bea:	711a      	strb	r2, [r3, #4]
 8002bec:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce0 <Get_Time+0x14c>)
 8002bee:	791a      	ldrb	r2, [r3, #4]
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <Get_Time+0x14c>)
 8002bf2:	70da      	strb	r2, [r3, #3]
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <Get_Time+0x14c>)
 8002bf6:	78da      	ldrb	r2, [r3, #3]
        time.seconds = time.minutes = time.hour =
 8002bf8:	4b39      	ldr	r3, [pc, #228]	@ (8002ce0 <Get_Time+0x14c>)
 8002bfa:	709a      	strb	r2, [r3, #2]
 8002bfc:	4b38      	ldr	r3, [pc, #224]	@ (8002ce0 <Get_Time+0x14c>)
 8002bfe:	789a      	ldrb	r2, [r3, #2]
 8002c00:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <Get_Time+0x14c>)
 8002c02:	705a      	strb	r2, [r3, #1]
 8002c04:	4b36      	ldr	r3, [pc, #216]	@ (8002ce0 <Get_Time+0x14c>)
 8002c06:	785a      	ldrb	r2, [r3, #1]
 8002c08:	4b35      	ldr	r3, [pc, #212]	@ (8002ce0 <Get_Time+0x14c>)
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e061      	b.n	8002cd2 <Get_Time+0x13e>
        return;
    }

    char dbg[60];
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
            get_time[0], get_time[1], get_time[2],
 8002c0e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c12:	461e      	mov	r6, r3
            get_time[0], get_time[1], get_time[2],
 8002c14:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c18:	469c      	mov	ip, r3
            get_time[0], get_time[1], get_time[2],
 8002c1a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
            get_time[3], get_time[4], get_time[5], get_time[6]);
 8002c1e:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8002c22:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 8002c26:	f897 0075 	ldrb.w	r0, [r7, #117]	@ 0x75
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c2a:	4604      	mov	r4, r0
            get_time[3], get_time[4], get_time[5], get_time[6]);
 8002c2c:	f897 0076 	ldrb.w	r0, [r7, #118]	@ 0x76
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c30:	4605      	mov	r5, r0
 8002c32:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002c36:	9504      	str	r5, [sp, #16]
 8002c38:	9403      	str	r4, [sp, #12]
 8002c3a:	9102      	str	r1, [sp, #8]
 8002c3c:	9201      	str	r2, [sp, #4]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	4663      	mov	r3, ip
 8002c42:	4632      	mov	r2, r6
 8002c44:	4927      	ldr	r1, [pc, #156]	@ (8002ce4 <Get_Time+0x150>)
 8002c46:	f005 fc27 	bl	8008498 <siprintf>
    Debug_Print(dbg);
 8002c4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f860 	bl	8001d14 <Debug_Print>

    time.seconds    = bcdToDec(get_time[0]);
 8002c54:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff83 	bl	8002b64 <bcdToDec>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce0 <Get_Time+0x14c>)
 8002c64:	701a      	strb	r2, [r3, #0]
    time.minutes    = bcdToDec(get_time[1]);
 8002c66:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff7a 	bl	8002b64 <bcdToDec>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <Get_Time+0x14c>)
 8002c76:	705a      	strb	r2, [r3, #1]
    time.hour       = bcdToDec(get_time[2]);
 8002c78:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff71 	bl	8002b64 <bcdToDec>
 8002c82:	4603      	mov	r3, r0
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <Get_Time+0x14c>)
 8002c88:	709a      	strb	r2, [r3, #2]
    time.dayofweek  = bcdToDec(get_time[3]);
 8002c8a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff68 	bl	8002b64 <bcdToDec>
 8002c94:	4603      	mov	r3, r0
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <Get_Time+0x14c>)
 8002c9a:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcdToDec(get_time[4]);
 8002c9c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5f 	bl	8002b64 <bcdToDec>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <Get_Time+0x14c>)
 8002cac:	711a      	strb	r2, [r3, #4]
    time.month      = bcdToDec(get_time[5]);
 8002cae:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff56 	bl	8002b64 <bcdToDec>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <Get_Time+0x14c>)
 8002cbe:	715a      	strb	r2, [r3, #5]
    time.year       = bcdToDec(get_time[6]);
 8002cc0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff4d 	bl	8002b64 <bcdToDec>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <Get_Time+0x14c>)
 8002cd0:	719a      	strb	r2, [r3, #6]
}
 8002cd2:	377c      	adds	r7, #124	@ 0x7c
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd8:	20000160 	.word	0x20000160
 8002cdc:	08009b6c 	.word	0x08009b6c
 8002ce0:	20000344 	.word	0x20000344
 8002ce4:	08009b84 	.word	0x08009b84

08002ce8 <lcd_line0>:
static bool switch2_prev = true;
static bool switch3_prev = true;
static bool switch4_prev = true;

/* ================= Helpers ================= */
static void lcd_line0(const char* s){ lcd_put_cur(0,0); lcd_send_string((char*)s); }
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fe fa92 	bl	800121c <lcd_put_cur>
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fe fab1 	bl	8001260 <lcd_send_string>
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <lcd_line1>:
static void lcd_line1(const char* s){ lcd_put_cur(1,0); lcd_send_string((char*)s); }
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7fe fa83 	bl	800121c <lcd_put_cur>
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe faa2 	bl	8001260 <lcd_send_string>
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <lcd_line0_full>:

static void lcd_line0_full(const char* s) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    char ln[21];
    snprintf(ln, sizeof(ln), "%-20s", s); // pad with spaces
 8002d2c:	f107 0008 	add.w	r0, r7, #8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a08      	ldr	r2, [pc, #32]	@ (8002d54 <lcd_line0_full+0x30>)
 8002d34:	2115      	movs	r1, #21
 8002d36:	f005 fb79 	bl	800842c <sniprintf>
    lcd_put_cur(0,0);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fe fa6d 	bl	800121c <lcd_put_cur>
    lcd_send_string(ln);
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fa8a 	bl	8001260 <lcd_send_string>
}
 8002d4c:	bf00      	nop
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	08009ca8 	.word	0x08009ca8

08002d58 <lcd_line1_full>:
static void lcd_line1_full(const char* s) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
    char ln[21];
    snprintf(ln, sizeof(ln), "%-20s", s);
 8002d60:	f107 0008 	add.w	r0, r7, #8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a08      	ldr	r2, [pc, #32]	@ (8002d88 <lcd_line1_full+0x30>)
 8002d68:	2115      	movs	r1, #21
 8002d6a:	f005 fb5f 	bl	800842c <sniprintf>
    lcd_put_cur(1,0);
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7fe fa53 	bl	800121c <lcd_put_cur>
    lcd_send_string(ln);
 8002d76:	f107 0308 	add.w	r3, r7, #8
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fa70 	bl	8001260 <lcd_send_string>
}
 8002d80:	bf00      	nop
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	08009ca8 	.word	0x08009ca8

08002d8c <goto_dash_cycle>:
static void goto_dash_cycle(void) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
    if (ui < UI_DASH_WATER || ui > UI_DASH_TWIST) ui = UI_DASH_WATER;
 8002d90:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <goto_dash_cycle+0x24>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <goto_dash_cycle+0x14>
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <goto_dash_cycle+0x24>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d902      	bls.n	8002da6 <goto_dash_cycle+0x1a>
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <goto_dash_cycle+0x24>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000350 	.word	0x20000350

08002db4 <show_dash_water>:
    lcd_clear();
    lcd_line0("Welcome to");
    lcd_line1("HELONIX");
}

static void show_dash_water(void){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af02      	add	r7, sp, #8
    // headline
    snprintf(buf, sizeof(buf), "Water V0: %.2fV", adcData.voltages[0]);
 8002dba:	4b1f      	ldr	r3, [pc, #124]	@ (8002e38 <show_dash_water+0x84>)
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fb3a 	bl	8000438 <__aeabi_f2d>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	e9cd 2300 	strd	r2, r3, [sp]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <show_dash_water+0x88>)
 8002dce:	2115      	movs	r1, #21
 8002dd0:	481b      	ldr	r0, [pc, #108]	@ (8002e40 <show_dash_water+0x8c>)
 8002dd2:	f005 fb2b 	bl	800842c <sniprintf>
    lcd_line0(buf);
 8002dd6:	481a      	ldr	r0, [pc, #104]	@ (8002e40 <show_dash_water+0x8c>)
 8002dd8:	f7ff ff86 	bl	8002ce8 <lcd_line0>

    // simple status from your earlier logic
    if      (adcData.voltages[0] > 2.5f)  lcd_line1("Status: Full");
 8002ddc:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <show_dash_water+0x84>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4918      	ldr	r1, [pc, #96]	@ (8002e44 <show_dash_water+0x90>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fe4a 	bl	8000a7c <__aeabi_fcmpgt>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <show_dash_water+0x42>
 8002dee:	4816      	ldr	r0, [pc, #88]	@ (8002e48 <show_dash_water+0x94>)
 8002df0:	f7ff ff89 	bl	8002d06 <lcd_line1>
    else if (adcData.voltages[0] > 1.0f)  lcd_line1("Status: Half");
    else if (adcData.voltages[0] > 0.1f)  lcd_line1("Status: Low");
    else                                  lcd_line1("Status: Empty");
}
 8002df4:	e01d      	b.n	8002e32 <show_dash_water+0x7e>
    else if (adcData.voltages[0] > 1.0f)  lcd_line1("Status: Half");
 8002df6:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <show_dash_water+0x84>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fe3c 	bl	8000a7c <__aeabi_fcmpgt>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <show_dash_water+0x5e>
 8002e0a:	4810      	ldr	r0, [pc, #64]	@ (8002e4c <show_dash_water+0x98>)
 8002e0c:	f7ff ff7b 	bl	8002d06 <lcd_line1>
}
 8002e10:	e00f      	b.n	8002e32 <show_dash_water+0x7e>
    else if (adcData.voltages[0] > 0.1f)  lcd_line1("Status: Low");
 8002e12:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <show_dash_water+0x84>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	490e      	ldr	r1, [pc, #56]	@ (8002e50 <show_dash_water+0x9c>)
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd fe2f 	bl	8000a7c <__aeabi_fcmpgt>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <show_dash_water+0x78>
 8002e24:	480b      	ldr	r0, [pc, #44]	@ (8002e54 <show_dash_water+0xa0>)
 8002e26:	f7ff ff6e 	bl	8002d06 <lcd_line1>
}
 8002e2a:	e002      	b.n	8002e32 <show_dash_water+0x7e>
    else                                  lcd_line1("Status: Empty");
 8002e2c:	480a      	ldr	r0, [pc, #40]	@ (8002e58 <show_dash_water+0xa4>)
 8002e2e:	f7ff ff6a 	bl	8002d06 <lcd_line1>
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000268 	.word	0x20000268
 8002e3c:	08009cc4 	.word	0x08009cc4
 8002e40:	20000354 	.word	0x20000354
 8002e44:	40200000 	.word	0x40200000
 8002e48:	08009cd4 	.word	0x08009cd4
 8002e4c:	08009ce4 	.word	0x08009ce4
 8002e50:	3dcccccd 	.word	0x3dcccccd
 8002e54:	08009cf4 	.word	0x08009cf4
 8002e58:	08009d00 	.word	0x08009d00

08002e5c <show_dash_mode>:

static void show_dash_mode(void){
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af02      	add	r7, sp, #8
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
             Motor_GetStatus() ? "ON":"OFF",
 8002e62:	f7ff fe29 	bl	8002ab8 <Motor_GetStatus>
 8002e66:	4603      	mov	r3, r0
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <show_dash_mode+0x14>
 8002e6c:	4a10      	ldr	r2, [pc, #64]	@ (8002eb0 <show_dash_mode+0x54>)
 8002e6e:	e000      	b.n	8002e72 <show_dash_mode+0x16>
 8002e70:	4a10      	ldr	r2, [pc, #64]	@ (8002eb4 <show_dash_mode+0x58>)
             countdownActive ? (countdownMode?"ON":"OFF") : "NA");
 8002e72:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <show_dash_mode+0x5c>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	b2db      	uxtb	r3, r3
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <show_dash_mode+0x32>
             countdownActive ? (countdownMode?"ON":"OFF") : "NA");
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ebc <show_dash_mode+0x60>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <show_dash_mode+0x2e>
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <show_dash_mode+0x54>)
 8002e88:	e002      	b.n	8002e90 <show_dash_mode+0x34>
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <show_dash_mode+0x58>)
 8002e8c:	e000      	b.n	8002e90 <show_dash_mode+0x34>
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <show_dash_mode+0x64>)
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec4 <show_dash_mode+0x68>)
 8002e96:	2115      	movs	r1, #21
 8002e98:	480b      	ldr	r0, [pc, #44]	@ (8002ec8 <show_dash_mode+0x6c>)
 8002e9a:	f005 fac7 	bl	800842c <sniprintf>
    lcd_line0(buf);
 8002e9e:	480a      	ldr	r0, [pc, #40]	@ (8002ec8 <show_dash_mode+0x6c>)
 8002ea0:	f7ff ff22 	bl	8002ce8 <lcd_line0>

    lcd_line1("Menu: Press SEL");
 8002ea4:	4809      	ldr	r0, [pc, #36]	@ (8002ecc <show_dash_mode+0x70>)
 8002ea6:	f7ff ff2e 	bl	8002d06 <lcd_line1>
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	08009d10 	.word	0x08009d10
 8002eb4:	08009d14 	.word	0x08009d14
 8002eb8:	200002e1 	.word	0x200002e1
 8002ebc:	20000019 	.word	0x20000019
 8002ec0:	08009d18 	.word	0x08009d18
 8002ec4:	08009d1c 	.word	0x08009d1c
 8002ec8:	20000354 	.word	0x20000354
 8002ecc:	08009d2c 	.word	0x08009d2c

08002ed0 <show_dash_search>:

static void show_dash_search(void){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af02      	add	r7, sp, #8
    lcd_line0("Search Mode");
 8002ed6:	480e      	ldr	r0, [pc, #56]	@ (8002f10 <show_dash_search+0x40>)
 8002ed8:	f7ff ff06 	bl	8002ce8 <lcd_line0>
    if (searchSettings.searchActive) {
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <show_dash_search+0x44>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00f      	beq.n	8002f04 <show_dash_search+0x34>
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
                 (int)searchSettings.testingGapSeconds,
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <show_dash_search+0x44>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
 8002ee8:	461a      	mov	r2, r3
                 (int)searchSettings.dryRunTimeSeconds);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <show_dash_search+0x44>)
 8002eec:	689b      	ldr	r3, [r3, #8]
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	4a09      	ldr	r2, [pc, #36]	@ (8002f18 <show_dash_search+0x48>)
 8002ef4:	2115      	movs	r1, #21
 8002ef6:	4809      	ldr	r0, [pc, #36]	@ (8002f1c <show_dash_search+0x4c>)
 8002ef8:	f005 fa98 	bl	800842c <sniprintf>
        lcd_line1(buf);
 8002efc:	4807      	ldr	r0, [pc, #28]	@ (8002f1c <show_dash_search+0x4c>)
 8002efe:	f7ff ff02 	bl	8002d06 <lcd_line1>
    } else {
        lcd_line1("Inactive");
    }
}
 8002f02:	e002      	b.n	8002f0a <show_dash_search+0x3a>
        lcd_line1("Inactive");
 8002f04:	4806      	ldr	r0, [pc, #24]	@ (8002f20 <show_dash_search+0x50>)
 8002f06:	f7ff fefe 	bl	8002d06 <lcd_line1>
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	08009d3c 	.word	0x08009d3c
 8002f14:	2000001c 	.word	0x2000001c
 8002f18:	08009d48 	.word	0x08009d48
 8002f1c:	20000354 	.word	0x20000354
 8002f20:	08009d58 	.word	0x08009d58

08002f24 <show_dash_twist>:

static void show_dash_twist(void){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af02      	add	r7, sp, #8
    lcd_line0("Twist Mode");
 8002f2a:	480e      	ldr	r0, [pc, #56]	@ (8002f64 <show_dash_twist+0x40>)
 8002f2c:	f7ff fedc 	bl	8002ce8 <lcd_line0>
    if (twistSettings.twistActive) {
 8002f30:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <show_dash_twist+0x44>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00f      	beq.n	8002f58 <show_dash_twist+0x34>
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
                 (int)twistSettings.onDurationSeconds,
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <show_dash_twist+0x44>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
 8002f3c:	461a      	mov	r2, r3
                 (int)twistSettings.offDurationSeconds);
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <show_dash_twist+0x44>)
 8002f40:	689b      	ldr	r3, [r3, #8]
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	4a09      	ldr	r2, [pc, #36]	@ (8002f6c <show_dash_twist+0x48>)
 8002f48:	2115      	movs	r1, #21
 8002f4a:	4809      	ldr	r0, [pc, #36]	@ (8002f70 <show_dash_twist+0x4c>)
 8002f4c:	f005 fa6e 	bl	800842c <sniprintf>
        lcd_line1(buf);
 8002f50:	4807      	ldr	r0, [pc, #28]	@ (8002f70 <show_dash_twist+0x4c>)
 8002f52:	f7ff fed8 	bl	8002d06 <lcd_line1>
    } else {
        lcd_line1("Inactive");
    }
}
 8002f56:	e002      	b.n	8002f5e <show_dash_twist+0x3a>
        lcd_line1("Inactive");
 8002f58:	4806      	ldr	r0, [pc, #24]	@ (8002f74 <show_dash_twist+0x50>)
 8002f5a:	f7ff fed4 	bl	8002d06 <lcd_line1>
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	08009d64 	.word	0x08009d64
 8002f68:	20000028 	.word	0x20000028
 8002f6c:	08009d70 	.word	0x08009d70
 8002f70:	20000354 	.word	0x20000354
 8002f74:	08009d58 	.word	0x08009d58

08002f78 <show_menu>:

static void show_menu(void){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af02      	add	r7, sp, #8
    char cursor = cursorVisible ? '>' : ' ';   // blink effect
 8002f7e:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <show_menu+0x4c>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <show_menu+0x12>
 8002f86:	233e      	movs	r3, #62	@ 0x3e
 8002f88:	e000      	b.n	8002f8c <show_menu+0x14>
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	71fb      	strb	r3, [r7, #7]
    snprintf(buf, sizeof(buf), "%c%s", cursor, menu_items[menu_idx]);
 8002f8e:	79fa      	ldrb	r2, [r7, #7]
 8002f90:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc8 <show_menu+0x50>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4619      	mov	r1, r3
 8002f96:	4b0d      	ldr	r3, [pc, #52]	@ (8002fcc <show_menu+0x54>)
 8002f98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd0 <show_menu+0x58>)
 8002fa2:	2115      	movs	r1, #21
 8002fa4:	480b      	ldr	r0, [pc, #44]	@ (8002fd4 <show_menu+0x5c>)
 8002fa6:	f005 fa41 	bl	800842c <sniprintf>
    buf[20]='\0';
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <show_menu+0x5c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	751a      	strb	r2, [r3, #20]
    lcd_line0_full(buf);
 8002fb0:	4808      	ldr	r0, [pc, #32]	@ (8002fd4 <show_menu+0x5c>)
 8002fb2:	f7ff feb7 	bl	8002d24 <lcd_line0_full>
    lcd_line1_full("UP/DN:Move  SEL:OK");
 8002fb6:	4808      	ldr	r0, [pc, #32]	@ (8002fd8 <show_menu+0x60>)
 8002fb8:	f7ff fece 	bl	8002d58 <lcd_line1_full>
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000035 	.word	0x20000035
 8002fc8:	2000036c 	.word	0x2000036c
 8002fcc:	20000038 	.word	0x20000038
 8002fd0:	08009d80 	.word	0x08009d80
 8002fd4:	20000354 	.word	0x20000354
 8002fd8:	08009d88 	.word	0x08009d88

08002fdc <show_edit_mm>:

/* generic editor screens */
static void show_edit_mm(const char* title, uint8_t mm){
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
    lcd_clear();
 8002fe8:	f7fe f90b 	bl	8001202 <lcd_clear>
    lcd_line0(title);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fe7b 	bl	8002ce8 <lcd_line0>
    snprintf(buf, sizeof(buf), "Value: %02u", mm);
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	4a05      	ldr	r2, [pc, #20]	@ (800300c <show_edit_mm+0x30>)
 8002ff6:	2115      	movs	r1, #21
 8002ff8:	4805      	ldr	r0, [pc, #20]	@ (8003010 <show_edit_mm+0x34>)
 8002ffa:	f005 fa17 	bl	800842c <sniprintf>
    lcd_line1(buf);
 8002ffe:	4804      	ldr	r0, [pc, #16]	@ (8003010 <show_edit_mm+0x34>)
 8003000:	f7ff fe81 	bl	8002d06 <lcd_line1>
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	08009d9c 	.word	0x08009d9c
 8003010:	20000354 	.word	0x20000354

08003014 <show_edit_ms>:

static void show_edit_ms(const char* title, uint8_t mm, uint8_t ss){
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
 8003020:	4613      	mov	r3, r2
 8003022:	70bb      	strb	r3, [r7, #2]
    lcd_clear();
 8003024:	f7fe f8ed 	bl	8001202 <lcd_clear>
    lcd_line0(title);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fe5d 	bl	8002ce8 <lcd_line0>
    snprintf(buf, sizeof(buf), "%02u:%02u  UP/DN  SEL:OK", mm, ss);
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	78bb      	ldrb	r3, [r7, #2]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	4a06      	ldr	r2, [pc, #24]	@ (8003050 <show_edit_ms+0x3c>)
 8003038:	2115      	movs	r1, #21
 800303a:	4806      	ldr	r0, [pc, #24]	@ (8003054 <show_edit_ms+0x40>)
 800303c:	f005 f9f6 	bl	800842c <sniprintf>
    lcd_line1(buf);
 8003040:	4804      	ldr	r0, [pc, #16]	@ (8003054 <show_edit_ms+0x40>)
 8003042:	f7ff fe60 	bl	8002d06 <lcd_line1>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	08009da8 	.word	0x08009da8
 8003054:	20000354 	.word	0x20000354

08003058 <show_edit_hhmm>:

static void show_edit_hhmm(const char* title, uint8_t hh, uint8_t mm){
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af02      	add	r7, sp, #8
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
 8003064:	4613      	mov	r3, r2
 8003066:	70bb      	strb	r3, [r7, #2]
    lcd_clear();
 8003068:	f7fe f8cb 	bl	8001202 <lcd_clear>
    lcd_line0(title);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff fe3b 	bl	8002ce8 <lcd_line0>
    snprintf(buf, sizeof(buf), "%02u:%02u  UP/DN  SEL:Next", hh, mm);
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	78bb      	ldrb	r3, [r7, #2]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	4a06      	ldr	r2, [pc, #24]	@ (8003094 <show_edit_hhmm+0x3c>)
 800307c:	2115      	movs	r1, #21
 800307e:	4806      	ldr	r0, [pc, #24]	@ (8003098 <show_edit_hhmm+0x40>)
 8003080:	f005 f9d4 	bl	800842c <sniprintf>
    lcd_line1(buf);
 8003084:	4804      	ldr	r0, [pc, #16]	@ (8003098 <show_edit_hhmm+0x40>)
 8003086:	f7ff fe3e 	bl	8002d06 <lcd_line1>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	08009dc4 	.word	0x08009dc4
 8003098:	20000354 	.word	0x20000354

0800309c <apply_menu_action>:

static void apply_menu_action(void){
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
    switch(menu_idx){
 80030a0:	4b35      	ldr	r3, [pc, #212]	@ (8003178 <apply_menu_action+0xdc>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d865      	bhi.n	8003174 <apply_menu_action+0xd8>
 80030a8:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <apply_menu_action+0x14>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030d9 	.word	0x080030d9
 80030b4:	080030e1 	.word	0x080030e1
 80030b8:	080030e9 	.word	0x080030e9
 80030bc:	080030f7 	.word	0x080030f7
 80030c0:	0800310b 	.word	0x0800310b
 80030c4:	0800311f 	.word	0x0800311f
 80030c8:	08003133 	.word	0x08003133
 80030cc:	08003147 	.word	0x08003147
 80030d0:	0800315b 	.word	0x0800315b
 80030d4:	0800316f 	.word	0x0800316f
        case 0: ui = UI_CONFIRM_MANUAL_ON;  break;
 80030d8:	4b28      	ldr	r3, [pc, #160]	@ (800317c <apply_menu_action+0xe0>)
 80030da:	2213      	movs	r2, #19
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e049      	b.n	8003174 <apply_menu_action+0xd8>
        case 1: ui = UI_CONFIRM_MANUAL_OFF; break;
 80030e0:	4b26      	ldr	r3, [pc, #152]	@ (800317c <apply_menu_action+0xe0>)
 80030e2:	2214      	movs	r2, #20
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e045      	b.n	8003174 <apply_menu_action+0xd8>
        case 2: temp_m = 10; ui = UI_EDIT_COUNTDOWN_MIN; break;
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <apply_menu_action+0xe4>)
 80030ea:	220a      	movs	r2, #10
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	4b23      	ldr	r3, [pc, #140]	@ (800317c <apply_menu_action+0xe0>)
 80030f0:	2206      	movs	r2, #6
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e03e      	b.n	8003174 <apply_menu_action+0xd8>
        case 3: /* Timer1 ON hh:mm */
            temp_h = 6; temp_m = 0; ui = UI_EDIT_TIMER1_ON_H; break;
 80030f6:	4b23      	ldr	r3, [pc, #140]	@ (8003184 <apply_menu_action+0xe8>)
 80030f8:	2206      	movs	r2, #6
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <apply_menu_action+0xe4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	4b1e      	ldr	r3, [pc, #120]	@ (800317c <apply_menu_action+0xe0>)
 8003104:	2207      	movs	r2, #7
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e034      	b.n	8003174 <apply_menu_action+0xd8>
        case 4: /* Timer1 OFF hh:mm */
            temp_h = 7; temp_m = 0; ui = UI_EDIT_TIMER1_OFF_H; break;
 800310a:	4b1e      	ldr	r3, [pc, #120]	@ (8003184 <apply_menu_action+0xe8>)
 800310c:	2207      	movs	r2, #7
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <apply_menu_action+0xe4>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	4b19      	ldr	r3, [pc, #100]	@ (800317c <apply_menu_action+0xe0>)
 8003118:	2209      	movs	r2, #9
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e02a      	b.n	8003174 <apply_menu_action+0xd8>
        case 5: /* Search gap mm:ss */
            temp_m = 0; temp_s = 30; ui = UI_EDIT_SEARCH_GAP_M; break;
 800311e:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <apply_menu_action+0xe4>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <apply_menu_action+0xec>)
 8003126:	221e      	movs	r2, #30
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	4b14      	ldr	r3, [pc, #80]	@ (800317c <apply_menu_action+0xe0>)
 800312c:	220b      	movs	r2, #11
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e020      	b.n	8003174 <apply_menu_action+0xd8>
        case 6: /* Search dry run mm:ss */
            temp_m = 0; temp_s = 10; ui = UI_EDIT_SEARCH_DRY_M; break;
 8003132:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <apply_menu_action+0xe4>)
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	4b13      	ldr	r3, [pc, #76]	@ (8003188 <apply_menu_action+0xec>)
 800313a:	220a      	movs	r2, #10
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <apply_menu_action+0xe0>)
 8003140:	220d      	movs	r2, #13
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e016      	b.n	8003174 <apply_menu_action+0xd8>
        case 7: /* Twist ON mm:ss */
            temp_m = 0; temp_s = 20; ui = UI_EDIT_TWIST_ON_M; break;
 8003146:	4b0e      	ldr	r3, [pc, #56]	@ (8003180 <apply_menu_action+0xe4>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <apply_menu_action+0xec>)
 800314e:	2214      	movs	r2, #20
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <apply_menu_action+0xe0>)
 8003154:	220f      	movs	r2, #15
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e00c      	b.n	8003174 <apply_menu_action+0xd8>
        case 8: /* Twist OFF mm:ss */
            temp_m = 0; temp_s = 40; ui = UI_EDIT_TWIST_OFF_M; break;
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <apply_menu_action+0xe4>)
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <apply_menu_action+0xec>)
 8003162:	2228      	movs	r2, #40	@ 0x28
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <apply_menu_action+0xe0>)
 8003168:	2211      	movs	r2, #17
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e002      	b.n	8003174 <apply_menu_action+0xd8>
        case 9: goto_dash_cycle(); break;
 800316e:	f7ff fe0d 	bl	8002d8c <goto_dash_cycle>
 8003172:	bf00      	nop
    }
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000036c 	.word	0x2000036c
 800317c:	20000350 	.word	0x20000350
 8003180:	2000036a 	.word	0x2000036a
 8003184:	20000369 	.word	0x20000369
 8003188:	2000036b 	.word	0x2000036b

0800318c <send_cmd>:

/* send commands into your existing model handlers */
static void send_cmd(const char* cmd){
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    ModelHandle_ProcessUartCommand(cmd);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff faef 	bl	8002778 <ModelHandle_ProcessUartCommand>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <Screen_Update>:

/* ================= Public API ================= */
void Screen_Update(void){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80031aa:	f001 f9a5 	bl	80044f8 <HAL_GetTick>
 80031ae:	6078      	str	r0, [r7, #4]

    // Handle cursor blinking every CURSOR_BLINK_MS milliseconds
    static uint32_t lastCursorBlink = 0;
    if (now - lastCursorBlink >= CURSOR_BLINK_MS) {
 80031b0:	4b99      	ldr	r3, [pc, #612]	@ (8003418 <Screen_Update+0x274>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031bc:	d317      	bcc.n	80031ee <Screen_Update+0x4a>
        cursorVisible = !cursorVisible;
 80031be:	4b97      	ldr	r3, [pc, #604]	@ (800341c <Screen_Update+0x278>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f083 0301 	eor.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	4b90      	ldr	r3, [pc, #576]	@ (800341c <Screen_Update+0x278>)
 80031da:	701a      	strb	r2, [r3, #0]
        lastCursorBlink = now;
 80031dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003418 <Screen_Update+0x274>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
        // Only refresh menu screen cursor blink without full redraw
        if (ui == UI_MENU) {
 80031e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003420 <Screen_Update+0x27c>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d101      	bne.n	80031ee <Screen_Update+0x4a>
            show_menu();
 80031ea:	f7ff fec5 	bl	8002f78 <show_menu>
        }
    }

    // Handle welcome screen timeout and page auto-advance
    if (ui == UI_WELCOME){
 80031ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003420 <Screen_Update+0x27c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d111      	bne.n	800321a <Screen_Update+0x76>
        if (now - lastLcdUpdateTime >= WELCOME_MS){
 80031f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003424 <Screen_Update+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003202:	4293      	cmp	r3, r2
 8003204:	d32c      	bcc.n	8003260 <Screen_Update+0xbc>
            ui = UI_DASH_WATER;
 8003206:	4b86      	ldr	r3, [pc, #536]	@ (8003420 <Screen_Update+0x27c>)
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
            lastLcdUpdateTime = now;
 800320c:	4a85      	ldr	r2, [pc, #532]	@ (8003424 <Screen_Update+0x280>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6013      	str	r3, [r2, #0]
            screenNeedsRefresh = true;
 8003212:	4b85      	ldr	r3, [pc, #532]	@ (8003428 <Screen_Update+0x284>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e022      	b.n	8003260 <Screen_Update+0xbc>
        }
    }
    else if (ui >= UI_DASH_WATER && ui <= UI_DASH_TWIST){
 800321a:	4b81      	ldr	r3, [pc, #516]	@ (8003420 <Screen_Update+0x27c>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01e      	beq.n	8003260 <Screen_Update+0xbc>
 8003222:	4b7f      	ldr	r3, [pc, #508]	@ (8003420 <Screen_Update+0x27c>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d81a      	bhi.n	8003260 <Screen_Update+0xbc>
        if (now - lastLcdUpdateTime >= PAGE_MS){
 800322a:	4b7e      	ldr	r3, [pc, #504]	@ (8003424 <Screen_Update+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003236:	4293      	cmp	r3, r2
 8003238:	d312      	bcc.n	8003260 <Screen_Update+0xbc>
            ui = (UiState)(ui + 1);
 800323a:	4b79      	ldr	r3, [pc, #484]	@ (8003420 <Screen_Update+0x27c>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b77      	ldr	r3, [pc, #476]	@ (8003420 <Screen_Update+0x27c>)
 8003244:	701a      	strb	r2, [r3, #0]
            if (ui > UI_DASH_TWIST) ui = UI_DASH_WATER;
 8003246:	4b76      	ldr	r3, [pc, #472]	@ (8003420 <Screen_Update+0x27c>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b04      	cmp	r3, #4
 800324c:	d902      	bls.n	8003254 <Screen_Update+0xb0>
 800324e:	4b74      	ldr	r3, [pc, #464]	@ (8003420 <Screen_Update+0x27c>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
            lastLcdUpdateTime = now;
 8003254:	4a73      	ldr	r2, [pc, #460]	@ (8003424 <Screen_Update+0x280>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6013      	str	r3, [r2, #0]
            screenNeedsRefresh = true;
 800325a:	4b73      	ldr	r3, [pc, #460]	@ (8003428 <Screen_Update+0x284>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
        }
    }

    // Only redraw if flagged
    if (screenNeedsRefresh || ui != last_ui) {
 8003260:	4b71      	ldr	r3, [pc, #452]	@ (8003428 <Screen_Update+0x284>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <Screen_Update+0xd2>
 8003268:	4b6d      	ldr	r3, [pc, #436]	@ (8003420 <Screen_Update+0x27c>)
 800326a:	781a      	ldrb	r2, [r3, #0]
 800326c:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <Screen_Update+0x288>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	f000 80cc 	beq.w	800340e <Screen_Update+0x26a>
        lcd_clear();
 8003276:	f7fd ffc4 	bl	8001202 <lcd_clear>
        last_ui = ui;
 800327a:	4b69      	ldr	r3, [pc, #420]	@ (8003420 <Screen_Update+0x27c>)
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	4b6b      	ldr	r3, [pc, #428]	@ (800342c <Screen_Update+0x288>)
 8003280:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 8003282:	4b69      	ldr	r3, [pc, #420]	@ (8003428 <Screen_Update+0x284>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]

        // Render current UI page
        switch(ui){
 8003288:	4b65      	ldr	r3, [pc, #404]	@ (8003420 <Screen_Update+0x27c>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	3b01      	subs	r3, #1
 800328e:	2b13      	cmp	r3, #19
 8003290:	f200 80bc 	bhi.w	800340c <Screen_Update+0x268>
 8003294:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <Screen_Update+0xf8>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032ed 	.word	0x080032ed
 80032a0:	080032f3 	.word	0x080032f3
 80032a4:	080032f9 	.word	0x080032f9
 80032a8:	080032ff 	.word	0x080032ff
 80032ac:	08003305 	.word	0x08003305
 80032b0:	08003327 	.word	0x08003327
 80032b4:	08003335 	.word	0x08003335
 80032b8:	08003347 	.word	0x08003347
 80032bc:	08003359 	.word	0x08003359
 80032c0:	0800336b 	.word	0x0800336b
 80032c4:	0800337d 	.word	0x0800337d
 80032c8:	0800338f 	.word	0x0800338f
 80032cc:	080033a1 	.word	0x080033a1
 80032d0:	080033b3 	.word	0x080033b3
 80032d4:	080033c5 	.word	0x080033c5
 80032d8:	080033d7 	.word	0x080033d7
 80032dc:	080033e9 	.word	0x080033e9
 80032e0:	080033fb 	.word	0x080033fb
 80032e4:	0800330b 	.word	0x0800330b
 80032e8:	08003319 	.word	0x08003319
            case UI_DASH_WATER:  show_dash_water();  break;
 80032ec:	f7ff fd62 	bl	8002db4 <show_dash_water>
 80032f0:	e08d      	b.n	800340e <Screen_Update+0x26a>
            case UI_DASH_MODE:   show_dash_mode();   break;
 80032f2:	f7ff fdb3 	bl	8002e5c <show_dash_mode>
 80032f6:	e08a      	b.n	800340e <Screen_Update+0x26a>
            case UI_DASH_SEARCH: show_dash_search(); break;
 80032f8:	f7ff fdea 	bl	8002ed0 <show_dash_search>
 80032fc:	e087      	b.n	800340e <Screen_Update+0x26a>
            case UI_DASH_TWIST:  show_dash_twist();  break;
 80032fe:	f7ff fe11 	bl	8002f24 <show_dash_twist>
 8003302:	e084      	b.n	800340e <Screen_Update+0x26a>
            case UI_MENU:        show_menu();        break;
 8003304:	f7ff fe38 	bl	8002f78 <show_menu>
 8003308:	e081      	b.n	800340e <Screen_Update+0x26a>

            case UI_CONFIRM_MANUAL_ON:
                lcd_line0("Manual -> ON");
 800330a:	4849      	ldr	r0, [pc, #292]	@ (8003430 <Screen_Update+0x28c>)
 800330c:	f7ff fcec 	bl	8002ce8 <lcd_line0>
                lcd_line1("SEL:OK  UP/DN:Back");
 8003310:	4848      	ldr	r0, [pc, #288]	@ (8003434 <Screen_Update+0x290>)
 8003312:	f7ff fcf8 	bl	8002d06 <lcd_line1>
                break;
 8003316:	e07a      	b.n	800340e <Screen_Update+0x26a>
            case UI_CONFIRM_MANUAL_OFF:
                lcd_line0("Manual -> OFF");
 8003318:	4847      	ldr	r0, [pc, #284]	@ (8003438 <Screen_Update+0x294>)
 800331a:	f7ff fce5 	bl	8002ce8 <lcd_line0>
                lcd_line1("SEL:OK  UP/DN:Back");
 800331e:	4845      	ldr	r0, [pc, #276]	@ (8003434 <Screen_Update+0x290>)
 8003320:	f7ff fcf1 	bl	8002d06 <lcd_line1>
                break;
 8003324:	e073      	b.n	800340e <Screen_Update+0x26a>

            case UI_EDIT_COUNTDOWN_MIN:
                show_edit_mm("Countdown (min)", temp_m);
 8003326:	4b45      	ldr	r3, [pc, #276]	@ (800343c <Screen_Update+0x298>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	4844      	ldr	r0, [pc, #272]	@ (8003440 <Screen_Update+0x29c>)
 800332e:	f7ff fe55 	bl	8002fdc <show_edit_mm>
                break;
 8003332:	e06c      	b.n	800340e <Screen_Update+0x26a>

            case UI_EDIT_TIMER1_ON_H:
                show_edit_hhmm("Timer1 ON  HH", temp_h, temp_m);
 8003334:	4b43      	ldr	r3, [pc, #268]	@ (8003444 <Screen_Update+0x2a0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4a40      	ldr	r2, [pc, #256]	@ (800343c <Screen_Update+0x298>)
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	4619      	mov	r1, r3
 800333e:	4842      	ldr	r0, [pc, #264]	@ (8003448 <Screen_Update+0x2a4>)
 8003340:	f7ff fe8a 	bl	8003058 <show_edit_hhmm>
                break;
 8003344:	e063      	b.n	800340e <Screen_Update+0x26a>
            case UI_EDIT_TIMER1_ON_M:
                show_edit_hhmm("Timer1 ON  MM", temp_h, temp_m);
 8003346:	4b3f      	ldr	r3, [pc, #252]	@ (8003444 <Screen_Update+0x2a0>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	4a3c      	ldr	r2, [pc, #240]	@ (800343c <Screen_Update+0x298>)
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	483e      	ldr	r0, [pc, #248]	@ (800344c <Screen_Update+0x2a8>)
 8003352:	f7ff fe81 	bl	8003058 <show_edit_hhmm>
                break;
 8003356:	e05a      	b.n	800340e <Screen_Update+0x26a>
            case UI_EDIT_TIMER1_OFF_H:
                show_edit_hhmm("Timer1 OFF HH", temp_h, temp_m);
 8003358:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <Screen_Update+0x2a0>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4a37      	ldr	r2, [pc, #220]	@ (800343c <Screen_Update+0x298>)
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	4619      	mov	r1, r3
 8003362:	483b      	ldr	r0, [pc, #236]	@ (8003450 <Screen_Update+0x2ac>)
 8003364:	f7ff fe78 	bl	8003058 <show_edit_hhmm>
                break;
 8003368:	e051      	b.n	800340e <Screen_Update+0x26a>
            case UI_EDIT_TIMER1_OFF_M:
                show_edit_hhmm("Timer1 OFF MM", temp_h, temp_m);
 800336a:	4b36      	ldr	r3, [pc, #216]	@ (8003444 <Screen_Update+0x2a0>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	4a33      	ldr	r2, [pc, #204]	@ (800343c <Screen_Update+0x298>)
 8003370:	7812      	ldrb	r2, [r2, #0]
 8003372:	4619      	mov	r1, r3
 8003374:	4837      	ldr	r0, [pc, #220]	@ (8003454 <Screen_Update+0x2b0>)
 8003376:	f7ff fe6f 	bl	8003058 <show_edit_hhmm>
                break;
 800337a:	e048      	b.n	800340e <Screen_Update+0x26a>

            case UI_EDIT_SEARCH_GAP_M:
                show_edit_ms("Search Gap  MM", temp_m, temp_s);
 800337c:	4b2f      	ldr	r3, [pc, #188]	@ (800343c <Screen_Update+0x298>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4a35      	ldr	r2, [pc, #212]	@ (8003458 <Screen_Update+0x2b4>)
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	4835      	ldr	r0, [pc, #212]	@ (800345c <Screen_Update+0x2b8>)
 8003388:	f7ff fe44 	bl	8003014 <show_edit_ms>
                break;
 800338c:	e03f      	b.n	800340e <Screen_Update+0x26a>
            case UI_EDIT_SEARCH_GAP_S:
                show_edit_ms("Search Gap  SS", temp_m, temp_s);
 800338e:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <Screen_Update+0x298>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	4a31      	ldr	r2, [pc, #196]	@ (8003458 <Screen_Update+0x2b4>)
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	4619      	mov	r1, r3
 8003398:	4831      	ldr	r0, [pc, #196]	@ (8003460 <Screen_Update+0x2bc>)
 800339a:	f7ff fe3b 	bl	8003014 <show_edit_ms>
                break;
 800339e:	e036      	b.n	800340e <Screen_Update+0x26a>

            case UI_EDIT_SEARCH_DRY_M:
                show_edit_ms("Dry Run     MM", temp_m, temp_s);
 80033a0:	4b26      	ldr	r3, [pc, #152]	@ (800343c <Screen_Update+0x298>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003458 <Screen_Update+0x2b4>)
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	482e      	ldr	r0, [pc, #184]	@ (8003464 <Screen_Update+0x2c0>)
 80033ac:	f7ff fe32 	bl	8003014 <show_edit_ms>
                break;
 80033b0:	e02d      	b.n	800340e <Screen_Update+0x26a>
            case UI_EDIT_SEARCH_DRY_S:
                show_edit_ms("Dry Run     SS", temp_m, temp_s);
 80033b2:	4b22      	ldr	r3, [pc, #136]	@ (800343c <Screen_Update+0x298>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4a28      	ldr	r2, [pc, #160]	@ (8003458 <Screen_Update+0x2b4>)
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	4619      	mov	r1, r3
 80033bc:	482a      	ldr	r0, [pc, #168]	@ (8003468 <Screen_Update+0x2c4>)
 80033be:	f7ff fe29 	bl	8003014 <show_edit_ms>
                break;
 80033c2:	e024      	b.n	800340e <Screen_Update+0x26a>

            case UI_EDIT_TWIST_ON_M:
                show_edit_ms("Twist ON    MM", temp_m, temp_s);
 80033c4:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <Screen_Update+0x298>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4a23      	ldr	r2, [pc, #140]	@ (8003458 <Screen_Update+0x2b4>)
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	4619      	mov	r1, r3
 80033ce:	4827      	ldr	r0, [pc, #156]	@ (800346c <Screen_Update+0x2c8>)
 80033d0:	f7ff fe20 	bl	8003014 <show_edit_ms>
                break;
 80033d4:	e01b      	b.n	800340e <Screen_Update+0x26a>
            case UI_EDIT_TWIST_ON_S:
                show_edit_ms("Twist ON    SS", temp_m, temp_s);
 80033d6:	4b19      	ldr	r3, [pc, #100]	@ (800343c <Screen_Update+0x298>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <Screen_Update+0x2b4>)
 80033dc:	7812      	ldrb	r2, [r2, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	4823      	ldr	r0, [pc, #140]	@ (8003470 <Screen_Update+0x2cc>)
 80033e2:	f7ff fe17 	bl	8003014 <show_edit_ms>
                break;
 80033e6:	e012      	b.n	800340e <Screen_Update+0x26a>

            case UI_EDIT_TWIST_OFF_M:
                show_edit_ms("Twist OFF   MM", temp_m, temp_s);
 80033e8:	4b14      	ldr	r3, [pc, #80]	@ (800343c <Screen_Update+0x298>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003458 <Screen_Update+0x2b4>)
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	4820      	ldr	r0, [pc, #128]	@ (8003474 <Screen_Update+0x2d0>)
 80033f4:	f7ff fe0e 	bl	8003014 <show_edit_ms>
                break;
 80033f8:	e009      	b.n	800340e <Screen_Update+0x26a>
            case UI_EDIT_TWIST_OFF_S:
                show_edit_ms("Twist OFF   SS", temp_m, temp_s);
 80033fa:	4b10      	ldr	r3, [pc, #64]	@ (800343c <Screen_Update+0x298>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	4a16      	ldr	r2, [pc, #88]	@ (8003458 <Screen_Update+0x2b4>)
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	4619      	mov	r1, r3
 8003404:	481c      	ldr	r0, [pc, #112]	@ (8003478 <Screen_Update+0x2d4>)
 8003406:	f7ff fe05 	bl	8003014 <show_edit_ms>
                break;
 800340a:	e000      	b.n	800340e <Screen_Update+0x26a>

            default: break;
 800340c:	bf00      	nop
        }
    }
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000370 	.word	0x20000370
 800341c:	20000035 	.word	0x20000035
 8003420:	20000350 	.word	0x20000350
 8003424:	2000034c 	.word	0x2000034c
 8003428:	2000036d 	.word	0x2000036d
 800342c:	20000034 	.word	0x20000034
 8003430:	08009de0 	.word	0x08009de0
 8003434:	08009df0 	.word	0x08009df0
 8003438:	08009e04 	.word	0x08009e04
 800343c:	2000036a 	.word	0x2000036a
 8003440:	08009c34 	.word	0x08009c34
 8003444:	20000369 	.word	0x20000369
 8003448:	08009e14 	.word	0x08009e14
 800344c:	08009e24 	.word	0x08009e24
 8003450:	08009e34 	.word	0x08009e34
 8003454:	08009e44 	.word	0x08009e44
 8003458:	2000036b 	.word	0x2000036b
 800345c:	08009e54 	.word	0x08009e54
 8003460:	08009e64 	.word	0x08009e64
 8003464:	08009e74 	.word	0x08009e74
 8003468:	08009e84 	.word	0x08009e84
 800346c:	08009e94 	.word	0x08009e94
 8003470:	08009ea4 	.word	0x08009ea4
 8003474:	08009eb4 	.word	0x08009eb4
 8003478:	08009ec4 	.word	0x08009ec4

0800347c <Screen_Init>:


void Screen_Init(void){
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
    lcd_init();
 8003480:	f7fd ff03 	bl	800128a <lcd_init>
    lastLcdUpdateTime = HAL_GetTick();
 8003484:	f001 f838 	bl	80044f8 <HAL_GetTick>
 8003488:	4603      	mov	r3, r0
 800348a:	4a06      	ldr	r2, [pc, #24]	@ (80034a4 <Screen_Init+0x28>)
 800348c:	6013      	str	r3, [r2, #0]
    ui = UI_WELCOME;
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <Screen_Init+0x2c>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_; // force initial redraw
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <Screen_Init+0x30>)
 8003496:	2215      	movs	r2, #21
 8003498:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 800349a:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <Screen_Init+0x34>)
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
}
 80034a0:	bf00      	nop
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	2000034c 	.word	0x2000034c
 80034a8:	20000350 	.word	0x20000350
 80034ac:	20000034 	.word	0x20000034
 80034b0:	2000036d 	.word	0x2000036d

080034b4 <Screen_ResetToHome>:

void Screen_ResetToHome(void){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
    ui = UI_WELCOME;
 80034b8:	4b07      	ldr	r3, [pc, #28]	@ (80034d8 <Screen_ResetToHome+0x24>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 80034be:	f001 f81b 	bl	80044f8 <HAL_GetTick>
 80034c2:	4603      	mov	r3, r0
 80034c4:	4a05      	ldr	r2, [pc, #20]	@ (80034dc <Screen_ResetToHome+0x28>)
 80034c6:	6013      	str	r3, [r2, #0]
    last_ui = UI_MAX_; // force redraw
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <Screen_ResetToHome+0x2c>)
 80034ca:	2215      	movs	r2, #21
 80034cc:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 80034ce:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <Screen_ResetToHome+0x30>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000350 	.word	0x20000350
 80034dc:	2000034c 	.word	0x2000034c
 80034e0:	20000034 	.word	0x20000034
 80034e4:	2000036d 	.word	0x2000036d

080034e8 <Screen_HandleButton>:

void Screen_HandleButton(UiButton b){
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b095      	sub	sp, #84	@ 0x54
 80034ec:	af04      	add	r7, sp, #16
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d106      	bne.n	8003506 <Screen_HandleButton+0x1e>
        Screen_ResetToHome();
 80034f8:	f7ff ffdc 	bl	80034b4 <Screen_ResetToHome>
        screenNeedsRefresh = true;
 80034fc:	4ba2      	ldr	r3, [pc, #648]	@ (8003788 <Screen_HandleButton+0x2a0>)
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
        return;
 8003502:	f000 bc26 	b.w	8003d52 <Screen_HandleButton+0x86a>
    }

    switch (ui)
 8003506:	4ba1      	ldr	r3, [pc, #644]	@ (800378c <Screen_HandleButton+0x2a4>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b14      	cmp	r3, #20
 800350c:	f200 8421 	bhi.w	8003d52 <Screen_HandleButton+0x86a>
 8003510:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <Screen_HandleButton+0x30>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800356d 	.word	0x0800356d
 800351c:	08003583 	.word	0x08003583
 8003520:	08003583 	.word	0x08003583
 8003524:	08003583 	.word	0x08003583
 8003528:	08003583 	.word	0x08003583
 800352c:	080035a1 	.word	0x080035a1
 8003530:	0800366d 	.word	0x0800366d
 8003534:	080036e9 	.word	0x080036e9
 8003538:	0800374d 	.word	0x0800374d
 800353c:	080037f5 	.word	0x080037f5
 8003540:	08003859 	.word	0x08003859
 8003544:	08003931 	.word	0x08003931
 8003548:	08003995 	.word	0x08003995
 800354c:	08003a3d 	.word	0x08003a3d
 8003550:	08003aa1 	.word	0x08003aa1
 8003554:	08003b27 	.word	0x08003b27
 8003558:	08003b8b 	.word	0x08003b8b
 800355c:	08003c11 	.word	0x08003c11
 8003560:	08003c73 	.word	0x08003c73
 8003564:	08003609 	.word	0x08003609
 8003568:	0800363b 	.word	0x0800363b
    {
    case UI_WELCOME:
        if (b == BTN_SELECT) {
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b02      	cmp	r3, #2
 8003570:	f040 83ce 	bne.w	8003d10 <Screen_HandleButton+0x828>
            ui = UI_DASH_WATER;
 8003574:	4b85      	ldr	r3, [pc, #532]	@ (800378c <Screen_HandleButton+0x2a4>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 800357a:	4b83      	ldr	r3, [pc, #524]	@ (8003788 <Screen_HandleButton+0x2a0>)
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003580:	e3c6      	b.n	8003d10 <Screen_HandleButton+0x828>
    /* ===== Dashboard pages (auto-cycle) ===== */
    case UI_DASH_WATER:
    case UI_DASH_MODE:
    case UI_DASH_SEARCH:
    case UI_DASH_TWIST:
        if (b == BTN_SELECT) {
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d105      	bne.n	8003594 <Screen_HandleButton+0xac>
            ui = UI_MENU;
 8003588:	4b80      	ldr	r3, [pc, #512]	@ (800378c <Screen_HandleButton+0x2a4>)
 800358a:	2205      	movs	r2, #5
 800358c:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 800358e:	4b7e      	ldr	r3, [pc, #504]	@ (8003788 <Screen_HandleButton+0x2a0>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
        }
        lastLcdUpdateTime = HAL_GetTick(); // reset cycle timer
 8003594:	f000 ffb0 	bl	80044f8 <HAL_GetTick>
 8003598:	4603      	mov	r3, r0
 800359a:	4a7d      	ldr	r2, [pc, #500]	@ (8003790 <Screen_HandleButton+0x2a8>)
 800359c:	6013      	str	r3, [r2, #0]
        break;
 800359e:	e3d8      	b.n	8003d52 <Screen_HandleButton+0x86a>

    /* ===== Menu navigation ===== */
    case UI_MENU:
        if (b == BTN_UP) {
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d110      	bne.n	80035c8 <Screen_HandleButton+0xe0>
            if (menu_idx == 0) menu_idx = MENU_COUNT - 1;
 80035a6:	4b7b      	ldr	r3, [pc, #492]	@ (8003794 <Screen_HandleButton+0x2ac>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <Screen_HandleButton+0xce>
 80035ae:	4b79      	ldr	r3, [pc, #484]	@ (8003794 <Screen_HandleButton+0x2ac>)
 80035b0:	2209      	movs	r2, #9
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	e005      	b.n	80035c2 <Screen_HandleButton+0xda>
            else menu_idx--;
 80035b6:	4b77      	ldr	r3, [pc, #476]	@ (8003794 <Screen_HandleButton+0x2ac>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4b75      	ldr	r3, [pc, #468]	@ (8003794 <Screen_HandleButton+0x2ac>)
 80035c0:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 80035c2:	4b71      	ldr	r3, [pc, #452]	@ (8003788 <Screen_HandleButton+0x2a0>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
        }
        if (b == BTN_DOWN) {
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d112      	bne.n	80035f4 <Screen_HandleButton+0x10c>
            menu_idx = (menu_idx + 1) % MENU_COUNT;
 80035ce:	4b71      	ldr	r3, [pc, #452]	@ (8003794 <Screen_HandleButton+0x2ac>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4619      	mov	r1, r3
 80035d6:	4b70      	ldr	r3, [pc, #448]	@ (8003798 <Screen_HandleButton+0x2b0>)
 80035d8:	fba3 2301 	umull	r2, r3, r3, r1
 80035dc:	08da      	lsrs	r2, r3, #3
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	1aca      	subs	r2, r1, r3
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003794 <Screen_HandleButton+0x2ac>)
 80035ec:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 80035ee:	4b66      	ldr	r3, [pc, #408]	@ (8003788 <Screen_HandleButton+0x2a0>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	701a      	strb	r2, [r3, #0]
        }
        if (b == BTN_SELECT){
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	f040 838c 	bne.w	8003d14 <Screen_HandleButton+0x82c>
            apply_menu_action();
 80035fc:	f7ff fd4e 	bl	800309c <apply_menu_action>
            screenNeedsRefresh = true;
 8003600:	4b61      	ldr	r3, [pc, #388]	@ (8003788 <Screen_HandleButton+0x2a0>)
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003606:	e385      	b.n	8003d14 <Screen_HandleButton+0x82c>

    /* ===== Edits & confirms ===== */
    case UI_CONFIRM_MANUAL_ON:
        if (b == BTN_SELECT){
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d107      	bne.n	800361e <Screen_HandleButton+0x136>
            send_cmd("MOTOR_ON");
 800360e:	4863      	ldr	r0, [pc, #396]	@ (800379c <Screen_HandleButton+0x2b4>)
 8003610:	f7ff fdbc 	bl	800318c <send_cmd>
            goto_dash_cycle();
 8003614:	f7ff fbba 	bl	8002d8c <goto_dash_cycle>
            screenNeedsRefresh = true;
 8003618:	4b5b      	ldr	r3, [pc, #364]	@ (8003788 <Screen_HandleButton+0x2a0>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
        }
        if (b == BTN_DOWN || b == BTN_UP){
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d003      	beq.n	800362c <Screen_HandleButton+0x144>
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	2b03      	cmp	r3, #3
 8003628:	f040 8376 	bne.w	8003d18 <Screen_HandleButton+0x830>
            ui = UI_MENU;
 800362c:	4b57      	ldr	r3, [pc, #348]	@ (800378c <Screen_HandleButton+0x2a4>)
 800362e:	2205      	movs	r2, #5
 8003630:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 8003632:	4b55      	ldr	r3, [pc, #340]	@ (8003788 <Screen_HandleButton+0x2a0>)
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003638:	e36e      	b.n	8003d18 <Screen_HandleButton+0x830>

    case UI_CONFIRM_MANUAL_OFF:
        if (b == BTN_SELECT){
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d107      	bne.n	8003650 <Screen_HandleButton+0x168>
            send_cmd("MOTOR_OFF");
 8003640:	4857      	ldr	r0, [pc, #348]	@ (80037a0 <Screen_HandleButton+0x2b8>)
 8003642:	f7ff fda3 	bl	800318c <send_cmd>
            goto_dash_cycle();
 8003646:	f7ff fba1 	bl	8002d8c <goto_dash_cycle>
            screenNeedsRefresh = true;
 800364a:	4b4f      	ldr	r3, [pc, #316]	@ (8003788 <Screen_HandleButton+0x2a0>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
        }
        if (b == BTN_DOWN || b == BTN_UP){
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	2b04      	cmp	r3, #4
 8003654:	d003      	beq.n	800365e <Screen_HandleButton+0x176>
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2b03      	cmp	r3, #3
 800365a:	f040 835f 	bne.w	8003d1c <Screen_HandleButton+0x834>
            ui = UI_MENU;
 800365e:	4b4b      	ldr	r3, [pc, #300]	@ (800378c <Screen_HandleButton+0x2a4>)
 8003660:	2205      	movs	r2, #5
 8003662:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 8003664:	4b48      	ldr	r3, [pc, #288]	@ (8003788 <Screen_HandleButton+0x2a0>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
        }
        break;
 800366a:	e357      	b.n	8003d1c <Screen_HandleButton+0x834>

    case UI_EDIT_COUNTDOWN_MIN:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; screenNeedsRefresh = true; }
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d10f      	bne.n	8003692 <Screen_HandleButton+0x1aa>
 8003672:	4b4c      	ldr	r3, [pc, #304]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4b4a      	ldr	r3, [pc, #296]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	4b49      	ldr	r3, [pc, #292]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b3b      	cmp	r3, #59	@ 0x3b
 8003684:	d902      	bls.n	800368c <Screen_HandleButton+0x1a4>
 8003686:	4b47      	ldr	r3, [pc, #284]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	4b3e      	ldr	r3, [pc, #248]	@ (8003788 <Screen_HandleButton+0x2a0>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m == 0) temp_m = 59; else temp_m--; screenNeedsRefresh = true; }
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d110      	bne.n	80036ba <Screen_HandleButton+0x1d2>
 8003698:	4b42      	ldr	r3, [pc, #264]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d103      	bne.n	80036a8 <Screen_HandleButton+0x1c0>
 80036a0:	4b40      	ldr	r3, [pc, #256]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 80036a2:	223b      	movs	r2, #59	@ 0x3b
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e005      	b.n	80036b4 <Screen_HandleButton+0x1cc>
 80036a8:	4b3e      	ldr	r3, [pc, #248]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	4b3c      	ldr	r3, [pc, #240]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	4b34      	ldr	r3, [pc, #208]	@ (8003788 <Screen_HandleButton+0x2a0>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	f040 832f 	bne.w	8003d20 <Screen_HandleButton+0x838>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"COUNTDOWN_ON:%u", temp_m);
 80036c2:	4b38      	ldr	r3, [pc, #224]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	f107 000c 	add.w	r0, r7, #12
 80036ca:	4a37      	ldr	r2, [pc, #220]	@ (80037a8 <Screen_HandleButton+0x2c0>)
 80036cc:	2120      	movs	r1, #32
 80036ce:	f004 fead 	bl	800842c <sniprintf>
            send_cmd(cmd);
 80036d2:	f107 030c 	add.w	r3, r7, #12
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fd58 	bl	800318c <send_cmd>
            goto_dash_cycle();
 80036dc:	f7ff fb56 	bl	8002d8c <goto_dash_cycle>
            screenNeedsRefresh = true;
 80036e0:	4b29      	ldr	r3, [pc, #164]	@ (8003788 <Screen_HandleButton+0x2a0>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80036e6:	e31b      	b.n	8003d20 <Screen_HandleButton+0x838>

    case UI_EDIT_TIMER1_ON_H:
        if (b == BTN_UP)   { if (++temp_h > 23) temp_h = 0; screenNeedsRefresh = true; }
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d10f      	bne.n	800370e <Screen_HandleButton+0x226>
 80036ee:	4b2f      	ldr	r3, [pc, #188]	@ (80037ac <Screen_HandleButton+0x2c4>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <Screen_HandleButton+0x2c4>)
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	4b2c      	ldr	r3, [pc, #176]	@ (80037ac <Screen_HandleButton+0x2c4>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b17      	cmp	r3, #23
 8003700:	d902      	bls.n	8003708 <Screen_HandleButton+0x220>
 8003702:	4b2a      	ldr	r3, [pc, #168]	@ (80037ac <Screen_HandleButton+0x2c4>)
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	4b1f      	ldr	r3, [pc, #124]	@ (8003788 <Screen_HandleButton+0x2a0>)
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_h == 0) temp_h = 23; else temp_h--; screenNeedsRefresh = true; }
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	2b04      	cmp	r3, #4
 8003712:	d110      	bne.n	8003736 <Screen_HandleButton+0x24e>
 8003714:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <Screen_HandleButton+0x2c4>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d103      	bne.n	8003724 <Screen_HandleButton+0x23c>
 800371c:	4b23      	ldr	r3, [pc, #140]	@ (80037ac <Screen_HandleButton+0x2c4>)
 800371e:	2217      	movs	r2, #23
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e005      	b.n	8003730 <Screen_HandleButton+0x248>
 8003724:	4b21      	ldr	r3, [pc, #132]	@ (80037ac <Screen_HandleButton+0x2c4>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	3b01      	subs	r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	4b1f      	ldr	r3, [pc, #124]	@ (80037ac <Screen_HandleButton+0x2c4>)
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <Screen_HandleButton+0x2a0>)
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TIMER1_ON_M; screenNeedsRefresh = true; }
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	2b02      	cmp	r3, #2
 800373a:	f040 82f3 	bne.w	8003d24 <Screen_HandleButton+0x83c>
 800373e:	4b13      	ldr	r3, [pc, #76]	@ (800378c <Screen_HandleButton+0x2a4>)
 8003740:	2208      	movs	r2, #8
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	4b10      	ldr	r3, [pc, #64]	@ (8003788 <Screen_HandleButton+0x2a0>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
        break;
 800374a:	e2eb      	b.n	8003d24 <Screen_HandleButton+0x83c>
    case UI_EDIT_TIMER1_ON_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; screenNeedsRefresh = true; }
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d10f      	bne.n	8003772 <Screen_HandleButton+0x28a>
 8003752:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b3b      	cmp	r3, #59	@ 0x3b
 8003764:	d902      	bls.n	800376c <Screen_HandleButton+0x284>
 8003766:	4b0f      	ldr	r3, [pc, #60]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <Screen_HandleButton+0x2a0>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m == 0) temp_m = 59; else temp_m--; screenNeedsRefresh = true; }
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d124      	bne.n	80037c2 <Screen_HandleButton+0x2da>
 8003778:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d117      	bne.n	80037b0 <Screen_HandleButton+0x2c8>
 8003780:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <Screen_HandleButton+0x2bc>)
 8003782:	223b      	movs	r2, #59	@ 0x3b
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e019      	b.n	80037bc <Screen_HandleButton+0x2d4>
 8003788:	2000036d 	.word	0x2000036d
 800378c:	20000350 	.word	0x20000350
 8003790:	2000034c 	.word	0x2000034c
 8003794:	2000036c 	.word	0x2000036c
 8003798:	cccccccd 	.word	0xcccccccd
 800379c:	08009ed4 	.word	0x08009ed4
 80037a0:	08009ee0 	.word	0x08009ee0
 80037a4:	2000036a 	.word	0x2000036a
 80037a8:	08009eec 	.word	0x08009eec
 80037ac:	20000369 	.word	0x20000369
 80037b0:	4b9a      	ldr	r3, [pc, #616]	@ (8003a1c <Screen_HandleButton+0x534>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	4b98      	ldr	r3, [pc, #608]	@ (8003a1c <Screen_HandleButton+0x534>)
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	4b98      	ldr	r3, [pc, #608]	@ (8003a20 <Screen_HandleButton+0x538>)
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	f040 82af 	bne.w	8003d28 <Screen_HandleButton+0x840>
            timerSlots[0].onTimeSeconds = ModelHandle_TimeToSeconds(temp_h, temp_m);
 80037ca:	4b96      	ldr	r3, [pc, #600]	@ (8003a24 <Screen_HandleButton+0x53c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4a93      	ldr	r2, [pc, #588]	@ (8003a1c <Screen_HandleButton+0x534>)
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fce2 	bl	800219e <ModelHandle_TimeToSeconds>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a92      	ldr	r2, [pc, #584]	@ (8003a28 <Screen_HandleButton+0x540>)
 80037de:	6013      	str	r3, [r2, #0]
            timerSlots[0].active = true;
 80037e0:	4b91      	ldr	r3, [pc, #580]	@ (8003a28 <Screen_HandleButton+0x540>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	721a      	strb	r2, [r3, #8]
            ui = UI_EDIT_TIMER1_OFF_H;
 80037e6:	4b91      	ldr	r3, [pc, #580]	@ (8003a2c <Screen_HandleButton+0x544>)
 80037e8:	2209      	movs	r2, #9
 80037ea:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 80037ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003a20 <Screen_HandleButton+0x538>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80037f2:	e299      	b.n	8003d28 <Screen_HandleButton+0x840>

    case UI_EDIT_TIMER1_OFF_H:
        if (b == BTN_UP)   { if (++temp_h > 23) temp_h = 0; screenNeedsRefresh = true; }
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d10f      	bne.n	800381a <Screen_HandleButton+0x332>
 80037fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003a24 <Screen_HandleButton+0x53c>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b88      	ldr	r3, [pc, #544]	@ (8003a24 <Screen_HandleButton+0x53c>)
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	4b87      	ldr	r3, [pc, #540]	@ (8003a24 <Screen_HandleButton+0x53c>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b17      	cmp	r3, #23
 800380c:	d902      	bls.n	8003814 <Screen_HandleButton+0x32c>
 800380e:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <Screen_HandleButton+0x53c>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	4b82      	ldr	r3, [pc, #520]	@ (8003a20 <Screen_HandleButton+0x538>)
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_h == 0) temp_h = 23; else temp_h--; screenNeedsRefresh = true; }
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d110      	bne.n	8003842 <Screen_HandleButton+0x35a>
 8003820:	4b80      	ldr	r3, [pc, #512]	@ (8003a24 <Screen_HandleButton+0x53c>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d103      	bne.n	8003830 <Screen_HandleButton+0x348>
 8003828:	4b7e      	ldr	r3, [pc, #504]	@ (8003a24 <Screen_HandleButton+0x53c>)
 800382a:	2217      	movs	r2, #23
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e005      	b.n	800383c <Screen_HandleButton+0x354>
 8003830:	4b7c      	ldr	r3, [pc, #496]	@ (8003a24 <Screen_HandleButton+0x53c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	3b01      	subs	r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4b7a      	ldr	r3, [pc, #488]	@ (8003a24 <Screen_HandleButton+0x53c>)
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	4b78      	ldr	r3, [pc, #480]	@ (8003a20 <Screen_HandleButton+0x538>)
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TIMER1_OFF_M; screenNeedsRefresh = true; }
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	2b02      	cmp	r3, #2
 8003846:	f040 8271 	bne.w	8003d2c <Screen_HandleButton+0x844>
 800384a:	4b78      	ldr	r3, [pc, #480]	@ (8003a2c <Screen_HandleButton+0x544>)
 800384c:	220a      	movs	r2, #10
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	4b73      	ldr	r3, [pc, #460]	@ (8003a20 <Screen_HandleButton+0x538>)
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
        break;
 8003856:	e269      	b.n	8003d2c <Screen_HandleButton+0x844>
    case UI_EDIT_TIMER1_OFF_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; screenNeedsRefresh = true; }
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d10f      	bne.n	800387e <Screen_HandleButton+0x396>
 800385e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b6d      	ldr	r3, [pc, #436]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	4b6c      	ldr	r3, [pc, #432]	@ (8003a1c <Screen_HandleButton+0x534>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003870:	d902      	bls.n	8003878 <Screen_HandleButton+0x390>
 8003872:	4b6a      	ldr	r3, [pc, #424]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	4b69      	ldr	r3, [pc, #420]	@ (8003a20 <Screen_HandleButton+0x538>)
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m == 0) temp_m = 59; else temp_m--; screenNeedsRefresh = true; }
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d110      	bne.n	80038a6 <Screen_HandleButton+0x3be>
 8003884:	4b65      	ldr	r3, [pc, #404]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d103      	bne.n	8003894 <Screen_HandleButton+0x3ac>
 800388c:	4b63      	ldr	r3, [pc, #396]	@ (8003a1c <Screen_HandleButton+0x534>)
 800388e:	223b      	movs	r2, #59	@ 0x3b
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e005      	b.n	80038a0 <Screen_HandleButton+0x3b8>
 8003894:	4b61      	ldr	r3, [pc, #388]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	3b01      	subs	r3, #1
 800389a:	b2da      	uxtb	r2, r3
 800389c:	4b5f      	ldr	r3, [pc, #380]	@ (8003a1c <Screen_HandleButton+0x534>)
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	4b5f      	ldr	r3, [pc, #380]	@ (8003a20 <Screen_HandleButton+0x538>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	f040 8241 	bne.w	8003d30 <Screen_HandleButton+0x848>
            timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(temp_h, temp_m);
 80038ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003a24 <Screen_HandleButton+0x53c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a1c <Screen_HandleButton+0x534>)
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fc70 	bl	800219e <ModelHandle_TimeToSeconds>
 80038be:	4603      	mov	r3, r0
 80038c0:	4a59      	ldr	r2, [pc, #356]	@ (8003a28 <Screen_HandleButton+0x540>)
 80038c2:	6053      	str	r3, [r2, #4]
            timerSlots[0].executedToday = false;
 80038c4:	4b58      	ldr	r3, [pc, #352]	@ (8003a28 <Screen_HandleButton+0x540>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	725a      	strb	r2, [r3, #9]
            timerSlots[0].active = true;
 80038ca:	4b57      	ldr	r3, [pc, #348]	@ (8003a28 <Screen_HandleButton+0x540>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	721a      	strb	r2, [r3, #8]

            char cmd[48];
            uint8_t onH,onM,offH,offM;
            ModelHandle_SecondsToTime(timerSlots[0].onTimeSeconds,&onH,&onM);
 80038d0:	4b55      	ldr	r3, [pc, #340]	@ (8003a28 <Screen_HandleButton+0x540>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 80038d8:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fc77 	bl	80021d0 <ModelHandle_SecondsToTime>
            ModelHandle_SecondsToTime(timerSlots[0].offTimeSeconds,&offH,&offM);
 80038e2:	4b51      	ldr	r3, [pc, #324]	@ (8003a28 <Screen_HandleButton+0x540>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80038ea:	f107 013d 	add.w	r1, r7, #61	@ 0x3d
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fc6e 	bl	80021d0 <ModelHandle_SecondsToTime>
            snprintf(cmd,sizeof(cmd),"TIMER_SET:1:%02u:%02u:%02u:%02u",onH,onM,offH,offM);
 80038f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80038f8:	461c      	mov	r4, r3
 80038fa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80038fe:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003902:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003906:	f107 000c 	add.w	r0, r7, #12
 800390a:	9102      	str	r1, [sp, #8]
 800390c:	9201      	str	r2, [sp, #4]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4623      	mov	r3, r4
 8003912:	4a47      	ldr	r2, [pc, #284]	@ (8003a30 <Screen_HandleButton+0x548>)
 8003914:	2130      	movs	r1, #48	@ 0x30
 8003916:	f004 fd89 	bl	800842c <sniprintf>
            send_cmd(cmd);
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fc34 	bl	800318c <send_cmd>
            goto_dash_cycle();
 8003924:	f7ff fa32 	bl	8002d8c <goto_dash_cycle>
            screenNeedsRefresh = true;
 8003928:	4b3d      	ldr	r3, [pc, #244]	@ (8003a20 <Screen_HandleButton+0x538>)
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800392e:	e1ff      	b.n	8003d30 <Screen_HandleButton+0x848>

    case UI_EDIT_SEARCH_GAP_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; screenNeedsRefresh = true; }
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d10f      	bne.n	8003956 <Screen_HandleButton+0x46e>
 8003936:	4b39      	ldr	r3, [pc, #228]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b37      	ldr	r3, [pc, #220]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	4b36      	ldr	r3, [pc, #216]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b3b      	cmp	r3, #59	@ 0x3b
 8003948:	d902      	bls.n	8003950 <Screen_HandleButton+0x468>
 800394a:	4b34      	ldr	r3, [pc, #208]	@ (8003a1c <Screen_HandleButton+0x534>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	4b33      	ldr	r3, [pc, #204]	@ (8003a20 <Screen_HandleButton+0x538>)
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m == 0) temp_m = 59; else temp_m--; screenNeedsRefresh = true; }
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d110      	bne.n	800397e <Screen_HandleButton+0x496>
 800395c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a1c <Screen_HandleButton+0x534>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d103      	bne.n	800396c <Screen_HandleButton+0x484>
 8003964:	4b2d      	ldr	r3, [pc, #180]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003966:	223b      	movs	r2, #59	@ 0x3b
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e005      	b.n	8003978 <Screen_HandleButton+0x490>
 800396c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a1c <Screen_HandleButton+0x534>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	3b01      	subs	r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	4b29      	ldr	r3, [pc, #164]	@ (8003a1c <Screen_HandleButton+0x534>)
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	4b29      	ldr	r3, [pc, #164]	@ (8003a20 <Screen_HandleButton+0x538>)
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_SEARCH_GAP_S; screenNeedsRefresh = true; }
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	2b02      	cmp	r3, #2
 8003982:	f040 81d7 	bne.w	8003d34 <Screen_HandleButton+0x84c>
 8003986:	4b29      	ldr	r3, [pc, #164]	@ (8003a2c <Screen_HandleButton+0x544>)
 8003988:	220c      	movs	r2, #12
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <Screen_HandleButton+0x538>)
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
        break;
 8003992:	e1cf      	b.n	8003d34 <Screen_HandleButton+0x84c>
    case UI_EDIT_SEARCH_GAP_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; screenNeedsRefresh = true; }
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d10f      	bne.n	80039ba <Screen_HandleButton+0x4d2>
 800399a:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <Screen_HandleButton+0x54c>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	3301      	adds	r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b24      	ldr	r3, [pc, #144]	@ (8003a34 <Screen_HandleButton+0x54c>)
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <Screen_HandleButton+0x54c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80039ac:	d902      	bls.n	80039b4 <Screen_HandleButton+0x4cc>
 80039ae:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <Screen_HandleButton+0x54c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <Screen_HandleButton+0x538>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s == 0) temp_s = 59; else temp_s--; screenNeedsRefresh = true; }
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d110      	bne.n	80039e2 <Screen_HandleButton+0x4fa>
 80039c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a34 <Screen_HandleButton+0x54c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <Screen_HandleButton+0x4e8>
 80039c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a34 <Screen_HandleButton+0x54c>)
 80039ca:	223b      	movs	r2, #59	@ 0x3b
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e005      	b.n	80039dc <Screen_HandleButton+0x4f4>
 80039d0:	4b18      	ldr	r3, [pc, #96]	@ (8003a34 <Screen_HandleButton+0x54c>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	4b16      	ldr	r3, [pc, #88]	@ (8003a34 <Screen_HandleButton+0x54c>)
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <Screen_HandleButton+0x538>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f040 81a7 	bne.w	8003d38 <Screen_HandleButton+0x850>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"SEARCH_GAP:%02u:%02u", temp_m, temp_s);
 80039ea:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <Screen_HandleButton+0x534>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <Screen_HandleButton+0x54c>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f107 000c 	add.w	r0, r7, #12
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003a38 <Screen_HandleButton+0x550>)
 80039fe:	2120      	movs	r1, #32
 8003a00:	f004 fd14 	bl	800842c <sniprintf>
            send_cmd(cmd);
 8003a04:	f107 030c 	add.w	r3, r7, #12
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fbbf 	bl	800318c <send_cmd>
            goto_dash_cycle();
 8003a0e:	f7ff f9bd 	bl	8002d8c <goto_dash_cycle>
            screenNeedsRefresh = true;
 8003a12:	4b03      	ldr	r3, [pc, #12]	@ (8003a20 <Screen_HandleButton+0x538>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003a18:	e18e      	b.n	8003d38 <Screen_HandleButton+0x850>
 8003a1a:	bf00      	nop
 8003a1c:	2000036a 	.word	0x2000036a
 8003a20:	2000036d 	.word	0x2000036d
 8003a24:	20000369 	.word	0x20000369
 8003a28:	200002ec 	.word	0x200002ec
 8003a2c:	20000350 	.word	0x20000350
 8003a30:	08009efc 	.word	0x08009efc
 8003a34:	2000036b 	.word	0x2000036b
 8003a38:	08009f1c 	.word	0x08009f1c

    case UI_EDIT_SEARCH_DRY_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; screenNeedsRefresh = true; }
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d10f      	bne.n	8003a62 <Screen_HandleButton+0x57a>
 8003a42:	4b9b      	ldr	r3, [pc, #620]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4b99      	ldr	r3, [pc, #612]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	4b98      	ldr	r3, [pc, #608]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b3b      	cmp	r3, #59	@ 0x3b
 8003a54:	d902      	bls.n	8003a5c <Screen_HandleButton+0x574>
 8003a56:	4b96      	ldr	r3, [pc, #600]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	4b95      	ldr	r3, [pc, #596]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m == 0) temp_m = 59; else temp_m--; screenNeedsRefresh = true; }
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d110      	bne.n	8003a8a <Screen_HandleButton+0x5a2>
 8003a68:	4b91      	ldr	r3, [pc, #580]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <Screen_HandleButton+0x590>
 8003a70:	4b8f      	ldr	r3, [pc, #572]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003a72:	223b      	movs	r2, #59	@ 0x3b
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e005      	b.n	8003a84 <Screen_HandleButton+0x59c>
 8003a78:	4b8d      	ldr	r3, [pc, #564]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	4b8b      	ldr	r3, [pc, #556]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	4b8b      	ldr	r3, [pc, #556]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_SEARCH_DRY_S; screenNeedsRefresh = true; }
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	f040 8155 	bne.w	8003d3c <Screen_HandleButton+0x854>
 8003a92:	4b89      	ldr	r3, [pc, #548]	@ (8003cb8 <Screen_HandleButton+0x7d0>)
 8003a94:	220e      	movs	r2, #14
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	4b86      	ldr	r3, [pc, #536]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
        break;
 8003a9e:	e14d      	b.n	8003d3c <Screen_HandleButton+0x854>
    case UI_EDIT_SEARCH_DRY_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; screenNeedsRefresh = true; }
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d10f      	bne.n	8003ac6 <Screen_HandleButton+0x5de>
 8003aa6:	4b85      	ldr	r3, [pc, #532]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b83      	ldr	r3, [pc, #524]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	4b82      	ldr	r3, [pc, #520]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ab8:	d902      	bls.n	8003ac0 <Screen_HandleButton+0x5d8>
 8003aba:	4b80      	ldr	r3, [pc, #512]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	4b7c      	ldr	r3, [pc, #496]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s == 0) temp_s = 59; else temp_s--; screenNeedsRefresh = true; }
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d110      	bne.n	8003aee <Screen_HandleButton+0x606>
 8003acc:	4b7b      	ldr	r3, [pc, #492]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d103      	bne.n	8003adc <Screen_HandleButton+0x5f4>
 8003ad4:	4b79      	ldr	r3, [pc, #484]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ad6:	223b      	movs	r2, #59	@ 0x3b
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e005      	b.n	8003ae8 <Screen_HandleButton+0x600>
 8003adc:	4b77      	ldr	r3, [pc, #476]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b75      	ldr	r3, [pc, #468]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	4b72      	ldr	r3, [pc, #456]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	f040 8125 	bne.w	8003d40 <Screen_HandleButton+0x858>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"SEARCH_DRYRUN:%02u:%02u", temp_m, temp_s);
 8003af6:	4b6e      	ldr	r3, [pc, #440]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	f107 000c 	add.w	r0, r7, #12
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc0 <Screen_HandleButton+0x7d8>)
 8003b0a:	2120      	movs	r1, #32
 8003b0c:	f004 fc8e 	bl	800842c <sniprintf>
            send_cmd(cmd);
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fb39 	bl	800318c <send_cmd>
            goto_dash_cycle();
 8003b1a:	f7ff f937 	bl	8002d8c <goto_dash_cycle>
            screenNeedsRefresh = true;
 8003b1e:	4b65      	ldr	r3, [pc, #404]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003b24:	e10c      	b.n	8003d40 <Screen_HandleButton+0x858>

    case UI_EDIT_TWIST_ON_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; screenNeedsRefresh = true; }
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d10f      	bne.n	8003b4c <Screen_HandleButton+0x664>
 8003b2c:	4b60      	ldr	r3, [pc, #384]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b5e      	ldr	r3, [pc, #376]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b3b      	cmp	r3, #59	@ 0x3b
 8003b3e:	d902      	bls.n	8003b46 <Screen_HandleButton+0x65e>
 8003b40:	4b5b      	ldr	r3, [pc, #364]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	4b5b      	ldr	r3, [pc, #364]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m == 0) temp_m = 59; else temp_m--; screenNeedsRefresh = true; }
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d110      	bne.n	8003b74 <Screen_HandleButton+0x68c>
 8003b52:	4b57      	ldr	r3, [pc, #348]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <Screen_HandleButton+0x67a>
 8003b5a:	4b55      	ldr	r3, [pc, #340]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003b5c:	223b      	movs	r2, #59	@ 0x3b
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	e005      	b.n	8003b6e <Screen_HandleButton+0x686>
 8003b62:	4b53      	ldr	r3, [pc, #332]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4b51      	ldr	r3, [pc, #324]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	4b51      	ldr	r3, [pc, #324]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TWIST_ON_S; screenNeedsRefresh = true; }
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	f040 80e4 	bne.w	8003d44 <Screen_HandleButton+0x85c>
 8003b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb8 <Screen_HandleButton+0x7d0>)
 8003b7e:	2210      	movs	r2, #16
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	4b4c      	ldr	r3, [pc, #304]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
        break;
 8003b88:	e0dc      	b.n	8003d44 <Screen_HandleButton+0x85c>
    case UI_EDIT_TWIST_ON_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; screenNeedsRefresh = true; }
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d10f      	bne.n	8003bb0 <Screen_HandleButton+0x6c8>
 8003b90:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	4b48      	ldr	r3, [pc, #288]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	4b47      	ldr	r3, [pc, #284]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ba2:	d902      	bls.n	8003baa <Screen_HandleButton+0x6c2>
 8003ba4:	4b45      	ldr	r3, [pc, #276]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	4b42      	ldr	r3, [pc, #264]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s == 0) temp_s = 59; else temp_s--; screenNeedsRefresh = true; }
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d110      	bne.n	8003bd8 <Screen_HandleButton+0x6f0>
 8003bb6:	4b41      	ldr	r3, [pc, #260]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <Screen_HandleButton+0x6de>
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003bc0:	223b      	movs	r2, #59	@ 0x3b
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e005      	b.n	8003bd2 <Screen_HandleButton+0x6ea>
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b3b      	ldr	r3, [pc, #236]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	4b38      	ldr	r3, [pc, #224]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	f040 80b4 	bne.w	8003d48 <Screen_HandleButton+0x860>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"TWIST_ONDUR:%02u:%02u", temp_m, temp_s);
 8003be0:	4b33      	ldr	r3, [pc, #204]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b35      	ldr	r3, [pc, #212]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f107 000c 	add.w	r0, r7, #12
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	4a34      	ldr	r2, [pc, #208]	@ (8003cc4 <Screen_HandleButton+0x7dc>)
 8003bf4:	2120      	movs	r1, #32
 8003bf6:	f004 fc19 	bl	800842c <sniprintf>
            send_cmd(cmd);
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fac4 	bl	800318c <send_cmd>
            goto_dash_cycle();
 8003c04:	f7ff f8c2 	bl	8002d8c <goto_dash_cycle>
            screenNeedsRefresh = true;
 8003c08:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003c0e:	e09b      	b.n	8003d48 <Screen_HandleButton+0x860>

    case UI_EDIT_TWIST_OFF_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; screenNeedsRefresh = true; }
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d10f      	bne.n	8003c36 <Screen_HandleButton+0x74e>
 8003c16:	4b26      	ldr	r3, [pc, #152]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b3b      	cmp	r3, #59	@ 0x3b
 8003c28:	d902      	bls.n	8003c30 <Screen_HandleButton+0x748>
 8003c2a:	4b21      	ldr	r3, [pc, #132]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m == 0) temp_m = 59; else temp_m--; screenNeedsRefresh = true; }
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d110      	bne.n	8003c5e <Screen_HandleButton+0x776>
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <Screen_HandleButton+0x764>
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003c46:	223b      	movs	r2, #59	@ 0x3b
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e005      	b.n	8003c58 <Screen_HandleButton+0x770>
 8003c4c:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <Screen_HandleButton+0x7c8>)
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	4b16      	ldr	r3, [pc, #88]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TWIST_OFF_S; screenNeedsRefresh = true; }
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d173      	bne.n	8003d4c <Screen_HandleButton+0x864>
 8003c64:	4b14      	ldr	r3, [pc, #80]	@ (8003cb8 <Screen_HandleButton+0x7d0>)
 8003c66:	2212      	movs	r2, #18
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	4b12      	ldr	r3, [pc, #72]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
        break;
 8003c70:	e06c      	b.n	8003d4c <Screen_HandleButton+0x864>
    case UI_EDIT_TWIST_OFF_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; screenNeedsRefresh = true; }
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d10f      	bne.n	8003c98 <Screen_HandleButton+0x7b0>
 8003c78:	4b10      	ldr	r3, [pc, #64]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b3b      	cmp	r3, #59	@ 0x3b
 8003c8a:	d902      	bls.n	8003c92 <Screen_HandleButton+0x7aa>
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <Screen_HandleButton+0x7cc>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s == 0) temp_s = 59; else temp_s--; screenNeedsRefresh = true; }
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d11d      	bne.n	8003cda <Screen_HandleButton+0x7f2>
 8003c9e:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d110      	bne.n	8003cc8 <Screen_HandleButton+0x7e0>
 8003ca6:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <Screen_HandleButton+0x7d4>)
 8003ca8:	223b      	movs	r2, #59	@ 0x3b
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e012      	b.n	8003cd4 <Screen_HandleButton+0x7ec>
 8003cae:	bf00      	nop
 8003cb0:	2000036a 	.word	0x2000036a
 8003cb4:	2000036d 	.word	0x2000036d
 8003cb8:	20000350 	.word	0x20000350
 8003cbc:	2000036b 	.word	0x2000036b
 8003cc0:	08009f34 	.word	0x08009f34
 8003cc4:	08009f4c 	.word	0x08009f4c
 8003cc8:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <Screen_HandleButton+0x870>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b21      	ldr	r3, [pc, #132]	@ (8003d58 <Screen_HandleButton+0x870>)
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	4b21      	ldr	r3, [pc, #132]	@ (8003d5c <Screen_HandleButton+0x874>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d137      	bne.n	8003d50 <Screen_HandleButton+0x868>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"TWIST_OFFDUR:%02u:%02u", temp_m, temp_s);
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <Screen_HandleButton+0x878>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d58 <Screen_HandleButton+0x870>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	f107 000c 	add.w	r0, r7, #12
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d64 <Screen_HandleButton+0x87c>)
 8003cf4:	2120      	movs	r1, #32
 8003cf6:	f004 fb99 	bl	800842c <sniprintf>
            send_cmd(cmd);
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fa44 	bl	800318c <send_cmd>
            goto_dash_cycle();
 8003d04:	f7ff f842 	bl	8002d8c <goto_dash_cycle>
            screenNeedsRefresh = true;
 8003d08:	4b14      	ldr	r3, [pc, #80]	@ (8003d5c <Screen_HandleButton+0x874>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003d0e:	e01f      	b.n	8003d50 <Screen_HandleButton+0x868>
        break;
 8003d10:	bf00      	nop
 8003d12:	e01e      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d14:	bf00      	nop
 8003d16:	e01c      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d18:	bf00      	nop
 8003d1a:	e01a      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d1c:	bf00      	nop
 8003d1e:	e018      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d20:	bf00      	nop
 8003d22:	e016      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d24:	bf00      	nop
 8003d26:	e014      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d28:	bf00      	nop
 8003d2a:	e012      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d2c:	bf00      	nop
 8003d2e:	e010      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d30:	bf00      	nop
 8003d32:	e00e      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d34:	bf00      	nop
 8003d36:	e00c      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d38:	bf00      	nop
 8003d3a:	e00a      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d3c:	bf00      	nop
 8003d3e:	e008      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d40:	bf00      	nop
 8003d42:	e006      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d44:	bf00      	nop
 8003d46:	e004      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <Screen_HandleButton+0x86a>
        break;
 8003d50:	bf00      	nop

    default:
    }
}
 8003d52:	3744      	adds	r7, #68	@ 0x44
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd90      	pop	{r4, r7, pc}
 8003d58:	2000036b 	.word	0x2000036b
 8003d5c:	2000036d 	.word	0x2000036d
 8003d60:	2000036a 	.word	0x2000036a
 8003d64:	08009f64 	.word	0x08009f64

08003d68 <Screen_HandleSwitches>:
void Screen_HandleSwitches(void){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
    bool sw1 = (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_RESET);
 8003d6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d72:	484f      	ldr	r0, [pc, #316]	@ (8003eb0 <Screen_HandleSwitches+0x148>)
 8003d74:	f001 fb30 	bl	80053d8 <HAL_GPIO_ReadPin>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	71fb      	strb	r3, [r7, #7]
    bool sw2 = (HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH2_Pin) == GPIO_PIN_RESET);
 8003d84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d88:	4849      	ldr	r0, [pc, #292]	@ (8003eb0 <Screen_HandleSwitches+0x148>)
 8003d8a:	f001 fb25 	bl	80053d8 <HAL_GPIO_ReadPin>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	71bb      	strb	r3, [r7, #6]
    bool sw3 = (HAL_GPIO_ReadPin(SWITCH3_GPIO_Port, SWITCH3_Pin) == GPIO_PIN_RESET);
 8003d9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d9e:	4844      	ldr	r0, [pc, #272]	@ (8003eb0 <Screen_HandleSwitches+0x148>)
 8003da0:	f001 fb1a 	bl	80053d8 <HAL_GPIO_ReadPin>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	717b      	strb	r3, [r7, #5]
    bool sw4 = (HAL_GPIO_ReadPin(SWITCH4_GPIO_Port, SWITCH4_Pin) == GPIO_PIN_RESET);
 8003db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003db4:	483e      	ldr	r0, [pc, #248]	@ (8003eb0 <Screen_HandleSwitches+0x148>)
 8003db6:	f001 fb0f 	bl	80053d8 <HAL_GPIO_ReadPin>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	713b      	strb	r3, [r7, #4]

    if (sw1 && switch1_prev) {
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00f      	beq.n	8003dec <Screen_HandleSwitches+0x84>
 8003dcc:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <Screen_HandleSwitches+0x14c>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00b      	beq.n	8003dec <Screen_HandleSwitches+0x84>
        HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8003dd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dd8:	4837      	ldr	r0, [pc, #220]	@ (8003eb8 <Screen_HandleSwitches+0x150>)
 8003dda:	f001 fb2c 	bl	8005436 <HAL_GPIO_TogglePin>
        Screen_HandleButton(BTN_RESET);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f7ff fb82 	bl	80034e8 <Screen_HandleButton>
        switch1_prev = false;
 8003de4:	4b33      	ldr	r3, [pc, #204]	@ (8003eb4 <Screen_HandleSwitches+0x14c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e008      	b.n	8003dfe <Screen_HandleSwitches+0x96>
    } else if (!sw1) {
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	f083 0301 	eor.w	r3, r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <Screen_HandleSwitches+0x96>
        switch1_prev = true;
 8003df8:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <Screen_HandleSwitches+0x14c>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
    }

    if (sw2 && switch2_prev) {
 8003dfe:	79bb      	ldrb	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00f      	beq.n	8003e24 <Screen_HandleSwitches+0xbc>
 8003e04:	4b2d      	ldr	r3, [pc, #180]	@ (8003ebc <Screen_HandleSwitches+0x154>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <Screen_HandleSwitches+0xbc>
        HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 8003e0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e10:	4829      	ldr	r0, [pc, #164]	@ (8003eb8 <Screen_HandleSwitches+0x150>)
 8003e12:	f001 fb10 	bl	8005436 <HAL_GPIO_TogglePin>
        Screen_HandleButton(BTN_SELECT);
 8003e16:	2002      	movs	r0, #2
 8003e18:	f7ff fb66 	bl	80034e8 <Screen_HandleButton>
        switch2_prev = false;
 8003e1c:	4b27      	ldr	r3, [pc, #156]	@ (8003ebc <Screen_HandleSwitches+0x154>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e008      	b.n	8003e36 <Screen_HandleSwitches+0xce>
    } else if (!sw2) {
 8003e24:	79bb      	ldrb	r3, [r7, #6]
 8003e26:	f083 0301 	eor.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <Screen_HandleSwitches+0xce>
        switch2_prev = true;
 8003e30:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <Screen_HandleSwitches+0x154>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
    }

    if (sw3 && switch3_prev) {
 8003e36:	797b      	ldrb	r3, [r7, #5]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00f      	beq.n	8003e5c <Screen_HandleSwitches+0xf4>
 8003e3c:	4b20      	ldr	r3, [pc, #128]	@ (8003ec0 <Screen_HandleSwitches+0x158>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <Screen_HandleSwitches+0xf4>
        HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
 8003e44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e48:	481b      	ldr	r0, [pc, #108]	@ (8003eb8 <Screen_HandleSwitches+0x150>)
 8003e4a:	f001 faf4 	bl	8005436 <HAL_GPIO_TogglePin>
        Screen_HandleButton(BTN_UP);
 8003e4e:	2003      	movs	r0, #3
 8003e50:	f7ff fb4a 	bl	80034e8 <Screen_HandleButton>
        switch3_prev = false;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec0 <Screen_HandleSwitches+0x158>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e008      	b.n	8003e6e <Screen_HandleSwitches+0x106>
    } else if (!sw3) {
 8003e5c:	797b      	ldrb	r3, [r7, #5]
 8003e5e:	f083 0301 	eor.w	r3, r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <Screen_HandleSwitches+0x106>
        switch3_prev = true;
 8003e68:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <Screen_HandleSwitches+0x158>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
    }

    if (sw4 && switch4_prev) {
 8003e6e:	793b      	ldrb	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00f      	beq.n	8003e94 <Screen_HandleSwitches+0x12c>
 8003e74:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <Screen_HandleSwitches+0x15c>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00b      	beq.n	8003e94 <Screen_HandleSwitches+0x12c>
        HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
 8003e7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e80:	480d      	ldr	r0, [pc, #52]	@ (8003eb8 <Screen_HandleSwitches+0x150>)
 8003e82:	f001 fad8 	bl	8005436 <HAL_GPIO_TogglePin>
        Screen_HandleButton(BTN_DOWN);
 8003e86:	2004      	movs	r0, #4
 8003e88:	f7ff fb2e 	bl	80034e8 <Screen_HandleButton>
        switch4_prev = false;
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <Screen_HandleSwitches+0x15c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
    } else if (!sw4) {
        switch4_prev = true;
    }
}
 8003e92:	e008      	b.n	8003ea6 <Screen_HandleSwitches+0x13e>
    } else if (!sw4) {
 8003e94:	793b      	ldrb	r3, [r7, #4]
 8003e96:	f083 0301 	eor.w	r3, r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <Screen_HandleSwitches+0x13e>
        switch4_prev = true;
 8003ea0:	4b08      	ldr	r3, [pc, #32]	@ (8003ec4 <Screen_HandleSwitches+0x15c>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40010c00 	.word	0x40010c00
 8003eb4:	20000060 	.word	0x20000060
 8003eb8:	40010800 	.word	0x40010800
 8003ebc:	20000061 	.word	0x20000061
 8003ec0:	20000062 	.word	0x20000062
 8003ec4:	20000063 	.word	0x20000063

08003ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ece:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <HAL_MspInit+0x5c>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	@ (8003f24 <HAL_MspInit+0x5c>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6193      	str	r3, [r2, #24]
 8003eda:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_MspInit+0x5c>)
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f24 <HAL_MspInit+0x5c>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4a0e      	ldr	r2, [pc, #56]	@ (8003f24 <HAL_MspInit+0x5c>)
 8003eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef0:	61d3      	str	r3, [r2, #28]
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <HAL_MspInit+0x5c>)
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003efe:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_MspInit+0x60>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	4a04      	ldr	r2, [pc, #16]	@ (8003f28 <HAL_MspInit+0x60>)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40010000 	.word	0x40010000

08003f2c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <HAL_ADC_MspInit+0x6c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d121      	bne.n	8003f90 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <HAL_ADC_MspInit+0x70>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4a12      	ldr	r2, [pc, #72]	@ (8003f9c <HAL_ADC_MspInit+0x70>)
 8003f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f56:	6193      	str	r3, [r2, #24]
 8003f58:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <HAL_ADC_MspInit+0x70>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f64:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <HAL_ADC_MspInit+0x70>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <HAL_ADC_MspInit+0x70>)
 8003f6a:	f043 0304 	orr.w	r3, r3, #4
 8003f6e:	6193      	str	r3, [r2, #24]
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <HAL_ADC_MspInit+0x70>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003f7c:	233f      	movs	r3, #63	@ 0x3f
 8003f7e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f80:	2303      	movs	r3, #3
 8003f82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	f107 0310 	add.w	r3, r7, #16
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4805      	ldr	r0, [pc, #20]	@ (8003fa0 <HAL_ADC_MspInit+0x74>)
 8003f8c:	f001 f8a0 	bl	80050d0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003f90:	bf00      	nop
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40012400 	.word	0x40012400
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40010800 	.word	0x40010800

08003fa4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 0310 	add.w	r3, r7, #16
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a16      	ldr	r2, [pc, #88]	@ (8004018 <HAL_I2C_MspInit+0x74>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d124      	bne.n	800400e <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc4:	4b15      	ldr	r3, [pc, #84]	@ (800401c <HAL_I2C_MspInit+0x78>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	4a14      	ldr	r2, [pc, #80]	@ (800401c <HAL_I2C_MspInit+0x78>)
 8003fca:	f043 0308 	orr.w	r3, r3, #8
 8003fce:	6193      	str	r3, [r2, #24]
 8003fd0:	4b12      	ldr	r3, [pc, #72]	@ (800401c <HAL_I2C_MspInit+0x78>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003fe0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fe2:	2312      	movs	r3, #18
 8003fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fea:	f107 0310 	add.w	r3, r7, #16
 8003fee:	4619      	mov	r1, r3
 8003ff0:	480b      	ldr	r0, [pc, #44]	@ (8004020 <HAL_I2C_MspInit+0x7c>)
 8003ff2:	f001 f86d 	bl	80050d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <HAL_I2C_MspInit+0x78>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4a08      	ldr	r2, [pc, #32]	@ (800401c <HAL_I2C_MspInit+0x78>)
 8003ffc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004000:	61d3      	str	r3, [r2, #28]
 8004002:	4b06      	ldr	r3, [pc, #24]	@ (800401c <HAL_I2C_MspInit+0x78>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800400e:	bf00      	nop
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40005800 	.word	0x40005800
 800401c:	40021000 	.word	0x40021000
 8004020:	40010c00 	.word	0x40010c00

08004024 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	@ 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a22      	ldr	r2, [pc, #136]	@ (80040c8 <HAL_SPI_MspInit+0xa4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d13d      	bne.n	80040c0 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004044:	4b21      	ldr	r3, [pc, #132]	@ (80040cc <HAL_SPI_MspInit+0xa8>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	4a20      	ldr	r2, [pc, #128]	@ (80040cc <HAL_SPI_MspInit+0xa8>)
 800404a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800404e:	6193      	str	r3, [r2, #24]
 8004050:	4b1e      	ldr	r3, [pc, #120]	@ (80040cc <HAL_SPI_MspInit+0xa8>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405c:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <HAL_SPI_MspInit+0xa8>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	4a1a      	ldr	r2, [pc, #104]	@ (80040cc <HAL_SPI_MspInit+0xa8>)
 8004062:	f043 0308 	orr.w	r3, r3, #8
 8004066:	6193      	str	r3, [r2, #24]
 8004068:	4b18      	ldr	r3, [pc, #96]	@ (80040cc <HAL_SPI_MspInit+0xa8>)
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004074:	2328      	movs	r3, #40	@ 0x28
 8004076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	2302      	movs	r3, #2
 800407a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800407c:	2303      	movs	r3, #3
 800407e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	4619      	mov	r1, r3
 8004086:	4812      	ldr	r0, [pc, #72]	@ (80040d0 <HAL_SPI_MspInit+0xac>)
 8004088:	f001 f822 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800408c:	2310      	movs	r3, #16
 800408e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	4619      	mov	r1, r3
 800409e:	480c      	ldr	r0, [pc, #48]	@ (80040d0 <HAL_SPI_MspInit+0xac>)
 80040a0:	f001 f816 	bl	80050d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_SPI_MspInit+0xb0>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ba:	4a06      	ldr	r2, [pc, #24]	@ (80040d4 <HAL_SPI_MspInit+0xb0>)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80040c0:	bf00      	nop
 80040c2:	3728      	adds	r7, #40	@ 0x28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40013000 	.word	0x40013000
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40010c00 	.word	0x40010c00
 80040d4:	40010000 	.word	0x40010000

080040d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	f107 0310 	add.w	r3, r7, #16
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004164 <HAL_UART_MspInit+0x8c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d131      	bne.n	800415c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_UART_MspInit+0x90>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <HAL_UART_MspInit+0x90>)
 80040fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004102:	6193      	str	r3, [r2, #24]
 8004104:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <HAL_UART_MspInit+0x90>)
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004110:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <HAL_UART_MspInit+0x90>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4a14      	ldr	r2, [pc, #80]	@ (8004168 <HAL_UART_MspInit+0x90>)
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	6193      	str	r3, [r2, #24]
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <HAL_UART_MspInit+0x90>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004128:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800412c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2302      	movs	r3, #2
 8004130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004132:	2303      	movs	r3, #3
 8004134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004136:	f107 0310 	add.w	r3, r7, #16
 800413a:	4619      	mov	r1, r3
 800413c:	480b      	ldr	r0, [pc, #44]	@ (800416c <HAL_UART_MspInit+0x94>)
 800413e:	f000 ffc7 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	4619      	mov	r1, r3
 8004156:	4805      	ldr	r0, [pc, #20]	@ (800416c <HAL_UART_MspInit+0x94>)
 8004158:	f000 ffba 	bl	80050d0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800415c:	bf00      	nop
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40013800 	.word	0x40013800
 8004168:	40021000 	.word	0x40021000
 800416c:	40010800 	.word	0x40010800

08004170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004174:	bf00      	nop
 8004176:	e7fd      	b.n	8004174 <NMI_Handler+0x4>

08004178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <HardFault_Handler+0x4>

08004180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <MemManage_Handler+0x4>

08004188 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800418c:	bf00      	nop
 800418e:	e7fd      	b.n	800418c <BusFault_Handler+0x4>

08004190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004194:	bf00      	nop
 8004196:	e7fd      	b.n	8004194 <UsageFault_Handler+0x4>

08004198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041c0:	f000 f988 	bl	80044d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80041cc:	4802      	ldr	r0, [pc, #8]	@ (80041d8 <RTC_Alarm_IRQHandler+0x10>)
 80041ce:	f003 f857 	bl	8007280 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	200001b4 	.word	0x200001b4

080041dc <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
 80041e0:	f000 f98a 	bl	80044f8 <HAL_GetTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	4618      	mov	r0, r3
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fe:	4b20      	ldr	r3, [pc, #128]	@ (8004280 <Switches_Init+0x94>)
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	4a1f      	ldr	r2, [pc, #124]	@ (8004280 <Switches_Init+0x94>)
 8004204:	f043 0308 	orr.w	r3, r3, #8
 8004208:	6193      	str	r3, [r2, #24]
 800420a:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <Switches_Init+0x94>)
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800421a:	2301      	movs	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800421e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8004222:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4816      	ldr	r0, [pc, #88]	@ (8004284 <Switches_Init+0x98>)
 800422a:	f000 ff51 	bl	80050d0 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e01d      	b.n	8004270 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8004234:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <Switches_Init+0x9c>)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4413      	add	r3, r2
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 800423e:	4a13      	ldr	r2, [pc, #76]	@ (800428c <Switches_Init+0xa0>)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4413      	add	r3, r2
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8004248:	f7ff ffc8 	bl	80041dc <now_ms>
 800424c:	4602      	mov	r2, r0
 800424e:	4910      	ldr	r1, [pc, #64]	@ (8004290 <Switches_Init+0xa4>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8004256:	4a0f      	ldr	r2, [pc, #60]	@ (8004294 <Switches_Init+0xa8>)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2100      	movs	r1, #0
 800425c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8004260:	4a0d      	ldr	r2, [pc, #52]	@ (8004298 <Switches_Init+0xac>)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	4413      	add	r3, r2
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	3301      	adds	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b03      	cmp	r3, #3
 8004274:	ddde      	ble.n	8004234 <Switches_Init+0x48>
    }
}
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	40010c00 	.word	0x40010c00
 8004288:	20000374 	.word	0x20000374
 800428c:	20000388 	.word	0x20000388
 8004290:	20000378 	.word	0x20000378
 8004294:	2000038c 	.word	0x2000038c
 8004298:	2000039c 	.word	0x2000039c

0800429c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042a4:	4a14      	ldr	r2, [pc, #80]	@ (80042f8 <_sbrk+0x5c>)
 80042a6:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <_sbrk+0x60>)
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042b0:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <_sbrk+0x64>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042b8:	4b11      	ldr	r3, [pc, #68]	@ (8004300 <_sbrk+0x64>)
 80042ba:	4a12      	ldr	r2, [pc, #72]	@ (8004304 <_sbrk+0x68>)
 80042bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042be:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <_sbrk+0x64>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d207      	bcs.n	80042dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042cc:	f004 f962 	bl	8008594 <__errno>
 80042d0:	4603      	mov	r3, r0
 80042d2:	220c      	movs	r2, #12
 80042d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	e009      	b.n	80042f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042dc:	4b08      	ldr	r3, [pc, #32]	@ (8004300 <_sbrk+0x64>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042e2:	4b07      	ldr	r3, [pc, #28]	@ (8004300 <_sbrk+0x64>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	4a05      	ldr	r2, [pc, #20]	@ (8004300 <_sbrk+0x64>)
 80042ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ee:	68fb      	ldr	r3, [r7, #12]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20005000 	.word	0x20005000
 80042fc:	00000400 	.word	0x00000400
 8004300:	200003a0 	.word	0x200003a0
 8004304:	20000538 	.word	0x20000538

08004308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8004318:	2240      	movs	r2, #64	@ 0x40
 800431a:	2100      	movs	r1, #0
 800431c:	4807      	ldr	r0, [pc, #28]	@ (800433c <UART_Init+0x28>)
 800431e:	f004 f90b 	bl	8008538 <memset>
    rxIndex = 0;
 8004322:	4b07      	ldr	r3, [pc, #28]	@ (8004340 <UART_Init+0x2c>)
 8004324:	2200      	movs	r2, #0
 8004326:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <UART_Init+0x30>)
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 800432e:	2201      	movs	r2, #1
 8004330:	4905      	ldr	r1, [pc, #20]	@ (8004348 <UART_Init+0x34>)
 8004332:	4806      	ldr	r0, [pc, #24]	@ (800434c <UART_Init+0x38>)
 8004334:	f003 fe48 	bl	8007fc8 <HAL_UART_Receive_IT>
}
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}
 800433c:	200003a8 	.word	0x200003a8
 8004340:	200003e8 	.word	0x200003e8
 8004344:	200003ea 	.word	0x200003ea
 8004348:	200003a4 	.word	0x200003a4
 800434c:	20000220 	.word	0x20000220

08004350 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800435a:	6838      	ldr	r0, [r7, #0]
 800435c:	f7fb ff00 	bl	8000160 <strlen>
 8004360:	4603      	mov	r3, r0
 8004362:	b29a      	uxth	r2, r3
 8004364:	f04f 33ff 	mov.w	r3, #4294967295
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f003 fda1 	bl	8007eb2 <HAL_UART_Transmit>
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8004382:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <UART_GetReceivedPacket+0x78>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d02c      	beq.n	80043e4 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 800438a:	481a      	ldr	r0, [pc, #104]	@ (80043f4 <UART_GetReceivedPacket+0x7c>)
 800438c:	f7fb fee8 	bl	8000160 <strlen>
 8004390:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d219      	bcs.n	80043ce <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	461a      	mov	r2, r3
 80043a0:	4914      	ldr	r1, [pc, #80]	@ (80043f4 <UART_GetReceivedPacket+0x7c>)
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f004 f8e2 	bl	800856c <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4413      	add	r3, r2
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 80043b4:	2240      	movs	r2, #64	@ 0x40
 80043b6:	2100      	movs	r1, #0
 80043b8:	480e      	ldr	r0, [pc, #56]	@ (80043f4 <UART_GetReceivedPacket+0x7c>)
 80043ba:	f004 f8bd 	bl	8008538 <memset>
            rxIndex = 0;
 80043be:	4b0e      	ldr	r3, [pc, #56]	@ (80043f8 <UART_GetReceivedPacket+0x80>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <UART_GetReceivedPacket+0x78>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
            return true;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00b      	b.n	80043e6 <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 80043ce:	2240      	movs	r2, #64	@ 0x40
 80043d0:	2100      	movs	r1, #0
 80043d2:	4808      	ldr	r0, [pc, #32]	@ (80043f4 <UART_GetReceivedPacket+0x7c>)
 80043d4:	f004 f8b0 	bl	8008538 <memset>
            rxIndex = 0;
 80043d8:	4b07      	ldr	r3, [pc, #28]	@ (80043f8 <UART_GetReceivedPacket+0x80>)
 80043da:	2200      	movs	r2, #0
 80043dc:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 80043de:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <UART_GetReceivedPacket+0x78>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200003ea 	.word	0x200003ea
 80043f4:	200003a8 	.word	0x200003a8
 80043f8:	200003e8 	.word	0x200003e8

080043fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043fc:	f7ff ff84 	bl	8004308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004400:	480b      	ldr	r0, [pc, #44]	@ (8004430 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004402:	490c      	ldr	r1, [pc, #48]	@ (8004434 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004404:	4a0c      	ldr	r2, [pc, #48]	@ (8004438 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004408:	e002      	b.n	8004410 <LoopCopyDataInit>

0800440a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800440a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800440c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800440e:	3304      	adds	r3, #4

08004410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004414:	d3f9      	bcc.n	800440a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004416:	4a09      	ldr	r2, [pc, #36]	@ (800443c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004418:	4c09      	ldr	r4, [pc, #36]	@ (8004440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800441a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800441c:	e001      	b.n	8004422 <LoopFillZerobss>

0800441e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800441e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004420:	3204      	adds	r2, #4

08004422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004424:	d3fb      	bcc.n	800441e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004426:	f004 f8bb 	bl	80085a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800442a:	f7fd fc81 	bl	8001d30 <main>
  bx lr
 800442e:	4770      	bx	lr
  ldr r0, =_sdata
 8004430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004434:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004438:	0800a144 	.word	0x0800a144
  ldr r2, =_sbss
 800443c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004440:	20000538 	.word	0x20000538

08004444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004444:	e7fe      	b.n	8004444 <ADC1_2_IRQHandler>
	...

08004448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800444c:	4b08      	ldr	r3, [pc, #32]	@ (8004470 <HAL_Init+0x28>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a07      	ldr	r2, [pc, #28]	@ (8004470 <HAL_Init+0x28>)
 8004452:	f043 0310 	orr.w	r3, r3, #16
 8004456:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004458:	2003      	movs	r0, #3
 800445a:	f000 fe05 	bl	8005068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800445e:	2000      	movs	r0, #0
 8004460:	f000 f808 	bl	8004474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004464:	f7ff fd30 	bl	8003ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40022000 	.word	0x40022000

08004474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800447c:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <HAL_InitTick+0x54>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <HAL_InitTick+0x58>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	4619      	mov	r1, r3
 8004486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800448a:	fbb3 f3f1 	udiv	r3, r3, r1
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fe0f 	bl	80050b6 <HAL_SYSTICK_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e00e      	b.n	80044c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b0f      	cmp	r3, #15
 80044a6:	d80a      	bhi.n	80044be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044a8:	2200      	movs	r2, #0
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	f000 fde5 	bl	800507e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044b4:	4a06      	ldr	r2, [pc, #24]	@ (80044d0 <HAL_InitTick+0x5c>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000064 	.word	0x20000064
 80044cc:	2000006c 	.word	0x2000006c
 80044d0:	20000068 	.word	0x20000068

080044d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_IncTick+0x1c>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <HAL_IncTick+0x20>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4413      	add	r3, r2
 80044e4:	4a03      	ldr	r2, [pc, #12]	@ (80044f4 <HAL_IncTick+0x20>)
 80044e6:	6013      	str	r3, [r2, #0]
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	2000006c 	.word	0x2000006c
 80044f4:	200003ec 	.word	0x200003ec

080044f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return uwTick;
 80044fc:	4b02      	ldr	r3, [pc, #8]	@ (8004508 <HAL_GetTick+0x10>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	200003ec 	.word	0x200003ec

0800450c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004514:	f7ff fff0 	bl	80044f8 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d005      	beq.n	8004532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004526:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <HAL_Delay+0x44>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004532:	bf00      	nop
 8004534:	f7ff ffe0 	bl	80044f8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d8f7      	bhi.n	8004534 <HAL_Delay+0x28>
  {
  }
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	2000006c 	.word	0x2000006c

08004554 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0be      	b.n	80046f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fcca 	bl	8003f2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fbc5 	bl	8004d28 <ADC_ConversionStop_Disable>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 8099 	bne.w	80046e2 <HAL_ADC_Init+0x18e>
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 8095 	bne.w	80046e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045c0:	f023 0302 	bic.w	r3, r3, #2
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	7b1b      	ldrb	r3, [r3, #12]
 80045da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80045dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ec:	d003      	beq.n	80045f6 <HAL_ADC_Init+0xa2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d102      	bne.n	80045fc <HAL_ADC_Init+0xa8>
 80045f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045fa:	e000      	b.n	80045fe <HAL_ADC_Init+0xaa>
 80045fc:	2300      	movs	r3, #0
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7d1b      	ldrb	r3, [r3, #20]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d119      	bne.n	8004640 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	7b1b      	ldrb	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	3b01      	subs	r3, #1
 800461a:	035a      	lsls	r2, r3, #13
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e00b      	b.n	8004640 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	4b28      	ldr	r3, [pc, #160]	@ (80046fc <HAL_ADC_Init+0x1a8>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	430b      	orrs	r3, r1
 8004666:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004670:	d003      	beq.n	800467a <HAL_ADC_Init+0x126>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d104      	bne.n	8004684 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	3b01      	subs	r3, #1
 8004680:	051b      	lsls	r3, r3, #20
 8004682:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	430a      	orrs	r2, r1
 8004696:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	4b18      	ldr	r3, [pc, #96]	@ (8004700 <HAL_ADC_Init+0x1ac>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d10b      	bne.n	80046c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	f023 0303 	bic.w	r3, r3, #3
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046be:	e018      	b.n	80046f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	f023 0312 	bic.w	r3, r3, #18
 80046c8:	f043 0210 	orr.w	r2, r3, #16
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d4:	f043 0201 	orr.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046e0:	e007      	b.n	80046f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e6:	f043 0210 	orr.w	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	ffe1f7fd 	.word	0xffe1f7fd
 8004700:	ff1f0efe 	.word	0xff1f0efe

08004704 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_ADC_Start+0x1a>
 800471a:	2302      	movs	r3, #2
 800471c:	e098      	b.n	8004850 <HAL_ADC_Start+0x14c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 faa4 	bl	8004c74 <ADC_Enable>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 8087 	bne.w	8004846 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a41      	ldr	r2, [pc, #260]	@ (8004858 <HAL_ADC_Start+0x154>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d105      	bne.n	8004762 <HAL_ADC_Start+0x5e>
 8004756:	4b41      	ldr	r3, [pc, #260]	@ (800485c <HAL_ADC_Start+0x158>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d115      	bne.n	800478e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d026      	beq.n	80047ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004784:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800478c:	e01d      	b.n	80047ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2f      	ldr	r2, [pc, #188]	@ (800485c <HAL_ADC_Start+0x158>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_ADC_Start+0xaa>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004858 <HAL_ADC_Start+0x154>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d10d      	bne.n	80047ca <HAL_ADC_Start+0xc6>
 80047ae:	4b2b      	ldr	r3, [pc, #172]	@ (800485c <HAL_ADC_Start+0x158>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80047c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d006      	beq.n	80047e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	f023 0206 	bic.w	r2, r3, #6
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80047e2:	e002      	b.n	80047ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f06f 0202 	mvn.w	r2, #2
 80047fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004806:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800480a:	d113      	bne.n	8004834 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004810:	4a11      	ldr	r2, [pc, #68]	@ (8004858 <HAL_ADC_Start+0x154>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d105      	bne.n	8004822 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004816:	4b11      	ldr	r3, [pc, #68]	@ (800485c <HAL_ADC_Start+0x158>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004830:	609a      	str	r2, [r3, #8]
 8004832:	e00c      	b.n	800484e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	e003      	b.n	800484e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40012800 	.word	0x40012800
 800485c:	40012400 	.word	0x40012400

08004860 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004876:	f7ff fe3f 	bl	80044f8 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e0d3      	b.n	8004a4a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d131      	bne.n	8004914 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d12a      	bne.n	8004914 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80048be:	e021      	b.n	8004904 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d01d      	beq.n	8004904 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HAL_ADC_PollForConversion+0x7e>
 80048ce:	f7ff fe13 	bl	80044f8 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d212      	bcs.n	8004904 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	f043 0204 	orr.w	r2, r3, #4
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e0a2      	b.n	8004a4a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0d6      	beq.n	80048c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004912:	e070      	b.n	80049f6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004914:	4b4f      	ldr	r3, [pc, #316]	@ (8004a54 <HAL_ADC_PollForConversion+0x1f4>)
 8004916:	681c      	ldr	r4, [r3, #0]
 8004918:	2002      	movs	r0, #2
 800491a:	f002 fbfb 	bl	8007114 <HAL_RCCEx_GetPeriphCLKFreq>
 800491e:	4603      	mov	r3, r0
 8004920:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6919      	ldr	r1, [r3, #16]
 800492a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a58 <HAL_ADC_PollForConversion+0x1f8>)
 800492c:	400b      	ands	r3, r1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d118      	bne.n	8004964 <HAL_ADC_PollForConversion+0x104>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68d9      	ldr	r1, [r3, #12]
 8004938:	4b48      	ldr	r3, [pc, #288]	@ (8004a5c <HAL_ADC_PollForConversion+0x1fc>)
 800493a:	400b      	ands	r3, r1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d111      	bne.n	8004964 <HAL_ADC_PollForConversion+0x104>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6919      	ldr	r1, [r3, #16]
 8004946:	4b46      	ldr	r3, [pc, #280]	@ (8004a60 <HAL_ADC_PollForConversion+0x200>)
 8004948:	400b      	ands	r3, r1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <HAL_ADC_PollForConversion+0x100>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68d9      	ldr	r1, [r3, #12]
 8004954:	4b43      	ldr	r3, [pc, #268]	@ (8004a64 <HAL_ADC_PollForConversion+0x204>)
 8004956:	400b      	ands	r3, r1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_ADC_PollForConversion+0x100>
 800495c:	2314      	movs	r3, #20
 800495e:	e020      	b.n	80049a2 <HAL_ADC_PollForConversion+0x142>
 8004960:	2329      	movs	r3, #41	@ 0x29
 8004962:	e01e      	b.n	80049a2 <HAL_ADC_PollForConversion+0x142>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6919      	ldr	r1, [r3, #16]
 800496a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a60 <HAL_ADC_PollForConversion+0x200>)
 800496c:	400b      	ands	r3, r1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_ADC_PollForConversion+0x120>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68d9      	ldr	r1, [r3, #12]
 8004978:	4b3a      	ldr	r3, [pc, #232]	@ (8004a64 <HAL_ADC_PollForConversion+0x204>)
 800497a:	400b      	ands	r3, r1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <HAL_ADC_PollForConversion+0x13c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6919      	ldr	r1, [r3, #16]
 8004986:	4b38      	ldr	r3, [pc, #224]	@ (8004a68 <HAL_ADC_PollForConversion+0x208>)
 8004988:	400b      	ands	r3, r1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d108      	bne.n	80049a0 <HAL_ADC_PollForConversion+0x140>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68d9      	ldr	r1, [r3, #12]
 8004994:	4b34      	ldr	r3, [pc, #208]	@ (8004a68 <HAL_ADC_PollForConversion+0x208>)
 8004996:	400b      	ands	r3, r1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_ADC_PollForConversion+0x140>
 800499c:	2354      	movs	r3, #84	@ 0x54
 800499e:	e000      	b.n	80049a2 <HAL_ADC_PollForConversion+0x142>
 80049a0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80049a8:	e021      	b.n	80049ee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d01a      	beq.n	80049e8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_ADC_PollForConversion+0x168>
 80049b8:	f7ff fd9e 	bl	80044f8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d20f      	bcs.n	80049e8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d90b      	bls.n	80049e8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	f043 0204 	orr.w	r2, r3, #4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e030      	b.n	8004a4a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3301      	adds	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d8d9      	bhi.n	80049aa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f06f 0212 	mvn.w	r2, #18
 80049fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004a16:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004a1a:	d115      	bne.n	8004a48 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d111      	bne.n	8004a48 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	f043 0201 	orr.w	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd90      	pop	{r4, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000064 	.word	0x20000064
 8004a58:	24924924 	.word	0x24924924
 8004a5c:	00924924 	.word	0x00924924
 8004a60:	12492492 	.word	0x12492492
 8004a64:	00492492 	.word	0x00492492
 8004a68:	00249249 	.word	0x00249249

08004a6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x20>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0dc      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x1da>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d81c      	bhi.n	8004aee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3b05      	subs	r3, #5
 8004ac6:	221f      	movs	r2, #31
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	4019      	ands	r1, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	3b05      	subs	r3, #5
 8004ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	635a      	str	r2, [r3, #52]	@ 0x34
 8004aec:	e03c      	b.n	8004b68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b0c      	cmp	r3, #12
 8004af4:	d81c      	bhi.n	8004b30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	3b23      	subs	r3, #35	@ 0x23
 8004b08:	221f      	movs	r2, #31
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	4019      	ands	r1, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	3b23      	subs	r3, #35	@ 0x23
 8004b22:	fa00 f203 	lsl.w	r2, r0, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b2e:	e01b      	b.n	8004b68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	3b41      	subs	r3, #65	@ 0x41
 8004b42:	221f      	movs	r2, #31
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	4019      	ands	r1, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	3b41      	subs	r3, #65	@ 0x41
 8004b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b09      	cmp	r3, #9
 8004b6e:	d91c      	bls.n	8004baa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68d9      	ldr	r1, [r3, #12]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	3b1e      	subs	r3, #30
 8004b82:	2207      	movs	r2, #7
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	4019      	ands	r1, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6898      	ldr	r0, [r3, #8]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	4413      	add	r3, r2
 8004b9a:	3b1e      	subs	r3, #30
 8004b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	e019      	b.n	8004bde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6919      	ldr	r1, [r3, #16]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	2207      	movs	r2, #7
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	4019      	ands	r1, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	6898      	ldr	r0, [r3, #8]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4413      	add	r3, r2
 8004bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d003      	beq.n	8004bee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004bea:	2b11      	cmp	r3, #17
 8004bec:	d132      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c68 <HAL_ADC_ConfigChannel+0x1e4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d125      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d126      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004c14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d11a      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c1e:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <HAL_ADC_ConfigChannel+0x1e8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a13      	ldr	r2, [pc, #76]	@ (8004c70 <HAL_ADC_ConfigChannel+0x1ec>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	0c9a      	lsrs	r2, r3, #18
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004c34:	e002      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f9      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x1b2>
 8004c42:	e007      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr
 8004c68:	40012400 	.word	0x40012400
 8004c6c:	20000064 	.word	0x20000064
 8004c70:	431bde83 	.word	0x431bde83

08004c74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d040      	beq.n	8004d14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <ADC_Enable+0xac>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d24 <ADC_Enable+0xb0>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	0c9b      	lsrs	r3, r3, #18
 8004cae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004cb0:	e002      	b.n	8004cb8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f9      	bne.n	8004cb2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cbe:	f7ff fc1b 	bl	80044f8 <HAL_GetTick>
 8004cc2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004cc4:	e01f      	b.n	8004d06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cc6:	f7ff fc17 	bl	80044f8 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d918      	bls.n	8004d06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d011      	beq.n	8004d06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	f043 0210 	orr.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e007      	b.n	8004d16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d1d8      	bne.n	8004cc6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000064 	.word	0x20000064
 8004d24:	431bde83 	.word	0x431bde83

08004d28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d12e      	bne.n	8004da0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0201 	bic.w	r2, r2, #1
 8004d50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d52:	f7ff fbd1 	bl	80044f8 <HAL_GetTick>
 8004d56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004d58:	e01b      	b.n	8004d92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d5a:	f7ff fbcd 	bl	80044f8 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d914      	bls.n	8004d92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d10d      	bne.n	8004d92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7a:	f043 0210 	orr.w	r2, r3, #16
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	f043 0201 	orr.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e007      	b.n	8004da2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d0dc      	beq.n	8004d5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_ADCEx_Calibration_Start+0x1e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e097      	b.n	8004efa <HAL_ADCEx_Calibration_Start+0x14e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ffa8 	bl	8004d28 <ADC_ConversionStop_Disable>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff49 	bl	8004c74 <ADC_Enable>
 8004de2:	4603      	mov	r3, r0
 8004de4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 8081 	bne.w	8004ef0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004df6:	f023 0302 	bic.w	r3, r3, #2
 8004dfa:	f043 0202 	orr.w	r2, r3, #2
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004e02:	4b40      	ldr	r3, [pc, #256]	@ (8004f04 <HAL_ADCEx_Calibration_Start+0x158>)
 8004e04:	681c      	ldr	r4, [r3, #0]
 8004e06:	2002      	movs	r0, #2
 8004e08:	f002 f984 	bl	8007114 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004e12:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004e14:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004e16:	e002      	b.n	8004e1e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f9      	bne.n	8004e18 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0208 	orr.w	r2, r2, #8
 8004e32:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004e34:	f7ff fb60 	bl	80044f8 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004e3a:	e01b      	b.n	8004e74 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004e3c:	f7ff fb5c 	bl	80044f8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b0a      	cmp	r3, #10
 8004e48:	d914      	bls.n	8004e74 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	f023 0312 	bic.w	r3, r3, #18
 8004e60:	f043 0210 	orr.w	r2, r3, #16
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e042      	b.n	8004efa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1dc      	bne.n	8004e3c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0204 	orr.w	r2, r2, #4
 8004e90:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004e92:	f7ff fb31 	bl	80044f8 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004e98:	e01b      	b.n	8004ed2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004e9a:	f7ff fb2d 	bl	80044f8 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b0a      	cmp	r3, #10
 8004ea6:	d914      	bls.n	8004ed2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	f023 0312 	bic.w	r3, r3, #18
 8004ebe:	f043 0210 	orr.w	r2, r3, #16
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e013      	b.n	8004efa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1dc      	bne.n	8004e9a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	f023 0303 	bic.w	r3, r3, #3
 8004ee8:	f043 0201 	orr.w	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd90      	pop	{r4, r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000064 	.word	0x20000064

08004f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f18:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <__NVIC_SetPriorityGrouping+0x44>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f24:	4013      	ands	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f3a:	4a04      	ldr	r2, [pc, #16]	@ (8004f4c <__NVIC_SetPriorityGrouping+0x44>)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	60d3      	str	r3, [r2, #12]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000ed00 	.word	0xe000ed00

08004f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f54:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <__NVIC_GetPriorityGrouping+0x18>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	0a1b      	lsrs	r3, r3, #8
 8004f5a:	f003 0307 	and.w	r3, r3, #7
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	6039      	str	r1, [r7, #0]
 8004f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	db0a      	blt.n	8004f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	490c      	ldr	r1, [pc, #48]	@ (8004fb8 <__NVIC_SetPriority+0x4c>)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	0112      	lsls	r2, r2, #4
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	440b      	add	r3, r1
 8004f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f94:	e00a      	b.n	8004fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	4908      	ldr	r1, [pc, #32]	@ (8004fbc <__NVIC_SetPriority+0x50>)
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	0112      	lsls	r2, r2, #4
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	440b      	add	r3, r1
 8004faa:	761a      	strb	r2, [r3, #24]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	e000e100 	.word	0xe000e100
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	@ 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f1c3 0307 	rsb	r3, r3, #7
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	bf28      	it	cs
 8004fde:	2304      	movcs	r3, #4
 8004fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2b06      	cmp	r3, #6
 8004fe8:	d902      	bls.n	8004ff0 <NVIC_EncodePriority+0x30>
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3b03      	subs	r3, #3
 8004fee:	e000      	b.n	8004ff2 <NVIC_EncodePriority+0x32>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	401a      	ands	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005008:	f04f 31ff 	mov.w	r1, #4294967295
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	43d9      	mvns	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005018:	4313      	orrs	r3, r2
         );
}
 800501a:	4618      	mov	r0, r3
 800501c:	3724      	adds	r7, #36	@ 0x24
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005034:	d301      	bcc.n	800503a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005036:	2301      	movs	r3, #1
 8005038:	e00f      	b.n	800505a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800503a:	4a0a      	ldr	r2, [pc, #40]	@ (8005064 <SysTick_Config+0x40>)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005042:	210f      	movs	r1, #15
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	f7ff ff90 	bl	8004f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <SysTick_Config+0x40>)
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005052:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <SysTick_Config+0x40>)
 8005054:	2207      	movs	r2, #7
 8005056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000e010 	.word	0xe000e010

08005068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff49 	bl	8004f08 <__NVIC_SetPriorityGrouping>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	4603      	mov	r3, r0
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005090:	f7ff ff5e 	bl	8004f50 <__NVIC_GetPriorityGrouping>
 8005094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f7ff ff90 	bl	8004fc0 <NVIC_EncodePriority>
 80050a0:	4602      	mov	r2, r0
 80050a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff5f 	bl	8004f6c <__NVIC_SetPriority>
}
 80050ae:	bf00      	nop
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ffb0 	bl	8005024 <SysTick_Config>
 80050c4:	4603      	mov	r3, r0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b08b      	sub	sp, #44	@ 0x2c
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050e2:	e169      	b.n	80053b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050e4:	2201      	movs	r2, #1
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	f040 8158 	bne.w	80053b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4a9a      	ldr	r2, [pc, #616]	@ (8005370 <HAL_GPIO_Init+0x2a0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d05e      	beq.n	80051ca <HAL_GPIO_Init+0xfa>
 800510c:	4a98      	ldr	r2, [pc, #608]	@ (8005370 <HAL_GPIO_Init+0x2a0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d875      	bhi.n	80051fe <HAL_GPIO_Init+0x12e>
 8005112:	4a98      	ldr	r2, [pc, #608]	@ (8005374 <HAL_GPIO_Init+0x2a4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d058      	beq.n	80051ca <HAL_GPIO_Init+0xfa>
 8005118:	4a96      	ldr	r2, [pc, #600]	@ (8005374 <HAL_GPIO_Init+0x2a4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d86f      	bhi.n	80051fe <HAL_GPIO_Init+0x12e>
 800511e:	4a96      	ldr	r2, [pc, #600]	@ (8005378 <HAL_GPIO_Init+0x2a8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d052      	beq.n	80051ca <HAL_GPIO_Init+0xfa>
 8005124:	4a94      	ldr	r2, [pc, #592]	@ (8005378 <HAL_GPIO_Init+0x2a8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d869      	bhi.n	80051fe <HAL_GPIO_Init+0x12e>
 800512a:	4a94      	ldr	r2, [pc, #592]	@ (800537c <HAL_GPIO_Init+0x2ac>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d04c      	beq.n	80051ca <HAL_GPIO_Init+0xfa>
 8005130:	4a92      	ldr	r2, [pc, #584]	@ (800537c <HAL_GPIO_Init+0x2ac>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d863      	bhi.n	80051fe <HAL_GPIO_Init+0x12e>
 8005136:	4a92      	ldr	r2, [pc, #584]	@ (8005380 <HAL_GPIO_Init+0x2b0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d046      	beq.n	80051ca <HAL_GPIO_Init+0xfa>
 800513c:	4a90      	ldr	r2, [pc, #576]	@ (8005380 <HAL_GPIO_Init+0x2b0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d85d      	bhi.n	80051fe <HAL_GPIO_Init+0x12e>
 8005142:	2b12      	cmp	r3, #18
 8005144:	d82a      	bhi.n	800519c <HAL_GPIO_Init+0xcc>
 8005146:	2b12      	cmp	r3, #18
 8005148:	d859      	bhi.n	80051fe <HAL_GPIO_Init+0x12e>
 800514a:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <HAL_GPIO_Init+0x80>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	080051cb 	.word	0x080051cb
 8005154:	080051a5 	.word	0x080051a5
 8005158:	080051b7 	.word	0x080051b7
 800515c:	080051f9 	.word	0x080051f9
 8005160:	080051ff 	.word	0x080051ff
 8005164:	080051ff 	.word	0x080051ff
 8005168:	080051ff 	.word	0x080051ff
 800516c:	080051ff 	.word	0x080051ff
 8005170:	080051ff 	.word	0x080051ff
 8005174:	080051ff 	.word	0x080051ff
 8005178:	080051ff 	.word	0x080051ff
 800517c:	080051ff 	.word	0x080051ff
 8005180:	080051ff 	.word	0x080051ff
 8005184:	080051ff 	.word	0x080051ff
 8005188:	080051ff 	.word	0x080051ff
 800518c:	080051ff 	.word	0x080051ff
 8005190:	080051ff 	.word	0x080051ff
 8005194:	080051ad 	.word	0x080051ad
 8005198:	080051c1 	.word	0x080051c1
 800519c:	4a79      	ldr	r2, [pc, #484]	@ (8005384 <HAL_GPIO_Init+0x2b4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80051a2:	e02c      	b.n	80051fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	623b      	str	r3, [r7, #32]
          break;
 80051aa:	e029      	b.n	8005200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	3304      	adds	r3, #4
 80051b2:	623b      	str	r3, [r7, #32]
          break;
 80051b4:	e024      	b.n	8005200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	3308      	adds	r3, #8
 80051bc:	623b      	str	r3, [r7, #32]
          break;
 80051be:	e01f      	b.n	8005200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	330c      	adds	r3, #12
 80051c6:	623b      	str	r3, [r7, #32]
          break;
 80051c8:	e01a      	b.n	8005200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80051d2:	2304      	movs	r3, #4
 80051d4:	623b      	str	r3, [r7, #32]
          break;
 80051d6:	e013      	b.n	8005200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d105      	bne.n	80051ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051e0:	2308      	movs	r3, #8
 80051e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	611a      	str	r2, [r3, #16]
          break;
 80051ea:	e009      	b.n	8005200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051ec:	2308      	movs	r3, #8
 80051ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	615a      	str	r2, [r3, #20]
          break;
 80051f6:	e003      	b.n	8005200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051f8:	2300      	movs	r3, #0
 80051fa:	623b      	str	r3, [r7, #32]
          break;
 80051fc:	e000      	b.n	8005200 <HAL_GPIO_Init+0x130>
          break;
 80051fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2bff      	cmp	r3, #255	@ 0xff
 8005204:	d801      	bhi.n	800520a <HAL_GPIO_Init+0x13a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	e001      	b.n	800520e <HAL_GPIO_Init+0x13e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2bff      	cmp	r3, #255	@ 0xff
 8005214:	d802      	bhi.n	800521c <HAL_GPIO_Init+0x14c>
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	e002      	b.n	8005222 <HAL_GPIO_Init+0x152>
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	3b08      	subs	r3, #8
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	210f      	movs	r1, #15
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	fa01 f303 	lsl.w	r3, r1, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	401a      	ands	r2, r3
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	fa01 f303 	lsl.w	r3, r1, r3
 800523c:	431a      	orrs	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80b1 	beq.w	80053b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005250:	4b4d      	ldr	r3, [pc, #308]	@ (8005388 <HAL_GPIO_Init+0x2b8>)
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	4a4c      	ldr	r2, [pc, #304]	@ (8005388 <HAL_GPIO_Init+0x2b8>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6193      	str	r3, [r2, #24]
 800525c:	4b4a      	ldr	r3, [pc, #296]	@ (8005388 <HAL_GPIO_Init+0x2b8>)
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005268:	4a48      	ldr	r2, [pc, #288]	@ (800538c <HAL_GPIO_Init+0x2bc>)
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	089b      	lsrs	r3, r3, #2
 800526e:	3302      	adds	r3, #2
 8005270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	220f      	movs	r2, #15
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4013      	ands	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a40      	ldr	r2, [pc, #256]	@ (8005390 <HAL_GPIO_Init+0x2c0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_GPIO_Init+0x1ec>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a3f      	ldr	r2, [pc, #252]	@ (8005394 <HAL_GPIO_Init+0x2c4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00d      	beq.n	80052b8 <HAL_GPIO_Init+0x1e8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3e      	ldr	r2, [pc, #248]	@ (8005398 <HAL_GPIO_Init+0x2c8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <HAL_GPIO_Init+0x1e4>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3d      	ldr	r2, [pc, #244]	@ (800539c <HAL_GPIO_Init+0x2cc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d101      	bne.n	80052b0 <HAL_GPIO_Init+0x1e0>
 80052ac:	2303      	movs	r3, #3
 80052ae:	e006      	b.n	80052be <HAL_GPIO_Init+0x1ee>
 80052b0:	2304      	movs	r3, #4
 80052b2:	e004      	b.n	80052be <HAL_GPIO_Init+0x1ee>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e002      	b.n	80052be <HAL_GPIO_Init+0x1ee>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <HAL_GPIO_Init+0x1ee>
 80052bc:	2300      	movs	r3, #0
 80052be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c0:	f002 0203 	and.w	r2, r2, #3
 80052c4:	0092      	lsls	r2, r2, #2
 80052c6:	4093      	lsls	r3, r2
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80052ce:	492f      	ldr	r1, [pc, #188]	@ (800538c <HAL_GPIO_Init+0x2bc>)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	3302      	adds	r3, #2
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80052e8:	4b2d      	ldr	r3, [pc, #180]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	492c      	ldr	r1, [pc, #176]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	608b      	str	r3, [r1, #8]
 80052f4:	e006      	b.n	8005304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80052f6:	4b2a      	ldr	r3, [pc, #168]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	4928      	ldr	r1, [pc, #160]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005300:	4013      	ands	r3, r2
 8005302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005310:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	4922      	ldr	r1, [pc, #136]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	60cb      	str	r3, [r1, #12]
 800531c:	e006      	b.n	800532c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800531e:	4b20      	ldr	r3, [pc, #128]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	43db      	mvns	r3, r3
 8005326:	491e      	ldr	r1, [pc, #120]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005328:	4013      	ands	r3, r2
 800532a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d006      	beq.n	8005346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005338:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	4918      	ldr	r1, [pc, #96]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	4313      	orrs	r3, r2
 8005342:	604b      	str	r3, [r1, #4]
 8005344:	e006      	b.n	8005354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005346:	4b16      	ldr	r3, [pc, #88]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	43db      	mvns	r3, r3
 800534e:	4914      	ldr	r1, [pc, #80]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005350:	4013      	ands	r3, r2
 8005352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d021      	beq.n	80053a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005360:	4b0f      	ldr	r3, [pc, #60]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	490e      	ldr	r1, [pc, #56]	@ (80053a0 <HAL_GPIO_Init+0x2d0>)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	4313      	orrs	r3, r2
 800536a:	600b      	str	r3, [r1, #0]
 800536c:	e021      	b.n	80053b2 <HAL_GPIO_Init+0x2e2>
 800536e:	bf00      	nop
 8005370:	10320000 	.word	0x10320000
 8005374:	10310000 	.word	0x10310000
 8005378:	10220000 	.word	0x10220000
 800537c:	10210000 	.word	0x10210000
 8005380:	10120000 	.word	0x10120000
 8005384:	10110000 	.word	0x10110000
 8005388:	40021000 	.word	0x40021000
 800538c:	40010000 	.word	0x40010000
 8005390:	40010800 	.word	0x40010800
 8005394:	40010c00 	.word	0x40010c00
 8005398:	40011000 	.word	0x40011000
 800539c:	40011400 	.word	0x40011400
 80053a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_GPIO_Init+0x304>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	43db      	mvns	r3, r3
 80053ac:	4909      	ldr	r1, [pc, #36]	@ (80053d4 <HAL_GPIO_Init+0x304>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	3301      	adds	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	fa22 f303 	lsr.w	r3, r2, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f47f ae8e 	bne.w	80050e4 <HAL_GPIO_Init+0x14>
  }
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	372c      	adds	r7, #44	@ 0x2c
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	40010400 	.word	0x40010400

080053d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	887b      	ldrh	r3, [r7, #2]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	e001      	b.n	80053fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	807b      	strh	r3, [r7, #2]
 8005412:	4613      	mov	r3, r2
 8005414:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005416:	787b      	ldrb	r3, [r7, #1]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800541c:	887a      	ldrh	r2, [r7, #2]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005422:	e003      	b.n	800542c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	041a      	lsls	r2, r3, #16
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	611a      	str	r2, [r3, #16]
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005448:	887a      	ldrh	r2, [r7, #2]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4013      	ands	r3, r2
 800544e:	041a      	lsls	r2, r3, #16
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	43d9      	mvns	r1, r3
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	400b      	ands	r3, r1
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	611a      	str	r2, [r3, #16]
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e12b      	b.n	80056d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fe fd88 	bl	8003fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	@ 0x24
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054cc:	f001 fd26 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 80054d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4a81      	ldr	r2, [pc, #516]	@ (80056dc <HAL_I2C_Init+0x274>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d807      	bhi.n	80054ec <HAL_I2C_Init+0x84>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a80      	ldr	r2, [pc, #512]	@ (80056e0 <HAL_I2C_Init+0x278>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	bf94      	ite	ls
 80054e4:	2301      	movls	r3, #1
 80054e6:	2300      	movhi	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e006      	b.n	80054fa <HAL_I2C_Init+0x92>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a7d      	ldr	r2, [pc, #500]	@ (80056e4 <HAL_I2C_Init+0x27c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	bf94      	ite	ls
 80054f4:	2301      	movls	r3, #1
 80054f6:	2300      	movhi	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e0e7      	b.n	80056d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a78      	ldr	r2, [pc, #480]	@ (80056e8 <HAL_I2C_Init+0x280>)
 8005506:	fba2 2303 	umull	r2, r3, r2, r3
 800550a:	0c9b      	lsrs	r3, r3, #18
 800550c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a6a      	ldr	r2, [pc, #424]	@ (80056dc <HAL_I2C_Init+0x274>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d802      	bhi.n	800553c <HAL_I2C_Init+0xd4>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	3301      	adds	r3, #1
 800553a:	e009      	b.n	8005550 <HAL_I2C_Init+0xe8>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	4a69      	ldr	r2, [pc, #420]	@ (80056ec <HAL_I2C_Init+0x284>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	099b      	lsrs	r3, r3, #6
 800554e:	3301      	adds	r3, #1
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	430b      	orrs	r3, r1
 8005556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005562:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	495c      	ldr	r1, [pc, #368]	@ (80056dc <HAL_I2C_Init+0x274>)
 800556c:	428b      	cmp	r3, r1
 800556e:	d819      	bhi.n	80055a4 <HAL_I2C_Init+0x13c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1e59      	subs	r1, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	fbb1 f3f3 	udiv	r3, r1, r3
 800557e:	1c59      	adds	r1, r3, #1
 8005580:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005584:	400b      	ands	r3, r1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_I2C_Init+0x138>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1e59      	subs	r1, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	fbb1 f3f3 	udiv	r3, r1, r3
 8005598:	3301      	adds	r3, #1
 800559a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559e:	e051      	b.n	8005644 <HAL_I2C_Init+0x1dc>
 80055a0:	2304      	movs	r3, #4
 80055a2:	e04f      	b.n	8005644 <HAL_I2C_Init+0x1dc>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d111      	bne.n	80055d0 <HAL_I2C_Init+0x168>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1e58      	subs	r0, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6859      	ldr	r1, [r3, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	440b      	add	r3, r1
 80055ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80055be:	3301      	adds	r3, #1
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e012      	b.n	80055f6 <HAL_I2C_Init+0x18e>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1e58      	subs	r0, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6859      	ldr	r1, [r3, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	0099      	lsls	r1, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e6:	3301      	adds	r3, #1
 80055e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_I2C_Init+0x196>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e022      	b.n	8005644 <HAL_I2C_Init+0x1dc>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10e      	bne.n	8005624 <HAL_I2C_Init+0x1bc>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1e58      	subs	r0, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6859      	ldr	r1, [r3, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	440b      	add	r3, r1
 8005614:	fbb0 f3f3 	udiv	r3, r0, r3
 8005618:	3301      	adds	r3, #1
 800561a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005622:	e00f      	b.n	8005644 <HAL_I2C_Init+0x1dc>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e58      	subs	r0, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	0099      	lsls	r1, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	6809      	ldr	r1, [r1, #0]
 8005648:	4313      	orrs	r3, r2
 800564a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005672:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6911      	ldr	r1, [r2, #16]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68d2      	ldr	r2, [r2, #12]
 800567e:	4311      	orrs	r1, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	430b      	orrs	r3, r1
 8005686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	000186a0 	.word	0x000186a0
 80056e0:	001e847f 	.word	0x001e847f
 80056e4:	003d08ff 	.word	0x003d08ff
 80056e8:	431bde83 	.word	0x431bde83
 80056ec:	10624dd3 	.word	0x10624dd3

080056f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	461a      	mov	r2, r3
 80056fc:	460b      	mov	r3, r1
 80056fe:	817b      	strh	r3, [r7, #10]
 8005700:	4613      	mov	r3, r2
 8005702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005704:	f7fe fef8 	bl	80044f8 <HAL_GetTick>
 8005708:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b20      	cmp	r3, #32
 8005714:	f040 80e0 	bne.w	80058d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2319      	movs	r3, #25
 800571e:	2201      	movs	r2, #1
 8005720:	4970      	ldr	r1, [pc, #448]	@ (80058e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fdfa 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800572e:	2302      	movs	r3, #2
 8005730:	e0d3      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_I2C_Master_Transmit+0x50>
 800573c:	2302      	movs	r3, #2
 800573e:	e0cc      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d007      	beq.n	8005766 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2221      	movs	r2, #33	@ 0x21
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2210      	movs	r2, #16
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	893a      	ldrh	r2, [r7, #8]
 8005796:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a50      	ldr	r2, [pc, #320]	@ (80058e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80057a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057a8:	8979      	ldrh	r1, [r7, #10]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	6a3a      	ldr	r2, [r7, #32]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fc4a 	bl	8006048 <I2C_MasterRequestWrite>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e08d      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057d4:	e066      	b.n	80058a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	6a39      	ldr	r1, [r7, #32]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 feb8 	bl	8006550 <I2C_WaitOnTXEFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d107      	bne.n	80057fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e06b      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d11b      	bne.n	8005878 <HAL_I2C_Master_Transmit+0x188>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005844:	2b00      	cmp	r3, #0
 8005846:	d017      	beq.n	8005878 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	6a39      	ldr	r1, [r7, #32]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 feaf 	bl	80065e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00d      	beq.n	80058a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	2b04      	cmp	r3, #4
 800588e:	d107      	bne.n	80058a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800589e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e01a      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d194      	bne.n	80057d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	00100002 	.word	0x00100002
 80058e8:	ffff0000 	.word	0xffff0000

080058ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08c      	sub	sp, #48	@ 0x30
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800590a:	f7fe fdf5 	bl	80044f8 <HAL_GetTick>
 800590e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b20      	cmp	r3, #32
 800591a:	f040 8250 	bne.w	8005dbe <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	2319      	movs	r3, #25
 8005924:	2201      	movs	r2, #1
 8005926:	4982      	ldr	r1, [pc, #520]	@ (8005b30 <HAL_I2C_Mem_Read+0x244>)
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fcf7 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
 8005936:	e243      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_I2C_Mem_Read+0x5a>
 8005942:	2302      	movs	r3, #2
 8005944:	e23c      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d007      	beq.n	800596c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800597a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2222      	movs	r2, #34	@ 0x22
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2240      	movs	r2, #64	@ 0x40
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005996:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800599c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a62      	ldr	r2, [pc, #392]	@ (8005b34 <HAL_I2C_Mem_Read+0x248>)
 80059ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059ae:	88f8      	ldrh	r0, [r7, #6]
 80059b0:	893a      	ldrh	r2, [r7, #8]
 80059b2:	8979      	ldrh	r1, [r7, #10]
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	4603      	mov	r3, r0
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fbc4 	bl	800614c <I2C_RequestMemoryRead>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e1f8      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d113      	bne.n	80059fe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e1cc      	b.n	8005d98 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d11e      	bne.n	8005a44 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a16:	b672      	cpsid	i
}
 8005a18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a40:	b662      	cpsie	i
}
 8005a42:	e035      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d11e      	bne.n	8005a8a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a5c:	b672      	cpsid	i
}
 8005a5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a86:	b662      	cpsie	i
}
 8005a88:	e012      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005ab0:	e172      	b.n	8005d98 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	f200 811f 	bhi.w	8005cfa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d123      	bne.n	8005b0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 fdd1 	bl	8006670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e173      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b0a:	e145      	b.n	8005d98 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d152      	bne.n	8005bba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	4906      	ldr	r1, [pc, #24]	@ (8005b38 <HAL_I2C_Mem_Read+0x24c>)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fbfc 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e148      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
 8005b2e:	bf00      	nop
 8005b30:	00100002 	.word	0x00100002
 8005b34:	ffff0000 	.word	0xffff0000
 8005b38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005b3c:	b672      	cpsid	i
}
 8005b3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005b82:	b662      	cpsie	i
}
 8005b84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bb8:	e0ee      	b.n	8005d98 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4981      	ldr	r1, [pc, #516]	@ (8005dc8 <HAL_I2C_Mem_Read+0x4dc>)
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fba9 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0f5      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005be4:	b672      	cpsid	i
}
 8005be6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c1a:	4b6c      	ldr	r3, [pc, #432]	@ (8005dcc <HAL_I2C_Mem_Read+0x4e0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	08db      	lsrs	r3, r3, #3
 8005c20:	4a6b      	ldr	r2, [pc, #428]	@ (8005dd0 <HAL_I2C_Mem_Read+0x4e4>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	0a1a      	lsrs	r2, r3, #8
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	00da      	lsls	r2, r3, #3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d118      	bne.n	8005c72 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005c62:	b662      	cpsie	i
}
 8005c64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e0a6      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d1d9      	bne.n	8005c34 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005cc2:	b662      	cpsie	i
}
 8005cc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cf8:	e04e      	b.n	8005d98 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fcb6 	bl	8006670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e058      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d124      	bne.n	8005d98 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d107      	bne.n	8005d66 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d64:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f47f ae88 	bne.w	8005ab2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e000      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
  }
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3728      	adds	r7, #40	@ 0x28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	00010004 	.word	0x00010004
 8005dcc:	20000064 	.word	0x20000064
 8005dd0:	14f8b589 	.word	0x14f8b589

08005dd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	@ 0x28
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	460b      	mov	r3, r1
 8005de2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005de4:	f7fe fb88 	bl	80044f8 <HAL_GetTick>
 8005de8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	f040 8111 	bne.w	800601e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	2319      	movs	r3, #25
 8005e02:	2201      	movs	r2, #1
 8005e04:	4988      	ldr	r1, [pc, #544]	@ (8006028 <HAL_I2C_IsDeviceReady+0x254>)
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fa88 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
 8005e14:	e104      	b.n	8006020 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_I2C_IsDeviceReady+0x50>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e0fd      	b.n	8006020 <HAL_I2C_IsDeviceReady+0x24c>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d007      	beq.n	8005e4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2224      	movs	r2, #36	@ 0x24
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4a70      	ldr	r2, [pc, #448]	@ (800602c <HAL_I2C_IsDeviceReady+0x258>)
 8005e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fa46 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00d      	beq.n	8005eb2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea4:	d103      	bne.n	8005eae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e0b6      	b.n	8006020 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eb2:	897b      	ldrh	r3, [r7, #10]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ec0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005ec2:	f7fe fb19 	bl	80044f8 <HAL_GetTick>
 8005ec6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2301      	moveq	r3, #1
 8005ed8:	2300      	movne	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ef6:	e025      	b.n	8005f44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ef8:	f7fe fafe 	bl	80044f8 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <HAL_I2C_IsDeviceReady+0x13a>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	22a0      	movs	r2, #160	@ 0xa0
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2301      	moveq	r3, #1
 8005f3e:	2300      	movne	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f4e:	d005      	beq.n	8005f5c <HAL_I2C_IsDeviceReady+0x188>
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <HAL_I2C_IsDeviceReady+0x188>
 8005f56:	7dbb      	ldrb	r3, [r7, #22]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0cd      	beq.n	8005ef8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d129      	bne.n	8005fc6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	613b      	str	r3, [r7, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	2319      	movs	r3, #25
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4921      	ldr	r1, [pc, #132]	@ (8006028 <HAL_I2C_IsDeviceReady+0x254>)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f9ba 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e036      	b.n	8006020 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e02c      	b.n	8006020 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2319      	movs	r3, #25
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	490f      	ldr	r1, [pc, #60]	@ (8006028 <HAL_I2C_IsDeviceReady+0x254>)
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f996 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e012      	b.n	8006020 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	f4ff af32 	bcc.w	8005e6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	00100002 	.word	0x00100002
 800602c:	ffff0000 	.word	0xffff0000

08006030 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr
	...

08006048 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	460b      	mov	r3, r1
 8006056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b08      	cmp	r3, #8
 8006062:	d006      	beq.n	8006072 <I2C_MasterRequestWrite+0x2a>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d003      	beq.n	8006072 <I2C_MasterRequestWrite+0x2a>
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006070:	d108      	bne.n	8006084 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e00b      	b.n	800609c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006088:	2b12      	cmp	r3, #18
 800608a:	d107      	bne.n	800609c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800609a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f937 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00d      	beq.n	80060d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c2:	d103      	bne.n	80060cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e035      	b.n	800613c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060d8:	d108      	bne.n	80060ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060e8:	611a      	str	r2, [r3, #16]
 80060ea:	e01b      	b.n	8006124 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80060ec:	897b      	ldrh	r3, [r7, #10]
 80060ee:	11db      	asrs	r3, r3, #7
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f003 0306 	and.w	r3, r3, #6
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f063 030f 	orn	r3, r3, #15
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	490e      	ldr	r1, [pc, #56]	@ (8006144 <I2C_MasterRequestWrite+0xfc>)
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f980 	bl	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e010      	b.n	800613c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800611a:	897b      	ldrh	r3, [r7, #10]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	4907      	ldr	r1, [pc, #28]	@ (8006148 <I2C_MasterRequestWrite+0x100>)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f970 	bl	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	00010008 	.word	0x00010008
 8006148:	00010002 	.word	0x00010002

0800614c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	461a      	mov	r2, r3
 800615a:	4603      	mov	r3, r0
 800615c:	817b      	strh	r3, [r7, #10]
 800615e:	460b      	mov	r3, r1
 8006160:	813b      	strh	r3, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006174:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006184:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	2200      	movs	r2, #0
 800618e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f8c2 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ac:	d103      	bne.n	80061b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e0aa      	b.n	8006310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061ba:	897b      	ldrh	r3, [r7, #10]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	4952      	ldr	r1, [pc, #328]	@ (8006318 <I2C_RequestMemoryRead+0x1cc>)
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f91d 	bl	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e097      	b.n	8006310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f8:	6a39      	ldr	r1, [r7, #32]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f9a8 	bl	8006550 <I2C_WaitOnTXEFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	2b04      	cmp	r3, #4
 800620c:	d107      	bne.n	800621e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800621c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e076      	b.n	8006310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	611a      	str	r2, [r3, #16]
 8006232:	e021      	b.n	8006278 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006234:	893b      	ldrh	r3, [r7, #8]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	b29b      	uxth	r3, r3
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006244:	6a39      	ldr	r1, [r7, #32]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f982 	bl	8006550 <I2C_WaitOnTXEFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00d      	beq.n	800626e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	2b04      	cmp	r3, #4
 8006258:	d107      	bne.n	800626a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006268:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e050      	b.n	8006310 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800626e:	893b      	ldrh	r3, [r7, #8]
 8006270:	b2da      	uxtb	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627a:	6a39      	ldr	r1, [r7, #32]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f967 	bl	8006550 <I2C_WaitOnTXEFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00d      	beq.n	80062a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	2b04      	cmp	r3, #4
 800628e:	d107      	bne.n	80062a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800629e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e035      	b.n	8006310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f82b 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062da:	d103      	bne.n	80062e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e013      	b.n	8006310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062e8:	897b      	ldrh	r3, [r7, #10]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	6a3a      	ldr	r2, [r7, #32]
 80062fc:	4906      	ldr	r1, [pc, #24]	@ (8006318 <I2C_RequestMemoryRead+0x1cc>)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f886 	bl	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	00010002 	.word	0x00010002

0800631c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800632c:	e048      	b.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d044      	beq.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006336:	f7fe f8df 	bl	80044f8 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d302      	bcc.n	800634c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d139      	bne.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10d      	bne.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	43da      	mvns	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	e00c      	b.n	800638c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	43da      	mvns	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4013      	ands	r3, r2
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	429a      	cmp	r2, r3
 8006390:	d116      	bne.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e023      	b.n	8006408 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	0c1b      	lsrs	r3, r3, #16
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10d      	bne.n	80063e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	43da      	mvns	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	e00c      	b.n	8006400 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	43da      	mvns	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	429a      	cmp	r2, r3
 8006404:	d093      	beq.n	800632e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800641e:	e071      	b.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800642a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800642e:	d123      	bne.n	8006478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800643e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006464:	f043 0204 	orr.w	r2, r3, #4
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e067      	b.n	8006548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d041      	beq.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006480:	f7fe f83a 	bl	80044f8 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	429a      	cmp	r2, r3
 800648e:	d302      	bcc.n	8006496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d136      	bne.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d10c      	bne.n	80064ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	43da      	mvns	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4013      	ands	r3, r2
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bf14      	ite	ne
 80064b2:	2301      	movne	r3, #1
 80064b4:	2300      	moveq	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	e00b      	b.n	80064d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	43da      	mvns	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf14      	ite	ne
 80064cc:	2301      	movne	r3, #1
 80064ce:	2300      	moveq	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e021      	b.n	8006548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b01      	cmp	r3, #1
 800650c:	d10c      	bne.n	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	43da      	mvns	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4013      	ands	r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e00b      	b.n	8006540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	43da      	mvns	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4013      	ands	r3, r2
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf14      	ite	ne
 800653a:	2301      	movne	r3, #1
 800653c:	2300      	moveq	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	f47f af6d 	bne.w	8006420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800655c:	e034      	b.n	80065c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f8e3 	bl	800672a <I2C_IsAcknowledgeFailed>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e034      	b.n	80065d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d028      	beq.n	80065c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006576:	f7fd ffbf 	bl	80044f8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	429a      	cmp	r2, r3
 8006584:	d302      	bcc.n	800658c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11d      	bne.n	80065c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006596:	2b80      	cmp	r3, #128	@ 0x80
 8006598:	d016      	beq.n	80065c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	f043 0220 	orr.w	r2, r3, #32
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e007      	b.n	80065d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d1c3      	bne.n	800655e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065ec:	e034      	b.n	8006658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f89b 	bl	800672a <I2C_IsAcknowledgeFailed>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e034      	b.n	8006668 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d028      	beq.n	8006658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006606:	f7fd ff77 	bl	80044f8 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	429a      	cmp	r2, r3
 8006614:	d302      	bcc.n	800661c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d11d      	bne.n	8006658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b04      	cmp	r3, #4
 8006628:	d016      	beq.n	8006658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e007      	b.n	8006668 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b04      	cmp	r3, #4
 8006664:	d1c3      	bne.n	80065ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800667c:	e049      	b.n	8006712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b10      	cmp	r3, #16
 800668a:	d119      	bne.n	80066c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0210 	mvn.w	r2, #16
 8006694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e030      	b.n	8006722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c0:	f7fd ff1a 	bl	80044f8 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d302      	bcc.n	80066d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11d      	bne.n	8006712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e0:	2b40      	cmp	r3, #64	@ 0x40
 80066e2:	d016      	beq.n	8006712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e007      	b.n	8006722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671c:	2b40      	cmp	r3, #64	@ 0x40
 800671e:	d1ae      	bne.n	800667e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006740:	d11b      	bne.n	800677a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800674a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006766:	f043 0204 	orr.w	r2, r3, #4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr
	...

08006788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e272      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8087 	beq.w	80068b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067a8:	4b92      	ldr	r3, [pc, #584]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f003 030c 	and.w	r3, r3, #12
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d00c      	beq.n	80067ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067b4:	4b8f      	ldr	r3, [pc, #572]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f003 030c 	and.w	r3, r3, #12
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d112      	bne.n	80067e6 <HAL_RCC_OscConfig+0x5e>
 80067c0:	4b8c      	ldr	r3, [pc, #560]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067cc:	d10b      	bne.n	80067e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ce:	4b89      	ldr	r3, [pc, #548]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d06c      	beq.n	80068b4 <HAL_RCC_OscConfig+0x12c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d168      	bne.n	80068b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e24c      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ee:	d106      	bne.n	80067fe <HAL_RCC_OscConfig+0x76>
 80067f0:	4b80      	ldr	r3, [pc, #512]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a7f      	ldr	r2, [pc, #508]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80067f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	e02e      	b.n	800685c <HAL_RCC_OscConfig+0xd4>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10c      	bne.n	8006820 <HAL_RCC_OscConfig+0x98>
 8006806:	4b7b      	ldr	r3, [pc, #492]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a7a      	ldr	r2, [pc, #488]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 800680c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	4b78      	ldr	r3, [pc, #480]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a77      	ldr	r2, [pc, #476]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006818:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e01d      	b.n	800685c <HAL_RCC_OscConfig+0xd4>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006828:	d10c      	bne.n	8006844 <HAL_RCC_OscConfig+0xbc>
 800682a:	4b72      	ldr	r3, [pc, #456]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a71      	ldr	r2, [pc, #452]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	4b6f      	ldr	r3, [pc, #444]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a6e      	ldr	r2, [pc, #440]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e00b      	b.n	800685c <HAL_RCC_OscConfig+0xd4>
 8006844:	4b6b      	ldr	r3, [pc, #428]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a6a      	ldr	r2, [pc, #424]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 800684a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4b68      	ldr	r3, [pc, #416]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a67      	ldr	r2, [pc, #412]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800685a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d013      	beq.n	800688c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006864:	f7fd fe48 	bl	80044f8 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800686c:	f7fd fe44 	bl	80044f8 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	@ 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e200      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800687e:	4b5d      	ldr	r3, [pc, #372]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0xe4>
 800688a:	e014      	b.n	80068b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688c:	f7fd fe34 	bl	80044f8 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006894:	f7fd fe30 	bl	80044f8 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b64      	cmp	r3, #100	@ 0x64
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e1ec      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a6:	4b53      	ldr	r3, [pc, #332]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x10c>
 80068b2:	e000      	b.n	80068b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d063      	beq.n	800698a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068c2:	4b4c      	ldr	r3, [pc, #304]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068ce:	4b49      	ldr	r3, [pc, #292]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 030c 	and.w	r3, r3, #12
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d11c      	bne.n	8006914 <HAL_RCC_OscConfig+0x18c>
 80068da:	4b46      	ldr	r3, [pc, #280]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d116      	bne.n	8006914 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068e6:	4b43      	ldr	r3, [pc, #268]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_RCC_OscConfig+0x176>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d001      	beq.n	80068fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e1c0      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fe:	4b3d      	ldr	r3, [pc, #244]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4939      	ldr	r1, [pc, #228]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 800690e:	4313      	orrs	r3, r2
 8006910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	e03a      	b.n	800698a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d020      	beq.n	800695e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800691c:	4b36      	ldr	r3, [pc, #216]	@ (80069f8 <HAL_RCC_OscConfig+0x270>)
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006922:	f7fd fde9 	bl	80044f8 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800692a:	f7fd fde5 	bl	80044f8 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e1a1      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693c:	4b2d      	ldr	r3, [pc, #180]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f0      	beq.n	800692a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006948:	4b2a      	ldr	r3, [pc, #168]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4927      	ldr	r1, [pc, #156]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
 800695c:	e015      	b.n	800698a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800695e:	4b26      	ldr	r3, [pc, #152]	@ (80069f8 <HAL_RCC_OscConfig+0x270>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006964:	f7fd fdc8 	bl	80044f8 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800696c:	f7fd fdc4 	bl	80044f8 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e180      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800697e:	4b1d      	ldr	r3, [pc, #116]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d03a      	beq.n	8006a0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d019      	beq.n	80069d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800699e:	4b17      	ldr	r3, [pc, #92]	@ (80069fc <HAL_RCC_OscConfig+0x274>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069a4:	f7fd fda8 	bl	80044f8 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ac:	f7fd fda4 	bl	80044f8 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e160      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069be:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <HAL_RCC_OscConfig+0x26c>)
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80069ca:	2001      	movs	r0, #1
 80069cc:	f000 face 	bl	8006f6c <RCC_Delay>
 80069d0:	e01c      	b.n	8006a0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069d2:	4b0a      	ldr	r3, [pc, #40]	@ (80069fc <HAL_RCC_OscConfig+0x274>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d8:	f7fd fd8e 	bl	80044f8 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069de:	e00f      	b.n	8006a00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e0:	f7fd fd8a 	bl	80044f8 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d908      	bls.n	8006a00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e146      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
 80069f2:	bf00      	nop
 80069f4:	40021000 	.word	0x40021000
 80069f8:	42420000 	.word	0x42420000
 80069fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a00:	4b92      	ldr	r3, [pc, #584]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e9      	bne.n	80069e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80a6 	beq.w	8006b66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a2a:	4b88      	ldr	r3, [pc, #544]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	4a87      	ldr	r2, [pc, #540]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a34:	61d3      	str	r3, [r2, #28]
 8006a36:	4b85      	ldr	r3, [pc, #532]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a3e:	60bb      	str	r3, [r7, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a42:	2301      	movs	r3, #1
 8006a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a46:	4b82      	ldr	r3, [pc, #520]	@ (8006c50 <HAL_RCC_OscConfig+0x4c8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d118      	bne.n	8006a84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a52:	4b7f      	ldr	r3, [pc, #508]	@ (8006c50 <HAL_RCC_OscConfig+0x4c8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a7e      	ldr	r2, [pc, #504]	@ (8006c50 <HAL_RCC_OscConfig+0x4c8>)
 8006a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a5e:	f7fd fd4b 	bl	80044f8 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a66:	f7fd fd47 	bl	80044f8 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b64      	cmp	r3, #100	@ 0x64
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e103      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a78:	4b75      	ldr	r3, [pc, #468]	@ (8006c50 <HAL_RCC_OscConfig+0x4c8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f0      	beq.n	8006a66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d106      	bne.n	8006a9a <HAL_RCC_OscConfig+0x312>
 8006a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	4a6e      	ldr	r2, [pc, #440]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6213      	str	r3, [r2, #32]
 8006a98:	e02d      	b.n	8006af6 <HAL_RCC_OscConfig+0x36e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCC_OscConfig+0x334>
 8006aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	4a69      	ldr	r2, [pc, #420]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	6213      	str	r3, [r2, #32]
 8006aae:	4b67      	ldr	r3, [pc, #412]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	4a66      	ldr	r2, [pc, #408]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006ab4:	f023 0304 	bic.w	r3, r3, #4
 8006ab8:	6213      	str	r3, [r2, #32]
 8006aba:	e01c      	b.n	8006af6 <HAL_RCC_OscConfig+0x36e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b05      	cmp	r3, #5
 8006ac2:	d10c      	bne.n	8006ade <HAL_RCC_OscConfig+0x356>
 8006ac4:	4b61      	ldr	r3, [pc, #388]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	4a60      	ldr	r2, [pc, #384]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006aca:	f043 0304 	orr.w	r3, r3, #4
 8006ace:	6213      	str	r3, [r2, #32]
 8006ad0:	4b5e      	ldr	r3, [pc, #376]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	4a5d      	ldr	r2, [pc, #372]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	6213      	str	r3, [r2, #32]
 8006adc:	e00b      	b.n	8006af6 <HAL_RCC_OscConfig+0x36e>
 8006ade:	4b5b      	ldr	r3, [pc, #364]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	4a5a      	ldr	r2, [pc, #360]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	6213      	str	r3, [r2, #32]
 8006aea:	4b58      	ldr	r3, [pc, #352]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	4a57      	ldr	r2, [pc, #348]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006af0:	f023 0304 	bic.w	r3, r3, #4
 8006af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d015      	beq.n	8006b2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006afe:	f7fd fcfb 	bl	80044f8 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b04:	e00a      	b.n	8006b1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b06:	f7fd fcf7 	bl	80044f8 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e0b1      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0ee      	beq.n	8006b06 <HAL_RCC_OscConfig+0x37e>
 8006b28:	e014      	b.n	8006b54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b2a:	f7fd fce5 	bl	80044f8 <HAL_GetTick>
 8006b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b30:	e00a      	b.n	8006b48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b32:	f7fd fce1 	bl	80044f8 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e09b      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b48:	4b40      	ldr	r3, [pc, #256]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1ee      	bne.n	8006b32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d105      	bne.n	8006b66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	4a3b      	ldr	r2, [pc, #236]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 8087 	beq.w	8006c7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b70:	4b36      	ldr	r3, [pc, #216]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 030c 	and.w	r3, r3, #12
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d061      	beq.n	8006c40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d146      	bne.n	8006c12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b84:	4b33      	ldr	r3, [pc, #204]	@ (8006c54 <HAL_RCC_OscConfig+0x4cc>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8a:	f7fd fcb5 	bl	80044f8 <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b90:	e008      	b.n	8006ba4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b92:	f7fd fcb1 	bl	80044f8 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e06d      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ba4:	4b29      	ldr	r3, [pc, #164]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1f0      	bne.n	8006b92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bb8:	d108      	bne.n	8006bcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006bba:	4b24      	ldr	r3, [pc, #144]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	4921      	ldr	r1, [pc, #132]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a19      	ldr	r1, [r3, #32]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	491b      	ldr	r1, [pc, #108]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c54 <HAL_RCC_OscConfig+0x4cc>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bea:	f7fd fc85 	bl	80044f8 <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf2:	f7fd fc81 	bl	80044f8 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e03d      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c04:	4b11      	ldr	r3, [pc, #68]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f0      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x46a>
 8006c10:	e035      	b.n	8006c7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c12:	4b10      	ldr	r3, [pc, #64]	@ (8006c54 <HAL_RCC_OscConfig+0x4cc>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fd fc6e 	bl	80044f8 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c20:	f7fd fc6a 	bl	80044f8 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e026      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c32:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <HAL_RCC_OscConfig+0x4c4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0x498>
 8006c3e:	e01e      	b.n	8006c7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d107      	bne.n	8006c58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e019      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	40007000 	.word	0x40007000
 8006c54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c58:	4b0b      	ldr	r3, [pc, #44]	@ (8006c88 <HAL_RCC_OscConfig+0x500>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d106      	bne.n	8006c7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d001      	beq.n	8006c7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40021000 	.word	0x40021000

08006c8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0d0      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d910      	bls.n	8006cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cae:	4b67      	ldr	r3, [pc, #412]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 0207 	bic.w	r2, r3, #7
 8006cb6:	4965      	ldr	r1, [pc, #404]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b63      	ldr	r3, [pc, #396]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e0b8      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d020      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ce8:	4b59      	ldr	r3, [pc, #356]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4a58      	ldr	r2, [pc, #352]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006cee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006cf2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d00:	4b53      	ldr	r3, [pc, #332]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	4a52      	ldr	r2, [pc, #328]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006d0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d0c:	4b50      	ldr	r3, [pc, #320]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	494d      	ldr	r1, [pc, #308]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d040      	beq.n	8006dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d107      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d32:	4b47      	ldr	r3, [pc, #284]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d115      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e07f      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d107      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4a:	4b41      	ldr	r3, [pc, #260]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e073      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e06b      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d6a:	4b39      	ldr	r3, [pc, #228]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f023 0203 	bic.w	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4936      	ldr	r1, [pc, #216]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d7c:	f7fd fbbc 	bl	80044f8 <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	e00a      	b.n	8006d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d84:	f7fd fbb8 	bl	80044f8 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e053      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f003 020c 	and.w	r2, r3, #12
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d1eb      	bne.n	8006d84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dac:	4b27      	ldr	r3, [pc, #156]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d210      	bcs.n	8006ddc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dba:	4b24      	ldr	r3, [pc, #144]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f023 0207 	bic.w	r2, r3, #7
 8006dc2:	4922      	ldr	r1, [pc, #136]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dca:	4b20      	ldr	r3, [pc, #128]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d001      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e032      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de8:	4b19      	ldr	r3, [pc, #100]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	4916      	ldr	r1, [pc, #88]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e06:	4b12      	ldr	r3, [pc, #72]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	490e      	ldr	r1, [pc, #56]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e1a:	f000 f821 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	490a      	ldr	r1, [pc, #40]	@ (8006e54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e2c:	5ccb      	ldrb	r3, [r1, r3]
 8006e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e32:	4a09      	ldr	r2, [pc, #36]	@ (8006e58 <HAL_RCC_ClockConfig+0x1cc>)
 8006e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e36:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <HAL_RCC_ClockConfig+0x1d0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fd fb1a 	bl	8004474 <HAL_InitTick>

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40022000 	.word	0x40022000
 8006e50:	40021000 	.word	0x40021000
 8006e54:	08009fa4 	.word	0x08009fa4
 8006e58:	20000064 	.word	0x20000064
 8006e5c:	20000068 	.word	0x20000068

08006e60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	2300      	movs	r3, #0
 8006e74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d002      	beq.n	8006e90 <HAL_RCC_GetSysClockFreq+0x30>
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d003      	beq.n	8006e96 <HAL_RCC_GetSysClockFreq+0x36>
 8006e8e:	e027      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e90:	4b19      	ldr	r3, [pc, #100]	@ (8006ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e92:	613b      	str	r3, [r7, #16]
      break;
 8006e94:	e027      	b.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	0c9b      	lsrs	r3, r3, #18
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	4a17      	ldr	r2, [pc, #92]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006ea0:	5cd3      	ldrb	r3, [r2, r3]
 8006ea2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006eae:	4b11      	ldr	r3, [pc, #68]	@ (8006ef4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	0c5b      	lsrs	r3, r3, #17
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	4a11      	ldr	r2, [pc, #68]	@ (8006f00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006eba:	5cd3      	ldrb	r3, [r2, r3]
 8006ebc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8006ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ec2:	fb03 f202 	mul.w	r2, r3, r2
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e004      	b.n	8006eda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ed4:	fb02 f303 	mul.w	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	613b      	str	r3, [r7, #16]
      break;
 8006ede:	e002      	b.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ee0:	4b05      	ldr	r3, [pc, #20]	@ (8006ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ee2:	613b      	str	r3, [r7, #16]
      break;
 8006ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ee6:	693b      	ldr	r3, [r7, #16]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	371c      	adds	r7, #28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	007a1200 	.word	0x007a1200
 8006efc:	08009fbc 	.word	0x08009fbc
 8006f00:	08009fcc 	.word	0x08009fcc
 8006f04:	003d0900 	.word	0x003d0900

08006f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f0c:	4b02      	ldr	r3, [pc, #8]	@ (8006f18 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr
 8006f18:	20000064 	.word	0x20000064

08006f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f20:	f7ff fff2 	bl	8006f08 <HAL_RCC_GetHCLKFreq>
 8006f24:	4602      	mov	r2, r0
 8006f26:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	4903      	ldr	r1, [pc, #12]	@ (8006f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f32:	5ccb      	ldrb	r3, [r1, r3]
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	08009fb4 	.word	0x08009fb4

08006f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f48:	f7ff ffde 	bl	8006f08 <HAL_RCC_GetHCLKFreq>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	0adb      	lsrs	r3, r3, #11
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	4903      	ldr	r1, [pc, #12]	@ (8006f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f5a:	5ccb      	ldrb	r3, [r1, r3]
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40021000 	.word	0x40021000
 8006f68:	08009fb4 	.word	0x08009fb4

08006f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f74:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa0 <RCC_Delay+0x34>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa4 <RCC_Delay+0x38>)
 8006f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7e:	0a5b      	lsrs	r3, r3, #9
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f88:	bf00      	nop
  }
  while (Delay --);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	60fa      	str	r2, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1f9      	bne.n	8006f88 <RCC_Delay+0x1c>
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr
 8006fa0:	20000064 	.word	0x20000064
 8006fa4:	10624dd3 	.word	0x10624dd3

08006fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d07d      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10d      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fde:	61d3      	str	r3, [r2, #28]
 8006fe0:	4b49      	ldr	r3, [pc, #292]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff0:	4b46      	ldr	r3, [pc, #280]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d118      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ffc:	4b43      	ldr	r3, [pc, #268]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a42      	ldr	r2, [pc, #264]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007008:	f7fd fa76 	bl	80044f8 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800700e:	e008      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007010:	f7fd fa72 	bl	80044f8 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b64      	cmp	r3, #100	@ 0x64
 800701c:	d901      	bls.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e06d      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007022:	4b3a      	ldr	r3, [pc, #232]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f0      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800702e:	4b36      	ldr	r3, [pc, #216]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007036:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02e      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	429a      	cmp	r2, r3
 800704a:	d027      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800704c:	4b2e      	ldr	r3, [pc, #184]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007054:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007056:	4b2e      	ldr	r3, [pc, #184]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800705c:	4b2c      	ldr	r3, [pc, #176]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007062:	4a29      	ldr	r2, [pc, #164]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d014      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007072:	f7fd fa41 	bl	80044f8 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007078:	e00a      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800707a:	f7fd fa3d 	bl	80044f8 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007088:	4293      	cmp	r3, r2
 800708a:	d901      	bls.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e036      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007090:	4b1d      	ldr	r3, [pc, #116]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0ee      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800709c:	4b1a      	ldr	r3, [pc, #104]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	4917      	ldr	r1, [pc, #92]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d105      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070b4:	4b14      	ldr	r3, [pc, #80]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4a13      	ldr	r2, [pc, #76]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d008      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	490b      	ldr	r1, [pc, #44]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ea:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	4904      	ldr	r1, [pc, #16]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40021000 	.word	0x40021000
 800710c:	40007000 	.word	0x40007000
 8007110:	42420440 	.word	0x42420440

08007114 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	2300      	movs	r3, #0
 8007122:	61fb      	str	r3, [r7, #28]
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	2300      	movs	r3, #0
 800712e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b10      	cmp	r3, #16
 8007134:	d00a      	beq.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b10      	cmp	r3, #16
 800713a:	f200 808a 	bhi.w	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d045      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d075      	beq.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800714a:	e082      	b.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800714c:	4b46      	ldr	r3, [pc, #280]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007152:	4b45      	ldr	r3, [pc, #276]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d07b      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	0c9b      	lsrs	r3, r3, #18
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	4a41      	ldr	r2, [pc, #260]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007168:	5cd3      	ldrb	r3, [r2, r3]
 800716a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d015      	beq.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007176:	4b3c      	ldr	r3, [pc, #240]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	0c5b      	lsrs	r3, r3, #17
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	4a3b      	ldr	r2, [pc, #236]	@ (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007182:	5cd3      	ldrb	r3, [r2, r3]
 8007184:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00d      	beq.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007190:	4a38      	ldr	r2, [pc, #224]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	fbb2 f2f3 	udiv	r2, r2, r3
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	e004      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4a34      	ldr	r2, [pc, #208]	@ (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80071a6:	fb02 f303 	mul.w	r3, r2, r3
 80071aa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80071ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071b8:	d102      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	61bb      	str	r3, [r7, #24]
      break;
 80071be:	e04a      	b.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4a2d      	ldr	r2, [pc, #180]	@ (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	61bb      	str	r3, [r7, #24]
      break;
 80071ce:	e042      	b.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80071d0:	4b25      	ldr	r3, [pc, #148]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e0:	d108      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80071ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	e01f      	b.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071fe:	d109      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007200:	4b19      	ldr	r3, [pc, #100]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800720c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	e00f      	b.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800721a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800721e:	d11c      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007220:	4b11      	ldr	r3, [pc, #68]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d016      	beq.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800722c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007230:	61bb      	str	r3, [r7, #24]
      break;
 8007232:	e012      	b.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007234:	e011      	b.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007236:	f7ff fe85 	bl	8006f44 <HAL_RCC_GetPCLK2Freq>
 800723a:	4602      	mov	r2, r0
 800723c:	4b0a      	ldr	r3, [pc, #40]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	0b9b      	lsrs	r3, r3, #14
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	3301      	adds	r3, #1
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	fbb2 f3f3 	udiv	r3, r2, r3
 800724e:	61bb      	str	r3, [r7, #24]
      break;
 8007250:	e004      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007252:	bf00      	nop
 8007254:	e002      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800725a:	bf00      	nop
    }
  }
  return (frequency);
 800725c:	69bb      	ldr	r3, [r7, #24]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	40021000 	.word	0x40021000
 800726c:	08009fd0 	.word	0x08009fd0
 8007270:	08009fe0 	.word	0x08009fe0
 8007274:	007a1200 	.word	0x007a1200
 8007278:	003d0900 	.word	0x003d0900
 800727c:	aaaaaaab 	.word	0xaaaaaaab

08007280 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d011      	beq.n	80072ba <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f815 	bl	80072d4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0202 	bic.w	r2, r2, #2
 80072b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80072ba:	4b05      	ldr	r3, [pc, #20]	@ (80072d0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80072bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80072c0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	745a      	strb	r2, [r3, #17]
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40010400 	.word	0x40010400

080072d4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr

080072e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e076      	b.n	80073e6 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d108      	bne.n	8007312 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007308:	d009      	beq.n	800731e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	61da      	str	r2, [r3, #28]
 8007310:	e005      	b.n	800731e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d106      	bne.n	800733e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fc fe73 	bl	8004024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007354:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a2:	ea42 0103 	orr.w	r1, r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	0c1a      	lsrs	r2, r3, #16
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f002 0204 	and.w	r2, r2, #4
 80073c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b088      	sub	sp, #32
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073fe:	f7fd f87b 	bl	80044f8 <HAL_GetTick>
 8007402:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007404:	88fb      	ldrh	r3, [r7, #6]
 8007406:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d001      	beq.n	8007418 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
 8007416:	e12a      	b.n	800766e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_SPI_Transmit+0x36>
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e122      	b.n	800766e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_SPI_Transmit+0x48>
 8007432:	2302      	movs	r3, #2
 8007434:	e11b      	b.n	800766e <HAL_SPI_Transmit+0x280>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2203      	movs	r2, #3
 8007442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	88fa      	ldrh	r2, [r7, #6]
 8007456:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007484:	d10f      	bne.n	80074a6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b0:	2b40      	cmp	r3, #64	@ 0x40
 80074b2:	d007      	beq.n	80074c4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074cc:	d152      	bne.n	8007574 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_SPI_Transmit+0xee>
 80074d6:	8b7b      	ldrh	r3, [r7, #26]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d145      	bne.n	8007568 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e0:	881a      	ldrh	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ec:	1c9a      	adds	r2, r3, #2
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007500:	e032      	b.n	8007568 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b02      	cmp	r3, #2
 800750e:	d112      	bne.n	8007536 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007514:	881a      	ldrh	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007520:	1c9a      	adds	r2, r3, #2
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007534:	e018      	b.n	8007568 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007536:	f7fc ffdf 	bl	80044f8 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d803      	bhi.n	800754e <HAL_SPI_Transmit+0x160>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d102      	bne.n	8007554 <HAL_SPI_Transmit+0x166>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d109      	bne.n	8007568 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e082      	b.n	800766e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1c7      	bne.n	8007502 <HAL_SPI_Transmit+0x114>
 8007572:	e053      	b.n	800761c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_SPI_Transmit+0x194>
 800757c:	8b7b      	ldrh	r3, [r7, #26]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d147      	bne.n	8007612 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	330c      	adds	r3, #12
 800758c:	7812      	ldrb	r2, [r2, #0]
 800758e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075a8:	e033      	b.n	8007612 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d113      	bne.n	80075e0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075de:	e018      	b.n	8007612 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e0:	f7fc ff8a 	bl	80044f8 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d803      	bhi.n	80075f8 <HAL_SPI_Transmit+0x20a>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	d102      	bne.n	80075fe <HAL_SPI_Transmit+0x210>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e02d      	b.n	800766e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1c6      	bne.n	80075aa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fbc5 	bl	8007db0 <SPI_EndRxTxTransaction>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800766c:	2300      	movs	r3, #0
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b088      	sub	sp, #32
 800767a:	af02      	add	r7, sp, #8
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	d001      	beq.n	8007696 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007692:	2302      	movs	r3, #2
 8007694:	e104      	b.n	80078a0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800769e:	d112      	bne.n	80076c6 <HAL_SPI_Receive+0x50>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10e      	bne.n	80076c6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2204      	movs	r2, #4
 80076ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076b0:	88fa      	ldrh	r2, [r7, #6]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	4613      	mov	r3, r2
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f8f3 	bl	80078a8 <HAL_SPI_TransmitReceive>
 80076c2:	4603      	mov	r3, r0
 80076c4:	e0ec      	b.n	80078a0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076c6:	f7fc ff17 	bl	80044f8 <HAL_GetTick>
 80076ca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_SPI_Receive+0x62>
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0e1      	b.n	80078a0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_SPI_Receive+0x74>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e0da      	b.n	80078a0 <HAL_SPI_Receive+0x22a>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2204      	movs	r2, #4
 80076f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	88fa      	ldrh	r2, [r7, #6]
 800770a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007738:	d10f      	bne.n	800775a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007748:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007758:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007764:	2b40      	cmp	r3, #64	@ 0x40
 8007766:	d007      	beq.n	8007778 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007776:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d170      	bne.n	8007862 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007780:	e035      	b.n	80077ee <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b01      	cmp	r3, #1
 800778e:	d115      	bne.n	80077bc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f103 020c 	add.w	r2, r3, #12
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779c:	7812      	ldrb	r2, [r2, #0]
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077ba:	e018      	b.n	80077ee <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077bc:	f7fc fe9c 	bl	80044f8 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d803      	bhi.n	80077d4 <HAL_SPI_Receive+0x15e>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d2:	d102      	bne.n	80077da <HAL_SPI_Receive+0x164>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e058      	b.n	80078a0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1c4      	bne.n	8007782 <HAL_SPI_Receive+0x10c>
 80077f8:	e038      	b.n	800786c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d113      	bne.n	8007830 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	b292      	uxth	r2, r2
 8007814:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	1c9a      	adds	r2, r3, #2
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800782e:	e018      	b.n	8007862 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007830:	f7fc fe62 	bl	80044f8 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d803      	bhi.n	8007848 <HAL_SPI_Receive+0x1d2>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007846:	d102      	bne.n	800784e <HAL_SPI_Receive+0x1d8>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d109      	bne.n	8007862 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e01e      	b.n	80078a0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1c6      	bne.n	80077fa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fa4b 	bl	8007d0c <SPI_EndRxTransaction>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800789e:	2300      	movs	r3, #0
  }
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	@ 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078b6:	2301      	movs	r3, #1
 80078b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ba:	f7fc fe1d 	bl	80044f8 <HAL_GetTick>
 80078be:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078c6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80078ce:	887b      	ldrh	r3, [r7, #2]
 80078d0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078d2:	7ffb      	ldrb	r3, [r7, #31]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d00c      	beq.n	80078f2 <HAL_SPI_TransmitReceive+0x4a>
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078de:	d106      	bne.n	80078ee <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <HAL_SPI_TransmitReceive+0x46>
 80078e8:	7ffb      	ldrb	r3, [r7, #31]
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d001      	beq.n	80078f2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
 80078f0:	e17f      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <HAL_SPI_TransmitReceive+0x5c>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_SPI_TransmitReceive+0x5c>
 80078fe:	887b      	ldrh	r3, [r7, #2]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e174      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_SPI_TransmitReceive+0x6e>
 8007912:	2302      	movs	r3, #2
 8007914:	e16d      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x34a>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b04      	cmp	r3, #4
 8007928:	d003      	beq.n	8007932 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2205      	movs	r2, #5
 800792e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	887a      	ldrh	r2, [r7, #2]
 8007942:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	887a      	ldrh	r2, [r7, #2]
 8007948:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	887a      	ldrh	r2, [r7, #2]
 8007954:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	887a      	ldrh	r2, [r7, #2]
 800795a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007972:	2b40      	cmp	r3, #64	@ 0x40
 8007974:	d007      	beq.n	8007986 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007984:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800798e:	d17e      	bne.n	8007a8e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_SPI_TransmitReceive+0xf6>
 8007998:	8afb      	ldrh	r3, [r7, #22]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d16c      	bne.n	8007a78 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a2:	881a      	ldrh	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ae:	1c9a      	adds	r2, r3, #2
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c2:	e059      	b.n	8007a78 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d11b      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x162>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d016      	beq.n	8007a0a <HAL_SPI_TransmitReceive+0x162>
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d113      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e6:	881a      	ldrh	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f2:	1c9a      	adds	r2, r3, #2
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d119      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x1a4>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d014      	beq.n	8007a4c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2c:	b292      	uxth	r2, r2
 8007a2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a34:	1c9a      	adds	r2, r3, #2
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a4c:	f7fc fd54 	bl	80044f8 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d80d      	bhi.n	8007a78 <HAL_SPI_TransmitReceive+0x1d0>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d009      	beq.n	8007a78 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e0bc      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1a0      	bne.n	80079c4 <HAL_SPI_TransmitReceive+0x11c>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d19b      	bne.n	80079c4 <HAL_SPI_TransmitReceive+0x11c>
 8007a8c:	e082      	b.n	8007b94 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_SPI_TransmitReceive+0x1f4>
 8007a96:	8afb      	ldrh	r3, [r7, #22]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d171      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	330c      	adds	r3, #12
 8007aa6:	7812      	ldrb	r2, [r2, #0]
 8007aa8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ac2:	e05d      	b.n	8007b80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d11c      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x264>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d017      	beq.n	8007b0c <HAL_SPI_TransmitReceive+0x264>
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d114      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d119      	bne.n	8007b4e <HAL_SPI_TransmitReceive+0x2a6>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d014      	beq.n	8007b4e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b4e:	f7fc fcd3 	bl	80044f8 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d803      	bhi.n	8007b66 <HAL_SPI_TransmitReceive+0x2be>
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d102      	bne.n	8007b6c <HAL_SPI_TransmitReceive+0x2c4>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d109      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e038      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d19c      	bne.n	8007ac4 <HAL_SPI_TransmitReceive+0x21c>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d197      	bne.n	8007ac4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b94:	6a3a      	ldr	r2, [r7, #32]
 8007b96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f909 	bl	8007db0 <SPI_EndRxTxTransaction>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e01d      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	613b      	str	r3, [r7, #16]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	613b      	str	r3, [r7, #16]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	613b      	str	r3, [r7, #16]
 8007bd2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e000      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
  }
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3728      	adds	r7, #40	@ 0x28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c0c:	f7fc fc74 	bl	80044f8 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	4413      	add	r3, r2
 8007c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c1c:	f7fc fc6c 	bl	80044f8 <HAL_GetTick>
 8007c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c22:	4b39      	ldr	r3, [pc, #228]	@ (8007d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	015b      	lsls	r3, r3, #5
 8007c28:	0d1b      	lsrs	r3, r3, #20
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c32:	e054      	b.n	8007cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d050      	beq.n	8007cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c3c:	f7fc fc5c 	bl	80044f8 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d902      	bls.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d13d      	bne.n	8007cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c6a:	d111      	bne.n	8007c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c74:	d004      	beq.n	8007c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c7e:	d107      	bne.n	8007c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c98:	d10f      	bne.n	8007cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e017      	b.n	8007cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	bf0c      	ite	eq
 8007cee:	2301      	moveq	r3, #1
 8007cf0:	2300      	movne	r3, #0
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d19b      	bne.n	8007c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3720      	adds	r7, #32
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000064 	.word	0x20000064

08007d0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d20:	d111      	bne.n	8007d46 <SPI_EndRxTransaction+0x3a>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d2a:	d004      	beq.n	8007d36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d34:	d107      	bne.n	8007d46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d44:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d4e:	d117      	bne.n	8007d80 <SPI_EndRxTransaction+0x74>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d58:	d112      	bne.n	8007d80 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2200      	movs	r2, #0
 8007d62:	2101      	movs	r1, #1
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff ff49 	bl	8007bfc <SPI_WaitFlagStateUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01a      	beq.n	8007da6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e013      	b.n	8007da8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	2180      	movs	r1, #128	@ 0x80
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff ff36 	bl	8007bfc <SPI_WaitFlagStateUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9a:	f043 0220 	orr.w	r2, r3, #32
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e000      	b.n	8007da8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	2102      	movs	r1, #2
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff ff18 	bl	8007bfc <SPI_WaitFlagStateUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd6:	f043 0220 	orr.w	r2, r3, #32
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e013      	b.n	8007e0a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2200      	movs	r2, #0
 8007dea:	2180      	movs	r1, #128	@ 0x80
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff ff05 	bl	8007bfc <SPI_WaitFlagStateUntilTimeout>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dfc:	f043 0220 	orr.w	r2, r3, #32
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e000      	b.n	8007e0a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e042      	b.n	8007eaa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7fc f94d 	bl	80040d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2224      	movs	r2, #36	@ 0x24
 8007e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f9d0 	bl	80081fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695a      	ldr	r2, [r3, #20]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b08a      	sub	sp, #40	@ 0x28
 8007eb6:	af02      	add	r7, sp, #8
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d175      	bne.n	8007fbe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <HAL_UART_Transmit+0x2c>
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e06e      	b.n	8007fc0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2221      	movs	r2, #33	@ 0x21
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ef0:	f7fc fb02 	bl	80044f8 <HAL_GetTick>
 8007ef4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	88fa      	ldrh	r2, [r7, #6]
 8007efa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	88fa      	ldrh	r2, [r7, #6]
 8007f00:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f0a:	d108      	bne.n	8007f1e <HAL_UART_Transmit+0x6c>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	e003      	b.n	8007f26 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f26:	e02e      	b.n	8007f86 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2180      	movs	r1, #128	@ 0x80
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f86d 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e03a      	b.n	8007fc0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	461a      	mov	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f5e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	3302      	adds	r3, #2
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e007      	b.n	8007f78 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	3301      	adds	r3, #1
 8007f76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1cb      	bne.n	8007f28 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2200      	movs	r2, #0
 8007f98:	2140      	movs	r1, #64	@ 0x40
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 f839 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d005      	beq.n	8007fb2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e006      	b.n	8007fc0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e000      	b.n	8007fc0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007fbe:	2302      	movs	r3, #2
  }
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d112      	bne.n	8008008 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_UART_Receive_IT+0x26>
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e00b      	b.n	800800a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ff8:	88fb      	ldrh	r3, [r7, #6]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 f860 	bl	80080c4 <UART_Start_Receive_IT>
 8008004:	4603      	mov	r3, r0
 8008006:	e000      	b.n	800800a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008008:	2302      	movs	r3, #2
  }
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b086      	sub	sp, #24
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008022:	e03b      	b.n	800809c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	d037      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802c:	f7fc fa64 	bl	80044f8 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	6a3a      	ldr	r2, [r7, #32]
 8008038:	429a      	cmp	r2, r3
 800803a:	d302      	bcc.n	8008042 <UART_WaitOnFlagUntilTimeout+0x30>
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e03a      	b.n	80080bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d023      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b80      	cmp	r3, #128	@ 0x80
 8008058:	d020      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0x8a>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b40      	cmp	r3, #64	@ 0x40
 800805e:	d01d      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b08      	cmp	r3, #8
 800806c:	d116      	bne.n	800809c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f856 	bl	8008136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2208      	movs	r2, #8
 800808e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e00f      	b.n	80080bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4013      	ands	r3, r2
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d0b4      	beq.n	8008024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2222      	movs	r2, #34	@ 0x22
 80080ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d007      	beq.n	800810a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008108:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695a      	ldr	r2, [r3, #20]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0201 	orr.w	r2, r2, #1
 8008118:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0220 	orr.w	r2, r2, #32
 8008128:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr

08008136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008136:	b480      	push	{r7}
 8008138:	b095      	sub	sp, #84	@ 0x54
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	330c      	adds	r3, #12
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800815e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3314      	adds	r3, #20
 8008178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	61fb      	str	r3, [r7, #28]
   return(result);
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3314      	adds	r3, #20
 8008190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008194:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e5      	bne.n	8008172 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d119      	bne.n	80081e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	330c      	adds	r3, #12
 80081b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f023 0310 	bic.w	r3, r3, #16
 80081c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	330c      	adds	r3, #12
 80081cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081ce:	61ba      	str	r2, [r7, #24]
 80081d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6979      	ldr	r1, [r7, #20]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	613b      	str	r3, [r7, #16]
   return(result);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e5      	bne.n	80081ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081f0:	bf00      	nop
 80081f2:	3754      	adds	r7, #84	@ 0x54
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr
	...

080081fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008236:	f023 030c 	bic.w	r3, r3, #12
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	430b      	orrs	r3, r1
 8008242:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	430a      	orrs	r2, r1
 8008258:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a2c      	ldr	r2, [pc, #176]	@ (8008310 <UART_SetConfig+0x114>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d103      	bne.n	800826c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008264:	f7fe fe6e 	bl	8006f44 <HAL_RCC_GetPCLK2Freq>
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	e002      	b.n	8008272 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800826c:	f7fe fe56 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 8008270:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	009a      	lsls	r2, r3, #2
 800827c:	441a      	add	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	fbb2 f3f3 	udiv	r3, r2, r3
 8008288:	4a22      	ldr	r2, [pc, #136]	@ (8008314 <UART_SetConfig+0x118>)
 800828a:	fba2 2303 	umull	r2, r3, r2, r3
 800828e:	095b      	lsrs	r3, r3, #5
 8008290:	0119      	lsls	r1, r3, #4
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009a      	lsls	r2, r3, #2
 800829c:	441a      	add	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80082a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008314 <UART_SetConfig+0x118>)
 80082aa:	fba3 0302 	umull	r0, r3, r3, r2
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	2064      	movs	r0, #100	@ 0x64
 80082b2:	fb00 f303 	mul.w	r3, r0, r3
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	3332      	adds	r3, #50	@ 0x32
 80082bc:	4a15      	ldr	r2, [pc, #84]	@ (8008314 <UART_SetConfig+0x118>)
 80082be:	fba2 2303 	umull	r2, r3, r2, r3
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082c8:	4419      	add	r1, r3
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009a      	lsls	r2, r3, #2
 80082d4:	441a      	add	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80082e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <UART_SetConfig+0x118>)
 80082e2:	fba3 0302 	umull	r0, r3, r3, r2
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	2064      	movs	r0, #100	@ 0x64
 80082ea:	fb00 f303 	mul.w	r3, r0, r3
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	3332      	adds	r3, #50	@ 0x32
 80082f4:	4a07      	ldr	r2, [pc, #28]	@ (8008314 <UART_SetConfig+0x118>)
 80082f6:	fba2 2303 	umull	r2, r3, r2, r3
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	f003 020f 	and.w	r2, r3, #15
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	440a      	add	r2, r1
 8008306:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008308:	bf00      	nop
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	40013800 	.word	0x40013800
 8008314:	51eb851f 	.word	0x51eb851f

08008318 <atoi>:
 8008318:	220a      	movs	r2, #10
 800831a:	2100      	movs	r1, #0
 800831c:	f000 b87c 	b.w	8008418 <strtol>

08008320 <_strtol_l.isra.0>:
 8008320:	2b24      	cmp	r3, #36	@ 0x24
 8008322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008326:	4686      	mov	lr, r0
 8008328:	4690      	mov	r8, r2
 800832a:	d801      	bhi.n	8008330 <_strtol_l.isra.0+0x10>
 800832c:	2b01      	cmp	r3, #1
 800832e:	d106      	bne.n	800833e <_strtol_l.isra.0+0x1e>
 8008330:	f000 f930 	bl	8008594 <__errno>
 8008334:	2316      	movs	r3, #22
 8008336:	6003      	str	r3, [r0, #0]
 8008338:	2000      	movs	r0, #0
 800833a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833e:	460d      	mov	r5, r1
 8008340:	4833      	ldr	r0, [pc, #204]	@ (8008410 <_strtol_l.isra.0+0xf0>)
 8008342:	462a      	mov	r2, r5
 8008344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008348:	5d06      	ldrb	r6, [r0, r4]
 800834a:	f016 0608 	ands.w	r6, r6, #8
 800834e:	d1f8      	bne.n	8008342 <_strtol_l.isra.0+0x22>
 8008350:	2c2d      	cmp	r4, #45	@ 0x2d
 8008352:	d110      	bne.n	8008376 <_strtol_l.isra.0+0x56>
 8008354:	2601      	movs	r6, #1
 8008356:	782c      	ldrb	r4, [r5, #0]
 8008358:	1c95      	adds	r5, r2, #2
 800835a:	f033 0210 	bics.w	r2, r3, #16
 800835e:	d115      	bne.n	800838c <_strtol_l.isra.0+0x6c>
 8008360:	2c30      	cmp	r4, #48	@ 0x30
 8008362:	d10d      	bne.n	8008380 <_strtol_l.isra.0+0x60>
 8008364:	782a      	ldrb	r2, [r5, #0]
 8008366:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800836a:	2a58      	cmp	r2, #88	@ 0x58
 800836c:	d108      	bne.n	8008380 <_strtol_l.isra.0+0x60>
 800836e:	786c      	ldrb	r4, [r5, #1]
 8008370:	3502      	adds	r5, #2
 8008372:	2310      	movs	r3, #16
 8008374:	e00a      	b.n	800838c <_strtol_l.isra.0+0x6c>
 8008376:	2c2b      	cmp	r4, #43	@ 0x2b
 8008378:	bf04      	itt	eq
 800837a:	782c      	ldrbeq	r4, [r5, #0]
 800837c:	1c95      	addeq	r5, r2, #2
 800837e:	e7ec      	b.n	800835a <_strtol_l.isra.0+0x3a>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1f6      	bne.n	8008372 <_strtol_l.isra.0+0x52>
 8008384:	2c30      	cmp	r4, #48	@ 0x30
 8008386:	bf14      	ite	ne
 8008388:	230a      	movne	r3, #10
 800838a:	2308      	moveq	r3, #8
 800838c:	2200      	movs	r2, #0
 800838e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008392:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008396:	fbbc f9f3 	udiv	r9, ip, r3
 800839a:	4610      	mov	r0, r2
 800839c:	fb03 ca19 	mls	sl, r3, r9, ip
 80083a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083a4:	2f09      	cmp	r7, #9
 80083a6:	d80f      	bhi.n	80083c8 <_strtol_l.isra.0+0xa8>
 80083a8:	463c      	mov	r4, r7
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	dd1b      	ble.n	80083e6 <_strtol_l.isra.0+0xc6>
 80083ae:	1c57      	adds	r7, r2, #1
 80083b0:	d007      	beq.n	80083c2 <_strtol_l.isra.0+0xa2>
 80083b2:	4581      	cmp	r9, r0
 80083b4:	d314      	bcc.n	80083e0 <_strtol_l.isra.0+0xc0>
 80083b6:	d101      	bne.n	80083bc <_strtol_l.isra.0+0x9c>
 80083b8:	45a2      	cmp	sl, r4
 80083ba:	db11      	blt.n	80083e0 <_strtol_l.isra.0+0xc0>
 80083bc:	2201      	movs	r2, #1
 80083be:	fb00 4003 	mla	r0, r0, r3, r4
 80083c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083c6:	e7eb      	b.n	80083a0 <_strtol_l.isra.0+0x80>
 80083c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80083cc:	2f19      	cmp	r7, #25
 80083ce:	d801      	bhi.n	80083d4 <_strtol_l.isra.0+0xb4>
 80083d0:	3c37      	subs	r4, #55	@ 0x37
 80083d2:	e7ea      	b.n	80083aa <_strtol_l.isra.0+0x8a>
 80083d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80083d8:	2f19      	cmp	r7, #25
 80083da:	d804      	bhi.n	80083e6 <_strtol_l.isra.0+0xc6>
 80083dc:	3c57      	subs	r4, #87	@ 0x57
 80083de:	e7e4      	b.n	80083aa <_strtol_l.isra.0+0x8a>
 80083e0:	f04f 32ff 	mov.w	r2, #4294967295
 80083e4:	e7ed      	b.n	80083c2 <_strtol_l.isra.0+0xa2>
 80083e6:	1c53      	adds	r3, r2, #1
 80083e8:	d108      	bne.n	80083fc <_strtol_l.isra.0+0xdc>
 80083ea:	2322      	movs	r3, #34	@ 0x22
 80083ec:	4660      	mov	r0, ip
 80083ee:	f8ce 3000 	str.w	r3, [lr]
 80083f2:	f1b8 0f00 	cmp.w	r8, #0
 80083f6:	d0a0      	beq.n	800833a <_strtol_l.isra.0+0x1a>
 80083f8:	1e69      	subs	r1, r5, #1
 80083fa:	e006      	b.n	800840a <_strtol_l.isra.0+0xea>
 80083fc:	b106      	cbz	r6, 8008400 <_strtol_l.isra.0+0xe0>
 80083fe:	4240      	negs	r0, r0
 8008400:	f1b8 0f00 	cmp.w	r8, #0
 8008404:	d099      	beq.n	800833a <_strtol_l.isra.0+0x1a>
 8008406:	2a00      	cmp	r2, #0
 8008408:	d1f6      	bne.n	80083f8 <_strtol_l.isra.0+0xd8>
 800840a:	f8c8 1000 	str.w	r1, [r8]
 800840e:	e794      	b.n	800833a <_strtol_l.isra.0+0x1a>
 8008410:	08009fe3 	.word	0x08009fe3

08008414 <_strtol_r>:
 8008414:	f7ff bf84 	b.w	8008320 <_strtol_l.isra.0>

08008418 <strtol>:
 8008418:	4613      	mov	r3, r2
 800841a:	460a      	mov	r2, r1
 800841c:	4601      	mov	r1, r0
 800841e:	4802      	ldr	r0, [pc, #8]	@ (8008428 <strtol+0x10>)
 8008420:	6800      	ldr	r0, [r0, #0]
 8008422:	f7ff bf7d 	b.w	8008320 <_strtol_l.isra.0>
 8008426:	bf00      	nop
 8008428:	20000070 	.word	0x20000070

0800842c <sniprintf>:
 800842c:	b40c      	push	{r2, r3}
 800842e:	b530      	push	{r4, r5, lr}
 8008430:	4b18      	ldr	r3, [pc, #96]	@ (8008494 <sniprintf+0x68>)
 8008432:	1e0c      	subs	r4, r1, #0
 8008434:	681d      	ldr	r5, [r3, #0]
 8008436:	b09d      	sub	sp, #116	@ 0x74
 8008438:	da08      	bge.n	800844c <sniprintf+0x20>
 800843a:	238b      	movs	r3, #139	@ 0x8b
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	b01d      	add	sp, #116	@ 0x74
 8008444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008448:	b002      	add	sp, #8
 800844a:	4770      	bx	lr
 800844c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008450:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008454:	f04f 0300 	mov.w	r3, #0
 8008458:	931b      	str	r3, [sp, #108]	@ 0x6c
 800845a:	bf0c      	ite	eq
 800845c:	4623      	moveq	r3, r4
 800845e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	9307      	str	r3, [sp, #28]
 8008466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800846a:	9002      	str	r0, [sp, #8]
 800846c:	9006      	str	r0, [sp, #24]
 800846e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008472:	4628      	mov	r0, r5
 8008474:	ab21      	add	r3, sp, #132	@ 0x84
 8008476:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008478:	a902      	add	r1, sp, #8
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	f000 fa08 	bl	8008890 <_svfiprintf_r>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	bfbc      	itt	lt
 8008484:	238b      	movlt	r3, #139	@ 0x8b
 8008486:	602b      	strlt	r3, [r5, #0]
 8008488:	2c00      	cmp	r4, #0
 800848a:	d0da      	beq.n	8008442 <sniprintf+0x16>
 800848c:	2200      	movs	r2, #0
 800848e:	9b02      	ldr	r3, [sp, #8]
 8008490:	701a      	strb	r2, [r3, #0]
 8008492:	e7d6      	b.n	8008442 <sniprintf+0x16>
 8008494:	20000070 	.word	0x20000070

08008498 <siprintf>:
 8008498:	b40e      	push	{r1, r2, r3}
 800849a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800849e:	b510      	push	{r4, lr}
 80084a0:	2400      	movs	r4, #0
 80084a2:	b09d      	sub	sp, #116	@ 0x74
 80084a4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80084a6:	9002      	str	r0, [sp, #8]
 80084a8:	9006      	str	r0, [sp, #24]
 80084aa:	9107      	str	r1, [sp, #28]
 80084ac:	9104      	str	r1, [sp, #16]
 80084ae:	4809      	ldr	r0, [pc, #36]	@ (80084d4 <siprintf+0x3c>)
 80084b0:	4909      	ldr	r1, [pc, #36]	@ (80084d8 <siprintf+0x40>)
 80084b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b6:	9105      	str	r1, [sp, #20]
 80084b8:	6800      	ldr	r0, [r0, #0]
 80084ba:	a902      	add	r1, sp, #8
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80084c0:	f000 f9e6 	bl	8008890 <_svfiprintf_r>
 80084c4:	9b02      	ldr	r3, [sp, #8]
 80084c6:	701c      	strb	r4, [r3, #0]
 80084c8:	b01d      	add	sp, #116	@ 0x74
 80084ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ce:	b003      	add	sp, #12
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20000070 	.word	0x20000070
 80084d8:	ffff0208 	.word	0xffff0208

080084dc <siscanf>:
 80084dc:	b40e      	push	{r1, r2, r3}
 80084de:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80084e2:	b570      	push	{r4, r5, r6, lr}
 80084e4:	2500      	movs	r5, #0
 80084e6:	b09d      	sub	sp, #116	@ 0x74
 80084e8:	ac21      	add	r4, sp, #132	@ 0x84
 80084ea:	f854 6b04 	ldr.w	r6, [r4], #4
 80084ee:	f8ad 2014 	strh.w	r2, [sp, #20]
 80084f2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80084f4:	9002      	str	r0, [sp, #8]
 80084f6:	9006      	str	r0, [sp, #24]
 80084f8:	f7f7 fe32 	bl	8000160 <strlen>
 80084fc:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <siscanf+0x50>)
 80084fe:	9003      	str	r0, [sp, #12]
 8008500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008502:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008506:	9007      	str	r0, [sp, #28]
 8008508:	4809      	ldr	r0, [pc, #36]	@ (8008530 <siscanf+0x54>)
 800850a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800850e:	4632      	mov	r2, r6
 8008510:	4623      	mov	r3, r4
 8008512:	a902      	add	r1, sp, #8
 8008514:	6800      	ldr	r0, [r0, #0]
 8008516:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008518:	9514      	str	r5, [sp, #80]	@ 0x50
 800851a:	9401      	str	r4, [sp, #4]
 800851c:	f000 fb0e 	bl	8008b3c <__ssvfiscanf_r>
 8008520:	b01d      	add	sp, #116	@ 0x74
 8008522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008526:	b003      	add	sp, #12
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	08008535 	.word	0x08008535
 8008530:	20000070 	.word	0x20000070

08008534 <__seofread>:
 8008534:	2000      	movs	r0, #0
 8008536:	4770      	bx	lr

08008538 <memset>:
 8008538:	4603      	mov	r3, r0
 800853a:	4402      	add	r2, r0
 800853c:	4293      	cmp	r3, r2
 800853e:	d100      	bne.n	8008542 <memset+0xa>
 8008540:	4770      	bx	lr
 8008542:	f803 1b01 	strb.w	r1, [r3], #1
 8008546:	e7f9      	b.n	800853c <memset+0x4>

08008548 <strncmp>:
 8008548:	b510      	push	{r4, lr}
 800854a:	b16a      	cbz	r2, 8008568 <strncmp+0x20>
 800854c:	3901      	subs	r1, #1
 800854e:	1884      	adds	r4, r0, r2
 8008550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008554:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008558:	429a      	cmp	r2, r3
 800855a:	d103      	bne.n	8008564 <strncmp+0x1c>
 800855c:	42a0      	cmp	r0, r4
 800855e:	d001      	beq.n	8008564 <strncmp+0x1c>
 8008560:	2a00      	cmp	r2, #0
 8008562:	d1f5      	bne.n	8008550 <strncmp+0x8>
 8008564:	1ad0      	subs	r0, r2, r3
 8008566:	bd10      	pop	{r4, pc}
 8008568:	4610      	mov	r0, r2
 800856a:	e7fc      	b.n	8008566 <strncmp+0x1e>

0800856c <strncpy>:
 800856c:	4603      	mov	r3, r0
 800856e:	b510      	push	{r4, lr}
 8008570:	3901      	subs	r1, #1
 8008572:	b132      	cbz	r2, 8008582 <strncpy+0x16>
 8008574:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008578:	3a01      	subs	r2, #1
 800857a:	f803 4b01 	strb.w	r4, [r3], #1
 800857e:	2c00      	cmp	r4, #0
 8008580:	d1f7      	bne.n	8008572 <strncpy+0x6>
 8008582:	2100      	movs	r1, #0
 8008584:	441a      	add	r2, r3
 8008586:	4293      	cmp	r3, r2
 8008588:	d100      	bne.n	800858c <strncpy+0x20>
 800858a:	bd10      	pop	{r4, pc}
 800858c:	f803 1b01 	strb.w	r1, [r3], #1
 8008590:	e7f9      	b.n	8008586 <strncpy+0x1a>
	...

08008594 <__errno>:
 8008594:	4b01      	ldr	r3, [pc, #4]	@ (800859c <__errno+0x8>)
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	20000070 	.word	0x20000070

080085a0 <__libc_init_array>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	2600      	movs	r6, #0
 80085a4:	4d0c      	ldr	r5, [pc, #48]	@ (80085d8 <__libc_init_array+0x38>)
 80085a6:	4c0d      	ldr	r4, [pc, #52]	@ (80085dc <__libc_init_array+0x3c>)
 80085a8:	1b64      	subs	r4, r4, r5
 80085aa:	10a4      	asrs	r4, r4, #2
 80085ac:	42a6      	cmp	r6, r4
 80085ae:	d109      	bne.n	80085c4 <__libc_init_array+0x24>
 80085b0:	f001 f872 	bl	8009698 <_init>
 80085b4:	2600      	movs	r6, #0
 80085b6:	4d0a      	ldr	r5, [pc, #40]	@ (80085e0 <__libc_init_array+0x40>)
 80085b8:	4c0a      	ldr	r4, [pc, #40]	@ (80085e4 <__libc_init_array+0x44>)
 80085ba:	1b64      	subs	r4, r4, r5
 80085bc:	10a4      	asrs	r4, r4, #2
 80085be:	42a6      	cmp	r6, r4
 80085c0:	d105      	bne.n	80085ce <__libc_init_array+0x2e>
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c8:	4798      	blx	r3
 80085ca:	3601      	adds	r6, #1
 80085cc:	e7ee      	b.n	80085ac <__libc_init_array+0xc>
 80085ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d2:	4798      	blx	r3
 80085d4:	3601      	adds	r6, #1
 80085d6:	e7f2      	b.n	80085be <__libc_init_array+0x1e>
 80085d8:	0800a13c 	.word	0x0800a13c
 80085dc:	0800a13c 	.word	0x0800a13c
 80085e0:	0800a13c 	.word	0x0800a13c
 80085e4:	0800a140 	.word	0x0800a140

080085e8 <__retarget_lock_acquire_recursive>:
 80085e8:	4770      	bx	lr

080085ea <__retarget_lock_release_recursive>:
 80085ea:	4770      	bx	lr

080085ec <_free_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4605      	mov	r5, r0
 80085f0:	2900      	cmp	r1, #0
 80085f2:	d040      	beq.n	8008676 <_free_r+0x8a>
 80085f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f8:	1f0c      	subs	r4, r1, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfb8      	it	lt
 80085fe:	18e4      	addlt	r4, r4, r3
 8008600:	f000 f8de 	bl	80087c0 <__malloc_lock>
 8008604:	4a1c      	ldr	r2, [pc, #112]	@ (8008678 <_free_r+0x8c>)
 8008606:	6813      	ldr	r3, [r2, #0]
 8008608:	b933      	cbnz	r3, 8008618 <_free_r+0x2c>
 800860a:	6063      	str	r3, [r4, #4]
 800860c:	6014      	str	r4, [r2, #0]
 800860e:	4628      	mov	r0, r5
 8008610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008614:	f000 b8da 	b.w	80087cc <__malloc_unlock>
 8008618:	42a3      	cmp	r3, r4
 800861a:	d908      	bls.n	800862e <_free_r+0x42>
 800861c:	6820      	ldr	r0, [r4, #0]
 800861e:	1821      	adds	r1, r4, r0
 8008620:	428b      	cmp	r3, r1
 8008622:	bf01      	itttt	eq
 8008624:	6819      	ldreq	r1, [r3, #0]
 8008626:	685b      	ldreq	r3, [r3, #4]
 8008628:	1809      	addeq	r1, r1, r0
 800862a:	6021      	streq	r1, [r4, #0]
 800862c:	e7ed      	b.n	800860a <_free_r+0x1e>
 800862e:	461a      	mov	r2, r3
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	b10b      	cbz	r3, 8008638 <_free_r+0x4c>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d9fa      	bls.n	800862e <_free_r+0x42>
 8008638:	6811      	ldr	r1, [r2, #0]
 800863a:	1850      	adds	r0, r2, r1
 800863c:	42a0      	cmp	r0, r4
 800863e:	d10b      	bne.n	8008658 <_free_r+0x6c>
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	4401      	add	r1, r0
 8008644:	1850      	adds	r0, r2, r1
 8008646:	4283      	cmp	r3, r0
 8008648:	6011      	str	r1, [r2, #0]
 800864a:	d1e0      	bne.n	800860e <_free_r+0x22>
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	4408      	add	r0, r1
 8008652:	6010      	str	r0, [r2, #0]
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	e7da      	b.n	800860e <_free_r+0x22>
 8008658:	d902      	bls.n	8008660 <_free_r+0x74>
 800865a:	230c      	movs	r3, #12
 800865c:	602b      	str	r3, [r5, #0]
 800865e:	e7d6      	b.n	800860e <_free_r+0x22>
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	1821      	adds	r1, r4, r0
 8008664:	428b      	cmp	r3, r1
 8008666:	bf01      	itttt	eq
 8008668:	6819      	ldreq	r1, [r3, #0]
 800866a:	685b      	ldreq	r3, [r3, #4]
 800866c:	1809      	addeq	r1, r1, r0
 800866e:	6021      	streq	r1, [r4, #0]
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	6054      	str	r4, [r2, #4]
 8008674:	e7cb      	b.n	800860e <_free_r+0x22>
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	20000534 	.word	0x20000534

0800867c <sbrk_aligned>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	4e0f      	ldr	r6, [pc, #60]	@ (80086bc <sbrk_aligned+0x40>)
 8008680:	460c      	mov	r4, r1
 8008682:	6831      	ldr	r1, [r6, #0]
 8008684:	4605      	mov	r5, r0
 8008686:	b911      	cbnz	r1, 800868e <sbrk_aligned+0x12>
 8008688:	f000 ff34 	bl	80094f4 <_sbrk_r>
 800868c:	6030      	str	r0, [r6, #0]
 800868e:	4621      	mov	r1, r4
 8008690:	4628      	mov	r0, r5
 8008692:	f000 ff2f 	bl	80094f4 <_sbrk_r>
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	d103      	bne.n	80086a2 <sbrk_aligned+0x26>
 800869a:	f04f 34ff 	mov.w	r4, #4294967295
 800869e:	4620      	mov	r0, r4
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	1cc4      	adds	r4, r0, #3
 80086a4:	f024 0403 	bic.w	r4, r4, #3
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d0f8      	beq.n	800869e <sbrk_aligned+0x22>
 80086ac:	1a21      	subs	r1, r4, r0
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 ff20 	bl	80094f4 <_sbrk_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d1f2      	bne.n	800869e <sbrk_aligned+0x22>
 80086b8:	e7ef      	b.n	800869a <sbrk_aligned+0x1e>
 80086ba:	bf00      	nop
 80086bc:	20000530 	.word	0x20000530

080086c0 <_malloc_r>:
 80086c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c4:	1ccd      	adds	r5, r1, #3
 80086c6:	f025 0503 	bic.w	r5, r5, #3
 80086ca:	3508      	adds	r5, #8
 80086cc:	2d0c      	cmp	r5, #12
 80086ce:	bf38      	it	cc
 80086d0:	250c      	movcc	r5, #12
 80086d2:	2d00      	cmp	r5, #0
 80086d4:	4606      	mov	r6, r0
 80086d6:	db01      	blt.n	80086dc <_malloc_r+0x1c>
 80086d8:	42a9      	cmp	r1, r5
 80086da:	d904      	bls.n	80086e6 <_malloc_r+0x26>
 80086dc:	230c      	movs	r3, #12
 80086de:	6033      	str	r3, [r6, #0]
 80086e0:	2000      	movs	r0, #0
 80086e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087bc <_malloc_r+0xfc>
 80086ea:	f000 f869 	bl	80087c0 <__malloc_lock>
 80086ee:	f8d8 3000 	ldr.w	r3, [r8]
 80086f2:	461c      	mov	r4, r3
 80086f4:	bb44      	cbnz	r4, 8008748 <_malloc_r+0x88>
 80086f6:	4629      	mov	r1, r5
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7ff ffbf 	bl	800867c <sbrk_aligned>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	4604      	mov	r4, r0
 8008702:	d158      	bne.n	80087b6 <_malloc_r+0xf6>
 8008704:	f8d8 4000 	ldr.w	r4, [r8]
 8008708:	4627      	mov	r7, r4
 800870a:	2f00      	cmp	r7, #0
 800870c:	d143      	bne.n	8008796 <_malloc_r+0xd6>
 800870e:	2c00      	cmp	r4, #0
 8008710:	d04b      	beq.n	80087aa <_malloc_r+0xea>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	4639      	mov	r1, r7
 8008716:	4630      	mov	r0, r6
 8008718:	eb04 0903 	add.w	r9, r4, r3
 800871c:	f000 feea 	bl	80094f4 <_sbrk_r>
 8008720:	4581      	cmp	r9, r0
 8008722:	d142      	bne.n	80087aa <_malloc_r+0xea>
 8008724:	6821      	ldr	r1, [r4, #0]
 8008726:	4630      	mov	r0, r6
 8008728:	1a6d      	subs	r5, r5, r1
 800872a:	4629      	mov	r1, r5
 800872c:	f7ff ffa6 	bl	800867c <sbrk_aligned>
 8008730:	3001      	adds	r0, #1
 8008732:	d03a      	beq.n	80087aa <_malloc_r+0xea>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	442b      	add	r3, r5
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	f8d8 3000 	ldr.w	r3, [r8]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	bb62      	cbnz	r2, 800879c <_malloc_r+0xdc>
 8008742:	f8c8 7000 	str.w	r7, [r8]
 8008746:	e00f      	b.n	8008768 <_malloc_r+0xa8>
 8008748:	6822      	ldr	r2, [r4, #0]
 800874a:	1b52      	subs	r2, r2, r5
 800874c:	d420      	bmi.n	8008790 <_malloc_r+0xd0>
 800874e:	2a0b      	cmp	r2, #11
 8008750:	d917      	bls.n	8008782 <_malloc_r+0xc2>
 8008752:	1961      	adds	r1, r4, r5
 8008754:	42a3      	cmp	r3, r4
 8008756:	6025      	str	r5, [r4, #0]
 8008758:	bf18      	it	ne
 800875a:	6059      	strne	r1, [r3, #4]
 800875c:	6863      	ldr	r3, [r4, #4]
 800875e:	bf08      	it	eq
 8008760:	f8c8 1000 	streq.w	r1, [r8]
 8008764:	5162      	str	r2, [r4, r5]
 8008766:	604b      	str	r3, [r1, #4]
 8008768:	4630      	mov	r0, r6
 800876a:	f000 f82f 	bl	80087cc <__malloc_unlock>
 800876e:	f104 000b 	add.w	r0, r4, #11
 8008772:	1d23      	adds	r3, r4, #4
 8008774:	f020 0007 	bic.w	r0, r0, #7
 8008778:	1ac2      	subs	r2, r0, r3
 800877a:	bf1c      	itt	ne
 800877c:	1a1b      	subne	r3, r3, r0
 800877e:	50a3      	strne	r3, [r4, r2]
 8008780:	e7af      	b.n	80086e2 <_malloc_r+0x22>
 8008782:	6862      	ldr	r2, [r4, #4]
 8008784:	42a3      	cmp	r3, r4
 8008786:	bf0c      	ite	eq
 8008788:	f8c8 2000 	streq.w	r2, [r8]
 800878c:	605a      	strne	r2, [r3, #4]
 800878e:	e7eb      	b.n	8008768 <_malloc_r+0xa8>
 8008790:	4623      	mov	r3, r4
 8008792:	6864      	ldr	r4, [r4, #4]
 8008794:	e7ae      	b.n	80086f4 <_malloc_r+0x34>
 8008796:	463c      	mov	r4, r7
 8008798:	687f      	ldr	r7, [r7, #4]
 800879a:	e7b6      	b.n	800870a <_malloc_r+0x4a>
 800879c:	461a      	mov	r2, r3
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	d1fb      	bne.n	800879c <_malloc_r+0xdc>
 80087a4:	2300      	movs	r3, #0
 80087a6:	6053      	str	r3, [r2, #4]
 80087a8:	e7de      	b.n	8008768 <_malloc_r+0xa8>
 80087aa:	230c      	movs	r3, #12
 80087ac:	4630      	mov	r0, r6
 80087ae:	6033      	str	r3, [r6, #0]
 80087b0:	f000 f80c 	bl	80087cc <__malloc_unlock>
 80087b4:	e794      	b.n	80086e0 <_malloc_r+0x20>
 80087b6:	6005      	str	r5, [r0, #0]
 80087b8:	e7d6      	b.n	8008768 <_malloc_r+0xa8>
 80087ba:	bf00      	nop
 80087bc:	20000534 	.word	0x20000534

080087c0 <__malloc_lock>:
 80087c0:	4801      	ldr	r0, [pc, #4]	@ (80087c8 <__malloc_lock+0x8>)
 80087c2:	f7ff bf11 	b.w	80085e8 <__retarget_lock_acquire_recursive>
 80087c6:	bf00      	nop
 80087c8:	2000052c 	.word	0x2000052c

080087cc <__malloc_unlock>:
 80087cc:	4801      	ldr	r0, [pc, #4]	@ (80087d4 <__malloc_unlock+0x8>)
 80087ce:	f7ff bf0c 	b.w	80085ea <__retarget_lock_release_recursive>
 80087d2:	bf00      	nop
 80087d4:	2000052c 	.word	0x2000052c

080087d8 <__ssputs_r>:
 80087d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	461f      	mov	r7, r3
 80087de:	688e      	ldr	r6, [r1, #8]
 80087e0:	4682      	mov	sl, r0
 80087e2:	42be      	cmp	r6, r7
 80087e4:	460c      	mov	r4, r1
 80087e6:	4690      	mov	r8, r2
 80087e8:	680b      	ldr	r3, [r1, #0]
 80087ea:	d82d      	bhi.n	8008848 <__ssputs_r+0x70>
 80087ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087f4:	d026      	beq.n	8008844 <__ssputs_r+0x6c>
 80087f6:	6965      	ldr	r5, [r4, #20]
 80087f8:	6909      	ldr	r1, [r1, #16]
 80087fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087fe:	eba3 0901 	sub.w	r9, r3, r1
 8008802:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008806:	1c7b      	adds	r3, r7, #1
 8008808:	444b      	add	r3, r9
 800880a:	106d      	asrs	r5, r5, #1
 800880c:	429d      	cmp	r5, r3
 800880e:	bf38      	it	cc
 8008810:	461d      	movcc	r5, r3
 8008812:	0553      	lsls	r3, r2, #21
 8008814:	d527      	bpl.n	8008866 <__ssputs_r+0x8e>
 8008816:	4629      	mov	r1, r5
 8008818:	f7ff ff52 	bl	80086c0 <_malloc_r>
 800881c:	4606      	mov	r6, r0
 800881e:	b360      	cbz	r0, 800887a <__ssputs_r+0xa2>
 8008820:	464a      	mov	r2, r9
 8008822:	6921      	ldr	r1, [r4, #16]
 8008824:	f000 fe84 	bl	8009530 <memcpy>
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800882e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008832:	81a3      	strh	r3, [r4, #12]
 8008834:	6126      	str	r6, [r4, #16]
 8008836:	444e      	add	r6, r9
 8008838:	6026      	str	r6, [r4, #0]
 800883a:	463e      	mov	r6, r7
 800883c:	6165      	str	r5, [r4, #20]
 800883e:	eba5 0509 	sub.w	r5, r5, r9
 8008842:	60a5      	str	r5, [r4, #8]
 8008844:	42be      	cmp	r6, r7
 8008846:	d900      	bls.n	800884a <__ssputs_r+0x72>
 8008848:	463e      	mov	r6, r7
 800884a:	4632      	mov	r2, r6
 800884c:	4641      	mov	r1, r8
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	f000 fe35 	bl	80094be <memmove>
 8008854:	2000      	movs	r0, #0
 8008856:	68a3      	ldr	r3, [r4, #8]
 8008858:	1b9b      	subs	r3, r3, r6
 800885a:	60a3      	str	r3, [r4, #8]
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	4433      	add	r3, r6
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008866:	462a      	mov	r2, r5
 8008868:	f000 fe70 	bl	800954c <_realloc_r>
 800886c:	4606      	mov	r6, r0
 800886e:	2800      	cmp	r0, #0
 8008870:	d1e0      	bne.n	8008834 <__ssputs_r+0x5c>
 8008872:	4650      	mov	r0, sl
 8008874:	6921      	ldr	r1, [r4, #16]
 8008876:	f7ff feb9 	bl	80085ec <_free_r>
 800887a:	230c      	movs	r3, #12
 800887c:	f8ca 3000 	str.w	r3, [sl]
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	f04f 30ff 	mov.w	r0, #4294967295
 8008886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	e7e9      	b.n	8008862 <__ssputs_r+0x8a>
	...

08008890 <_svfiprintf_r>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	4698      	mov	r8, r3
 8008896:	898b      	ldrh	r3, [r1, #12]
 8008898:	4607      	mov	r7, r0
 800889a:	061b      	lsls	r3, r3, #24
 800889c:	460d      	mov	r5, r1
 800889e:	4614      	mov	r4, r2
 80088a0:	b09d      	sub	sp, #116	@ 0x74
 80088a2:	d510      	bpl.n	80088c6 <_svfiprintf_r+0x36>
 80088a4:	690b      	ldr	r3, [r1, #16]
 80088a6:	b973      	cbnz	r3, 80088c6 <_svfiprintf_r+0x36>
 80088a8:	2140      	movs	r1, #64	@ 0x40
 80088aa:	f7ff ff09 	bl	80086c0 <_malloc_r>
 80088ae:	6028      	str	r0, [r5, #0]
 80088b0:	6128      	str	r0, [r5, #16]
 80088b2:	b930      	cbnz	r0, 80088c2 <_svfiprintf_r+0x32>
 80088b4:	230c      	movs	r3, #12
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	b01d      	add	sp, #116	@ 0x74
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	2340      	movs	r3, #64	@ 0x40
 80088c4:	616b      	str	r3, [r5, #20]
 80088c6:	2300      	movs	r3, #0
 80088c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ca:	2320      	movs	r3, #32
 80088cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088d0:	2330      	movs	r3, #48	@ 0x30
 80088d2:	f04f 0901 	mov.w	r9, #1
 80088d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008a74 <_svfiprintf_r+0x1e4>
 80088de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088e2:	4623      	mov	r3, r4
 80088e4:	469a      	mov	sl, r3
 80088e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ea:	b10a      	cbz	r2, 80088f0 <_svfiprintf_r+0x60>
 80088ec:	2a25      	cmp	r2, #37	@ 0x25
 80088ee:	d1f9      	bne.n	80088e4 <_svfiprintf_r+0x54>
 80088f0:	ebba 0b04 	subs.w	fp, sl, r4
 80088f4:	d00b      	beq.n	800890e <_svfiprintf_r+0x7e>
 80088f6:	465b      	mov	r3, fp
 80088f8:	4622      	mov	r2, r4
 80088fa:	4629      	mov	r1, r5
 80088fc:	4638      	mov	r0, r7
 80088fe:	f7ff ff6b 	bl	80087d8 <__ssputs_r>
 8008902:	3001      	adds	r0, #1
 8008904:	f000 80a7 	beq.w	8008a56 <_svfiprintf_r+0x1c6>
 8008908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800890a:	445a      	add	r2, fp
 800890c:	9209      	str	r2, [sp, #36]	@ 0x24
 800890e:	f89a 3000 	ldrb.w	r3, [sl]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 809f 	beq.w	8008a56 <_svfiprintf_r+0x1c6>
 8008918:	2300      	movs	r3, #0
 800891a:	f04f 32ff 	mov.w	r2, #4294967295
 800891e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008922:	f10a 0a01 	add.w	sl, sl, #1
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	9307      	str	r3, [sp, #28]
 800892a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800892e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008930:	4654      	mov	r4, sl
 8008932:	2205      	movs	r2, #5
 8008934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008938:	484e      	ldr	r0, [pc, #312]	@ (8008a74 <_svfiprintf_r+0x1e4>)
 800893a:	f000 fdeb 	bl	8009514 <memchr>
 800893e:	9a04      	ldr	r2, [sp, #16]
 8008940:	b9d8      	cbnz	r0, 800897a <_svfiprintf_r+0xea>
 8008942:	06d0      	lsls	r0, r2, #27
 8008944:	bf44      	itt	mi
 8008946:	2320      	movmi	r3, #32
 8008948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800894c:	0711      	lsls	r1, r2, #28
 800894e:	bf44      	itt	mi
 8008950:	232b      	movmi	r3, #43	@ 0x2b
 8008952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008956:	f89a 3000 	ldrb.w	r3, [sl]
 800895a:	2b2a      	cmp	r3, #42	@ 0x2a
 800895c:	d015      	beq.n	800898a <_svfiprintf_r+0xfa>
 800895e:	4654      	mov	r4, sl
 8008960:	2000      	movs	r0, #0
 8008962:	f04f 0c0a 	mov.w	ip, #10
 8008966:	9a07      	ldr	r2, [sp, #28]
 8008968:	4621      	mov	r1, r4
 800896a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800896e:	3b30      	subs	r3, #48	@ 0x30
 8008970:	2b09      	cmp	r3, #9
 8008972:	d94b      	bls.n	8008a0c <_svfiprintf_r+0x17c>
 8008974:	b1b0      	cbz	r0, 80089a4 <_svfiprintf_r+0x114>
 8008976:	9207      	str	r2, [sp, #28]
 8008978:	e014      	b.n	80089a4 <_svfiprintf_r+0x114>
 800897a:	eba0 0308 	sub.w	r3, r0, r8
 800897e:	fa09 f303 	lsl.w	r3, r9, r3
 8008982:	4313      	orrs	r3, r2
 8008984:	46a2      	mov	sl, r4
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	e7d2      	b.n	8008930 <_svfiprintf_r+0xa0>
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	1d19      	adds	r1, r3, #4
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	9103      	str	r1, [sp, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfbb      	ittet	lt
 8008996:	425b      	neglt	r3, r3
 8008998:	f042 0202 	orrlt.w	r2, r2, #2
 800899c:	9307      	strge	r3, [sp, #28]
 800899e:	9307      	strlt	r3, [sp, #28]
 80089a0:	bfb8      	it	lt
 80089a2:	9204      	strlt	r2, [sp, #16]
 80089a4:	7823      	ldrb	r3, [r4, #0]
 80089a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80089a8:	d10a      	bne.n	80089c0 <_svfiprintf_r+0x130>
 80089aa:	7863      	ldrb	r3, [r4, #1]
 80089ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ae:	d132      	bne.n	8008a16 <_svfiprintf_r+0x186>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	3402      	adds	r4, #2
 80089b4:	1d1a      	adds	r2, r3, #4
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	9203      	str	r2, [sp, #12]
 80089ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089be:	9305      	str	r3, [sp, #20]
 80089c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008a78 <_svfiprintf_r+0x1e8>
 80089c4:	2203      	movs	r2, #3
 80089c6:	4650      	mov	r0, sl
 80089c8:	7821      	ldrb	r1, [r4, #0]
 80089ca:	f000 fda3 	bl	8009514 <memchr>
 80089ce:	b138      	cbz	r0, 80089e0 <_svfiprintf_r+0x150>
 80089d0:	2240      	movs	r2, #64	@ 0x40
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	eba0 000a 	sub.w	r0, r0, sl
 80089d8:	4082      	lsls	r2, r0
 80089da:	4313      	orrs	r3, r2
 80089dc:	3401      	adds	r4, #1
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e4:	2206      	movs	r2, #6
 80089e6:	4825      	ldr	r0, [pc, #148]	@ (8008a7c <_svfiprintf_r+0x1ec>)
 80089e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089ec:	f000 fd92 	bl	8009514 <memchr>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d036      	beq.n	8008a62 <_svfiprintf_r+0x1d2>
 80089f4:	4b22      	ldr	r3, [pc, #136]	@ (8008a80 <_svfiprintf_r+0x1f0>)
 80089f6:	bb1b      	cbnz	r3, 8008a40 <_svfiprintf_r+0x1b0>
 80089f8:	9b03      	ldr	r3, [sp, #12]
 80089fa:	3307      	adds	r3, #7
 80089fc:	f023 0307 	bic.w	r3, r3, #7
 8008a00:	3308      	adds	r3, #8
 8008a02:	9303      	str	r3, [sp, #12]
 8008a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a06:	4433      	add	r3, r6
 8008a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a0a:	e76a      	b.n	80088e2 <_svfiprintf_r+0x52>
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	2001      	movs	r0, #1
 8008a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a14:	e7a8      	b.n	8008968 <_svfiprintf_r+0xd8>
 8008a16:	2300      	movs	r3, #0
 8008a18:	f04f 0c0a 	mov.w	ip, #10
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	3401      	adds	r4, #1
 8008a20:	9305      	str	r3, [sp, #20]
 8008a22:	4620      	mov	r0, r4
 8008a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a28:	3a30      	subs	r2, #48	@ 0x30
 8008a2a:	2a09      	cmp	r2, #9
 8008a2c:	d903      	bls.n	8008a36 <_svfiprintf_r+0x1a6>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0c6      	beq.n	80089c0 <_svfiprintf_r+0x130>
 8008a32:	9105      	str	r1, [sp, #20]
 8008a34:	e7c4      	b.n	80089c0 <_svfiprintf_r+0x130>
 8008a36:	4604      	mov	r4, r0
 8008a38:	2301      	movs	r3, #1
 8008a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a3e:	e7f0      	b.n	8008a22 <_svfiprintf_r+0x192>
 8008a40:	ab03      	add	r3, sp, #12
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	462a      	mov	r2, r5
 8008a46:	4638      	mov	r0, r7
 8008a48:	4b0e      	ldr	r3, [pc, #56]	@ (8008a84 <_svfiprintf_r+0x1f4>)
 8008a4a:	a904      	add	r1, sp, #16
 8008a4c:	f3af 8000 	nop.w
 8008a50:	1c42      	adds	r2, r0, #1
 8008a52:	4606      	mov	r6, r0
 8008a54:	d1d6      	bne.n	8008a04 <_svfiprintf_r+0x174>
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	065b      	lsls	r3, r3, #25
 8008a5a:	f53f af2d 	bmi.w	80088b8 <_svfiprintf_r+0x28>
 8008a5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a60:	e72c      	b.n	80088bc <_svfiprintf_r+0x2c>
 8008a62:	ab03      	add	r3, sp, #12
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	462a      	mov	r2, r5
 8008a68:	4638      	mov	r0, r7
 8008a6a:	4b06      	ldr	r3, [pc, #24]	@ (8008a84 <_svfiprintf_r+0x1f4>)
 8008a6c:	a904      	add	r1, sp, #16
 8008a6e:	f000 fa4b 	bl	8008f08 <_printf_i>
 8008a72:	e7ed      	b.n	8008a50 <_svfiprintf_r+0x1c0>
 8008a74:	0800a0e3 	.word	0x0800a0e3
 8008a78:	0800a0e9 	.word	0x0800a0e9
 8008a7c:	0800a0ed 	.word	0x0800a0ed
 8008a80:	00000000 	.word	0x00000000
 8008a84:	080087d9 	.word	0x080087d9

08008a88 <_sungetc_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	1c4b      	adds	r3, r1, #1
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	d103      	bne.n	8008a98 <_sungetc_r+0x10>
 8008a90:	f04f 35ff 	mov.w	r5, #4294967295
 8008a94:	4628      	mov	r0, r5
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	8993      	ldrh	r3, [r2, #12]
 8008a9a:	b2cd      	uxtb	r5, r1
 8008a9c:	f023 0320 	bic.w	r3, r3, #32
 8008aa0:	8193      	strh	r3, [r2, #12]
 8008aa2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aa4:	6852      	ldr	r2, [r2, #4]
 8008aa6:	b18b      	cbz	r3, 8008acc <_sungetc_r+0x44>
 8008aa8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	dd08      	ble.n	8008ac0 <_sungetc_r+0x38>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	1e5a      	subs	r2, r3, #1
 8008ab2:	6022      	str	r2, [r4, #0]
 8008ab4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008ab8:	6863      	ldr	r3, [r4, #4]
 8008aba:	3301      	adds	r3, #1
 8008abc:	6063      	str	r3, [r4, #4]
 8008abe:	e7e9      	b.n	8008a94 <_sungetc_r+0xc>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	f000 fcc4 	bl	800944e <__submore>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d0f1      	beq.n	8008aae <_sungetc_r+0x26>
 8008aca:	e7e1      	b.n	8008a90 <_sungetc_r+0x8>
 8008acc:	6921      	ldr	r1, [r4, #16]
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	b151      	cbz	r1, 8008ae8 <_sungetc_r+0x60>
 8008ad2:	4299      	cmp	r1, r3
 8008ad4:	d208      	bcs.n	8008ae8 <_sungetc_r+0x60>
 8008ad6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008ada:	42a9      	cmp	r1, r5
 8008adc:	d104      	bne.n	8008ae8 <_sungetc_r+0x60>
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	6023      	str	r3, [r4, #0]
 8008ae4:	6062      	str	r2, [r4, #4]
 8008ae6:	e7d5      	b.n	8008a94 <_sungetc_r+0xc>
 8008ae8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008aec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008af2:	2303      	movs	r3, #3
 8008af4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008af6:	4623      	mov	r3, r4
 8008af8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	2301      	movs	r3, #1
 8008b00:	e7dc      	b.n	8008abc <_sungetc_r+0x34>

08008b02 <__ssrefill_r>:
 8008b02:	b510      	push	{r4, lr}
 8008b04:	460c      	mov	r4, r1
 8008b06:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008b08:	b169      	cbz	r1, 8008b26 <__ssrefill_r+0x24>
 8008b0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	d001      	beq.n	8008b16 <__ssrefill_r+0x14>
 8008b12:	f7ff fd6b 	bl	80085ec <_free_r>
 8008b16:	2000      	movs	r0, #0
 8008b18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b1a:	6360      	str	r0, [r4, #52]	@ 0x34
 8008b1c:	6063      	str	r3, [r4, #4]
 8008b1e:	b113      	cbz	r3, 8008b26 <__ssrefill_r+0x24>
 8008b20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	bd10      	pop	{r4, pc}
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	6063      	str	r3, [r4, #4]
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f043 0320 	orr.w	r3, r3, #32
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	e7f3      	b.n	8008b24 <__ssrefill_r+0x22>

08008b3c <__ssvfiscanf_r>:
 8008b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	460c      	mov	r4, r1
 8008b42:	2100      	movs	r1, #0
 8008b44:	4606      	mov	r6, r0
 8008b46:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8008b4a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008b4e:	49ab      	ldr	r1, [pc, #684]	@ (8008dfc <__ssvfiscanf_r+0x2c0>)
 8008b50:	f10d 0804 	add.w	r8, sp, #4
 8008b54:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008b56:	49aa      	ldr	r1, [pc, #680]	@ (8008e00 <__ssvfiscanf_r+0x2c4>)
 8008b58:	4faa      	ldr	r7, [pc, #680]	@ (8008e04 <__ssvfiscanf_r+0x2c8>)
 8008b5a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008b5e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	f892 9000 	ldrb.w	r9, [r2]
 8008b66:	f1b9 0f00 	cmp.w	r9, #0
 8008b6a:	f000 8159 	beq.w	8008e20 <__ssvfiscanf_r+0x2e4>
 8008b6e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8008b72:	1c55      	adds	r5, r2, #1
 8008b74:	f013 0308 	ands.w	r3, r3, #8
 8008b78:	d019      	beq.n	8008bae <__ssvfiscanf_r+0x72>
 8008b7a:	6863      	ldr	r3, [r4, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	dd0f      	ble.n	8008ba0 <__ssvfiscanf_r+0x64>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	5cba      	ldrb	r2, [r7, r2]
 8008b86:	0712      	lsls	r2, r2, #28
 8008b88:	d401      	bmi.n	8008b8e <__ssvfiscanf_r+0x52>
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	e7e9      	b.n	8008b62 <__ssvfiscanf_r+0x26>
 8008b8e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008b90:	3301      	adds	r3, #1
 8008b92:	3201      	adds	r2, #1
 8008b94:	9245      	str	r2, [sp, #276]	@ 0x114
 8008b96:	6862      	ldr	r2, [r4, #4]
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	3a01      	subs	r2, #1
 8008b9c:	6062      	str	r2, [r4, #4]
 8008b9e:	e7ec      	b.n	8008b7a <__ssvfiscanf_r+0x3e>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008ba6:	4798      	blx	r3
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d0e9      	beq.n	8008b80 <__ssvfiscanf_r+0x44>
 8008bac:	e7ed      	b.n	8008b8a <__ssvfiscanf_r+0x4e>
 8008bae:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8008bb2:	f040 8086 	bne.w	8008cc2 <__ssvfiscanf_r+0x186>
 8008bb6:	9341      	str	r3, [sp, #260]	@ 0x104
 8008bb8:	9343      	str	r3, [sp, #268]	@ 0x10c
 8008bba:	7853      	ldrb	r3, [r2, #1]
 8008bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bbe:	bf04      	itt	eq
 8008bc0:	2310      	moveq	r3, #16
 8008bc2:	1c95      	addeq	r5, r2, #2
 8008bc4:	f04f 020a 	mov.w	r2, #10
 8008bc8:	bf08      	it	eq
 8008bca:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008bcc:	46aa      	mov	sl, r5
 8008bce:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008bd2:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008bd6:	2b09      	cmp	r3, #9
 8008bd8:	d91e      	bls.n	8008c18 <__ssvfiscanf_r+0xdc>
 8008bda:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8008e08 <__ssvfiscanf_r+0x2cc>
 8008bde:	2203      	movs	r2, #3
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 fc97 	bl	8009514 <memchr>
 8008be6:	b138      	cbz	r0, 8008bf8 <__ssvfiscanf_r+0xbc>
 8008be8:	2301      	movs	r3, #1
 8008bea:	4655      	mov	r5, sl
 8008bec:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008bee:	eba0 000b 	sub.w	r0, r0, fp
 8008bf2:	4083      	lsls	r3, r0
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	9341      	str	r3, [sp, #260]	@ 0x104
 8008bf8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008bfc:	2b78      	cmp	r3, #120	@ 0x78
 8008bfe:	d806      	bhi.n	8008c0e <__ssvfiscanf_r+0xd2>
 8008c00:	2b57      	cmp	r3, #87	@ 0x57
 8008c02:	d810      	bhi.n	8008c26 <__ssvfiscanf_r+0xea>
 8008c04:	2b25      	cmp	r3, #37	@ 0x25
 8008c06:	d05c      	beq.n	8008cc2 <__ssvfiscanf_r+0x186>
 8008c08:	d856      	bhi.n	8008cb8 <__ssvfiscanf_r+0x17c>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d074      	beq.n	8008cf8 <__ssvfiscanf_r+0x1bc>
 8008c0e:	2303      	movs	r3, #3
 8008c10:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008c12:	230a      	movs	r3, #10
 8008c14:	9342      	str	r3, [sp, #264]	@ 0x108
 8008c16:	e087      	b.n	8008d28 <__ssvfiscanf_r+0x1ec>
 8008c18:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008c1a:	4655      	mov	r5, sl
 8008c1c:	fb02 1103 	mla	r1, r2, r3, r1
 8008c20:	3930      	subs	r1, #48	@ 0x30
 8008c22:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008c24:	e7d2      	b.n	8008bcc <__ssvfiscanf_r+0x90>
 8008c26:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008c2a:	2a20      	cmp	r2, #32
 8008c2c:	d8ef      	bhi.n	8008c0e <__ssvfiscanf_r+0xd2>
 8008c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c34 <__ssvfiscanf_r+0xf8>)
 8008c30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c34:	08008d07 	.word	0x08008d07
 8008c38:	08008c0f 	.word	0x08008c0f
 8008c3c:	08008c0f 	.word	0x08008c0f
 8008c40:	08008d61 	.word	0x08008d61
 8008c44:	08008c0f 	.word	0x08008c0f
 8008c48:	08008c0f 	.word	0x08008c0f
 8008c4c:	08008c0f 	.word	0x08008c0f
 8008c50:	08008c0f 	.word	0x08008c0f
 8008c54:	08008c0f 	.word	0x08008c0f
 8008c58:	08008c0f 	.word	0x08008c0f
 8008c5c:	08008c0f 	.word	0x08008c0f
 8008c60:	08008d77 	.word	0x08008d77
 8008c64:	08008d5d 	.word	0x08008d5d
 8008c68:	08008cbf 	.word	0x08008cbf
 8008c6c:	08008cbf 	.word	0x08008cbf
 8008c70:	08008cbf 	.word	0x08008cbf
 8008c74:	08008c0f 	.word	0x08008c0f
 8008c78:	08008d19 	.word	0x08008d19
 8008c7c:	08008c0f 	.word	0x08008c0f
 8008c80:	08008c0f 	.word	0x08008c0f
 8008c84:	08008c0f 	.word	0x08008c0f
 8008c88:	08008c0f 	.word	0x08008c0f
 8008c8c:	08008d87 	.word	0x08008d87
 8008c90:	08008d21 	.word	0x08008d21
 8008c94:	08008cff 	.word	0x08008cff
 8008c98:	08008c0f 	.word	0x08008c0f
 8008c9c:	08008c0f 	.word	0x08008c0f
 8008ca0:	08008d83 	.word	0x08008d83
 8008ca4:	08008c0f 	.word	0x08008c0f
 8008ca8:	08008d5d 	.word	0x08008d5d
 8008cac:	08008c0f 	.word	0x08008c0f
 8008cb0:	08008c0f 	.word	0x08008c0f
 8008cb4:	08008d07 	.word	0x08008d07
 8008cb8:	3b45      	subs	r3, #69	@ 0x45
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d8a7      	bhi.n	8008c0e <__ssvfiscanf_r+0xd2>
 8008cbe:	2305      	movs	r3, #5
 8008cc0:	e031      	b.n	8008d26 <__ssvfiscanf_r+0x1ea>
 8008cc2:	6863      	ldr	r3, [r4, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dd0d      	ble.n	8008ce4 <__ssvfiscanf_r+0x1a8>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	454a      	cmp	r2, r9
 8008cce:	f040 80a7 	bne.w	8008e20 <__ssvfiscanf_r+0x2e4>
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	6862      	ldr	r2, [r4, #4]
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008cda:	3a01      	subs	r2, #1
 8008cdc:	3301      	adds	r3, #1
 8008cde:	6062      	str	r2, [r4, #4]
 8008ce0:	9345      	str	r3, [sp, #276]	@ 0x114
 8008ce2:	e752      	b.n	8008b8a <__ssvfiscanf_r+0x4e>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008cea:	4798      	blx	r3
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d0eb      	beq.n	8008cc8 <__ssvfiscanf_r+0x18c>
 8008cf0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	f040 808c 	bne.w	8008e10 <__ssvfiscanf_r+0x2d4>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e08c      	b.n	8008e18 <__ssvfiscanf_r+0x2dc>
 8008cfe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008d00:	f042 0220 	orr.w	r2, r2, #32
 8008d04:	9241      	str	r2, [sp, #260]	@ 0x104
 8008d06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d0c:	9241      	str	r2, [sp, #260]	@ 0x104
 8008d0e:	2210      	movs	r2, #16
 8008d10:	2b6e      	cmp	r3, #110	@ 0x6e
 8008d12:	9242      	str	r2, [sp, #264]	@ 0x108
 8008d14:	d902      	bls.n	8008d1c <__ssvfiscanf_r+0x1e0>
 8008d16:	e005      	b.n	8008d24 <__ssvfiscanf_r+0x1e8>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9342      	str	r3, [sp, #264]	@ 0x108
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e002      	b.n	8008d26 <__ssvfiscanf_r+0x1ea>
 8008d20:	2308      	movs	r3, #8
 8008d22:	9342      	str	r3, [sp, #264]	@ 0x108
 8008d24:	2304      	movs	r3, #4
 8008d26:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008d28:	6863      	ldr	r3, [r4, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dd39      	ble.n	8008da2 <__ssvfiscanf_r+0x266>
 8008d2e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008d30:	0659      	lsls	r1, r3, #25
 8008d32:	d404      	bmi.n	8008d3e <__ssvfiscanf_r+0x202>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	781a      	ldrb	r2, [r3, #0]
 8008d38:	5cba      	ldrb	r2, [r7, r2]
 8008d3a:	0712      	lsls	r2, r2, #28
 8008d3c:	d438      	bmi.n	8008db0 <__ssvfiscanf_r+0x274>
 8008d3e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	dc47      	bgt.n	8008dd4 <__ssvfiscanf_r+0x298>
 8008d44:	466b      	mov	r3, sp
 8008d46:	4622      	mov	r2, r4
 8008d48:	4630      	mov	r0, r6
 8008d4a:	a941      	add	r1, sp, #260	@ 0x104
 8008d4c:	f000 f9fa 	bl	8009144 <_scanf_chars>
 8008d50:	2801      	cmp	r0, #1
 8008d52:	d065      	beq.n	8008e20 <__ssvfiscanf_r+0x2e4>
 8008d54:	2802      	cmp	r0, #2
 8008d56:	f47f af18 	bne.w	8008b8a <__ssvfiscanf_r+0x4e>
 8008d5a:	e7c9      	b.n	8008cf0 <__ssvfiscanf_r+0x1b4>
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	e7d7      	b.n	8008d10 <__ssvfiscanf_r+0x1d4>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4640      	mov	r0, r8
 8008d64:	f000 fb3a 	bl	80093dc <__sccl>
 8008d68:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d70:	9341      	str	r3, [sp, #260]	@ 0x104
 8008d72:	2301      	movs	r3, #1
 8008d74:	e7d7      	b.n	8008d26 <__ssvfiscanf_r+0x1ea>
 8008d76:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d7c:	9341      	str	r3, [sp, #260]	@ 0x104
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e7d1      	b.n	8008d26 <__ssvfiscanf_r+0x1ea>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e7cf      	b.n	8008d26 <__ssvfiscanf_r+0x1ea>
 8008d86:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008d88:	06c3      	lsls	r3, r0, #27
 8008d8a:	f53f aefe 	bmi.w	8008b8a <__ssvfiscanf_r+0x4e>
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008d92:	1d19      	adds	r1, r3, #4
 8008d94:	9100      	str	r1, [sp, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	07c0      	lsls	r0, r0, #31
 8008d9a:	bf4c      	ite	mi
 8008d9c:	801a      	strhmi	r2, [r3, #0]
 8008d9e:	601a      	strpl	r2, [r3, #0]
 8008da0:	e6f3      	b.n	8008b8a <__ssvfiscanf_r+0x4e>
 8008da2:	4621      	mov	r1, r4
 8008da4:	4630      	mov	r0, r6
 8008da6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008da8:	4798      	blx	r3
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d0bf      	beq.n	8008d2e <__ssvfiscanf_r+0x1f2>
 8008dae:	e79f      	b.n	8008cf0 <__ssvfiscanf_r+0x1b4>
 8008db0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008db2:	3201      	adds	r2, #1
 8008db4:	9245      	str	r2, [sp, #276]	@ 0x114
 8008db6:	6862      	ldr	r2, [r4, #4]
 8008db8:	3a01      	subs	r2, #1
 8008dba:	2a00      	cmp	r2, #0
 8008dbc:	6062      	str	r2, [r4, #4]
 8008dbe:	dd02      	ble.n	8008dc6 <__ssvfiscanf_r+0x28a>
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	e7b6      	b.n	8008d34 <__ssvfiscanf_r+0x1f8>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4630      	mov	r0, r6
 8008dca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008dcc:	4798      	blx	r3
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0b0      	beq.n	8008d34 <__ssvfiscanf_r+0x1f8>
 8008dd2:	e78d      	b.n	8008cf0 <__ssvfiscanf_r+0x1b4>
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	dc06      	bgt.n	8008de6 <__ssvfiscanf_r+0x2aa>
 8008dd8:	466b      	mov	r3, sp
 8008dda:	4622      	mov	r2, r4
 8008ddc:	4630      	mov	r0, r6
 8008dde:	a941      	add	r1, sp, #260	@ 0x104
 8008de0:	f000 fa0a 	bl	80091f8 <_scanf_i>
 8008de4:	e7b4      	b.n	8008d50 <__ssvfiscanf_r+0x214>
 8008de6:	4b09      	ldr	r3, [pc, #36]	@ (8008e0c <__ssvfiscanf_r+0x2d0>)
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f43f aece 	beq.w	8008b8a <__ssvfiscanf_r+0x4e>
 8008dee:	466b      	mov	r3, sp
 8008df0:	4622      	mov	r2, r4
 8008df2:	4630      	mov	r0, r6
 8008df4:	a941      	add	r1, sp, #260	@ 0x104
 8008df6:	f3af 8000 	nop.w
 8008dfa:	e7a9      	b.n	8008d50 <__ssvfiscanf_r+0x214>
 8008dfc:	08008a89 	.word	0x08008a89
 8008e00:	08008b03 	.word	0x08008b03
 8008e04:	08009fe3 	.word	0x08009fe3
 8008e08:	0800a0e9 	.word	0x0800a0e9
 8008e0c:	00000000 	.word	0x00000000
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	065b      	lsls	r3, r3, #25
 8008e14:	f53f af70 	bmi.w	8008cf8 <__ssvfiscanf_r+0x1bc>
 8008e18:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e20:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008e22:	e7f9      	b.n	8008e18 <__ssvfiscanf_r+0x2dc>

08008e24 <_printf_common>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	4616      	mov	r6, r2
 8008e2a:	4698      	mov	r8, r3
 8008e2c:	688a      	ldr	r2, [r1, #8]
 8008e2e:	690b      	ldr	r3, [r1, #16]
 8008e30:	4607      	mov	r7, r0
 8008e32:	4293      	cmp	r3, r2
 8008e34:	bfb8      	it	lt
 8008e36:	4613      	movlt	r3, r2
 8008e38:	6033      	str	r3, [r6, #0]
 8008e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e44:	b10a      	cbz	r2, 8008e4a <_printf_common+0x26>
 8008e46:	3301      	adds	r3, #1
 8008e48:	6033      	str	r3, [r6, #0]
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	0699      	lsls	r1, r3, #26
 8008e4e:	bf42      	ittt	mi
 8008e50:	6833      	ldrmi	r3, [r6, #0]
 8008e52:	3302      	addmi	r3, #2
 8008e54:	6033      	strmi	r3, [r6, #0]
 8008e56:	6825      	ldr	r5, [r4, #0]
 8008e58:	f015 0506 	ands.w	r5, r5, #6
 8008e5c:	d106      	bne.n	8008e6c <_printf_common+0x48>
 8008e5e:	f104 0a19 	add.w	sl, r4, #25
 8008e62:	68e3      	ldr	r3, [r4, #12]
 8008e64:	6832      	ldr	r2, [r6, #0]
 8008e66:	1a9b      	subs	r3, r3, r2
 8008e68:	42ab      	cmp	r3, r5
 8008e6a:	dc2b      	bgt.n	8008ec4 <_printf_common+0xa0>
 8008e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	3b00      	subs	r3, #0
 8008e74:	bf18      	it	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	0692      	lsls	r2, r2, #26
 8008e7a:	d430      	bmi.n	8008ede <_printf_common+0xba>
 8008e7c:	4641      	mov	r1, r8
 8008e7e:	4638      	mov	r0, r7
 8008e80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e84:	47c8      	blx	r9
 8008e86:	3001      	adds	r0, #1
 8008e88:	d023      	beq.n	8008ed2 <_printf_common+0xae>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	6922      	ldr	r2, [r4, #16]
 8008e8e:	f003 0306 	and.w	r3, r3, #6
 8008e92:	2b04      	cmp	r3, #4
 8008e94:	bf14      	ite	ne
 8008e96:	2500      	movne	r5, #0
 8008e98:	6833      	ldreq	r3, [r6, #0]
 8008e9a:	f04f 0600 	mov.w	r6, #0
 8008e9e:	bf08      	it	eq
 8008ea0:	68e5      	ldreq	r5, [r4, #12]
 8008ea2:	f104 041a 	add.w	r4, r4, #26
 8008ea6:	bf08      	it	eq
 8008ea8:	1aed      	subeq	r5, r5, r3
 8008eaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008eae:	bf08      	it	eq
 8008eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	bfc4      	itt	gt
 8008eb8:	1a9b      	subgt	r3, r3, r2
 8008eba:	18ed      	addgt	r5, r5, r3
 8008ebc:	42b5      	cmp	r5, r6
 8008ebe:	d11a      	bne.n	8008ef6 <_printf_common+0xd2>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e008      	b.n	8008ed6 <_printf_common+0xb2>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	4652      	mov	r2, sl
 8008ec8:	4641      	mov	r1, r8
 8008eca:	4638      	mov	r0, r7
 8008ecc:	47c8      	blx	r9
 8008ece:	3001      	adds	r0, #1
 8008ed0:	d103      	bne.n	8008eda <_printf_common+0xb6>
 8008ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eda:	3501      	adds	r5, #1
 8008edc:	e7c1      	b.n	8008e62 <_printf_common+0x3e>
 8008ede:	2030      	movs	r0, #48	@ 0x30
 8008ee0:	18e1      	adds	r1, r4, r3
 8008ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008eec:	4422      	add	r2, r4
 8008eee:	3302      	adds	r3, #2
 8008ef0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ef4:	e7c2      	b.n	8008e7c <_printf_common+0x58>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	4622      	mov	r2, r4
 8008efa:	4641      	mov	r1, r8
 8008efc:	4638      	mov	r0, r7
 8008efe:	47c8      	blx	r9
 8008f00:	3001      	adds	r0, #1
 8008f02:	d0e6      	beq.n	8008ed2 <_printf_common+0xae>
 8008f04:	3601      	adds	r6, #1
 8008f06:	e7d9      	b.n	8008ebc <_printf_common+0x98>

08008f08 <_printf_i>:
 8008f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	7e0f      	ldrb	r7, [r1, #24]
 8008f0e:	4691      	mov	r9, r2
 8008f10:	2f78      	cmp	r7, #120	@ 0x78
 8008f12:	4680      	mov	r8, r0
 8008f14:	460c      	mov	r4, r1
 8008f16:	469a      	mov	sl, r3
 8008f18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f1e:	d807      	bhi.n	8008f30 <_printf_i+0x28>
 8008f20:	2f62      	cmp	r7, #98	@ 0x62
 8008f22:	d80a      	bhi.n	8008f3a <_printf_i+0x32>
 8008f24:	2f00      	cmp	r7, #0
 8008f26:	f000 80d1 	beq.w	80090cc <_printf_i+0x1c4>
 8008f2a:	2f58      	cmp	r7, #88	@ 0x58
 8008f2c:	f000 80b8 	beq.w	80090a0 <_printf_i+0x198>
 8008f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f38:	e03a      	b.n	8008fb0 <_printf_i+0xa8>
 8008f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f3e:	2b15      	cmp	r3, #21
 8008f40:	d8f6      	bhi.n	8008f30 <_printf_i+0x28>
 8008f42:	a101      	add	r1, pc, #4	@ (adr r1, 8008f48 <_printf_i+0x40>)
 8008f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f48:	08008fa1 	.word	0x08008fa1
 8008f4c:	08008fb5 	.word	0x08008fb5
 8008f50:	08008f31 	.word	0x08008f31
 8008f54:	08008f31 	.word	0x08008f31
 8008f58:	08008f31 	.word	0x08008f31
 8008f5c:	08008f31 	.word	0x08008f31
 8008f60:	08008fb5 	.word	0x08008fb5
 8008f64:	08008f31 	.word	0x08008f31
 8008f68:	08008f31 	.word	0x08008f31
 8008f6c:	08008f31 	.word	0x08008f31
 8008f70:	08008f31 	.word	0x08008f31
 8008f74:	080090b3 	.word	0x080090b3
 8008f78:	08008fdf 	.word	0x08008fdf
 8008f7c:	0800906d 	.word	0x0800906d
 8008f80:	08008f31 	.word	0x08008f31
 8008f84:	08008f31 	.word	0x08008f31
 8008f88:	080090d5 	.word	0x080090d5
 8008f8c:	08008f31 	.word	0x08008f31
 8008f90:	08008fdf 	.word	0x08008fdf
 8008f94:	08008f31 	.word	0x08008f31
 8008f98:	08008f31 	.word	0x08008f31
 8008f9c:	08009075 	.word	0x08009075
 8008fa0:	6833      	ldr	r3, [r6, #0]
 8008fa2:	1d1a      	adds	r2, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6032      	str	r2, [r6, #0]
 8008fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e09c      	b.n	80090ee <_printf_i+0x1e6>
 8008fb4:	6833      	ldr	r3, [r6, #0]
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	1d19      	adds	r1, r3, #4
 8008fba:	6031      	str	r1, [r6, #0]
 8008fbc:	0606      	lsls	r6, r0, #24
 8008fbe:	d501      	bpl.n	8008fc4 <_printf_i+0xbc>
 8008fc0:	681d      	ldr	r5, [r3, #0]
 8008fc2:	e003      	b.n	8008fcc <_printf_i+0xc4>
 8008fc4:	0645      	lsls	r5, r0, #25
 8008fc6:	d5fb      	bpl.n	8008fc0 <_printf_i+0xb8>
 8008fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	da03      	bge.n	8008fd8 <_printf_i+0xd0>
 8008fd0:	232d      	movs	r3, #45	@ 0x2d
 8008fd2:	426d      	negs	r5, r5
 8008fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd8:	230a      	movs	r3, #10
 8008fda:	4858      	ldr	r0, [pc, #352]	@ (800913c <_printf_i+0x234>)
 8008fdc:	e011      	b.n	8009002 <_printf_i+0xfa>
 8008fde:	6821      	ldr	r1, [r4, #0]
 8008fe0:	6833      	ldr	r3, [r6, #0]
 8008fe2:	0608      	lsls	r0, r1, #24
 8008fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fe8:	d402      	bmi.n	8008ff0 <_printf_i+0xe8>
 8008fea:	0649      	lsls	r1, r1, #25
 8008fec:	bf48      	it	mi
 8008fee:	b2ad      	uxthmi	r5, r5
 8008ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ff2:	6033      	str	r3, [r6, #0]
 8008ff4:	bf14      	ite	ne
 8008ff6:	230a      	movne	r3, #10
 8008ff8:	2308      	moveq	r3, #8
 8008ffa:	4850      	ldr	r0, [pc, #320]	@ (800913c <_printf_i+0x234>)
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009002:	6866      	ldr	r6, [r4, #4]
 8009004:	2e00      	cmp	r6, #0
 8009006:	60a6      	str	r6, [r4, #8]
 8009008:	db05      	blt.n	8009016 <_printf_i+0x10e>
 800900a:	6821      	ldr	r1, [r4, #0]
 800900c:	432e      	orrs	r6, r5
 800900e:	f021 0104 	bic.w	r1, r1, #4
 8009012:	6021      	str	r1, [r4, #0]
 8009014:	d04b      	beq.n	80090ae <_printf_i+0x1a6>
 8009016:	4616      	mov	r6, r2
 8009018:	fbb5 f1f3 	udiv	r1, r5, r3
 800901c:	fb03 5711 	mls	r7, r3, r1, r5
 8009020:	5dc7      	ldrb	r7, [r0, r7]
 8009022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009026:	462f      	mov	r7, r5
 8009028:	42bb      	cmp	r3, r7
 800902a:	460d      	mov	r5, r1
 800902c:	d9f4      	bls.n	8009018 <_printf_i+0x110>
 800902e:	2b08      	cmp	r3, #8
 8009030:	d10b      	bne.n	800904a <_printf_i+0x142>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	07df      	lsls	r7, r3, #31
 8009036:	d508      	bpl.n	800904a <_printf_i+0x142>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	6861      	ldr	r1, [r4, #4]
 800903c:	4299      	cmp	r1, r3
 800903e:	bfde      	ittt	le
 8009040:	2330      	movle	r3, #48	@ 0x30
 8009042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800904a:	1b92      	subs	r2, r2, r6
 800904c:	6122      	str	r2, [r4, #16]
 800904e:	464b      	mov	r3, r9
 8009050:	4621      	mov	r1, r4
 8009052:	4640      	mov	r0, r8
 8009054:	f8cd a000 	str.w	sl, [sp]
 8009058:	aa03      	add	r2, sp, #12
 800905a:	f7ff fee3 	bl	8008e24 <_printf_common>
 800905e:	3001      	adds	r0, #1
 8009060:	d14a      	bne.n	80090f8 <_printf_i+0x1f0>
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	b004      	add	sp, #16
 8009068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	f043 0320 	orr.w	r3, r3, #32
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	2778      	movs	r7, #120	@ 0x78
 8009076:	4832      	ldr	r0, [pc, #200]	@ (8009140 <_printf_i+0x238>)
 8009078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6831      	ldr	r1, [r6, #0]
 8009080:	061f      	lsls	r7, r3, #24
 8009082:	f851 5b04 	ldr.w	r5, [r1], #4
 8009086:	d402      	bmi.n	800908e <_printf_i+0x186>
 8009088:	065f      	lsls	r7, r3, #25
 800908a:	bf48      	it	mi
 800908c:	b2ad      	uxthmi	r5, r5
 800908e:	6031      	str	r1, [r6, #0]
 8009090:	07d9      	lsls	r1, r3, #31
 8009092:	bf44      	itt	mi
 8009094:	f043 0320 	orrmi.w	r3, r3, #32
 8009098:	6023      	strmi	r3, [r4, #0]
 800909a:	b11d      	cbz	r5, 80090a4 <_printf_i+0x19c>
 800909c:	2310      	movs	r3, #16
 800909e:	e7ad      	b.n	8008ffc <_printf_i+0xf4>
 80090a0:	4826      	ldr	r0, [pc, #152]	@ (800913c <_printf_i+0x234>)
 80090a2:	e7e9      	b.n	8009078 <_printf_i+0x170>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	f023 0320 	bic.w	r3, r3, #32
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	e7f6      	b.n	800909c <_printf_i+0x194>
 80090ae:	4616      	mov	r6, r2
 80090b0:	e7bd      	b.n	800902e <_printf_i+0x126>
 80090b2:	6833      	ldr	r3, [r6, #0]
 80090b4:	6825      	ldr	r5, [r4, #0]
 80090b6:	1d18      	adds	r0, r3, #4
 80090b8:	6961      	ldr	r1, [r4, #20]
 80090ba:	6030      	str	r0, [r6, #0]
 80090bc:	062e      	lsls	r6, r5, #24
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	d501      	bpl.n	80090c6 <_printf_i+0x1be>
 80090c2:	6019      	str	r1, [r3, #0]
 80090c4:	e002      	b.n	80090cc <_printf_i+0x1c4>
 80090c6:	0668      	lsls	r0, r5, #25
 80090c8:	d5fb      	bpl.n	80090c2 <_printf_i+0x1ba>
 80090ca:	8019      	strh	r1, [r3, #0]
 80090cc:	2300      	movs	r3, #0
 80090ce:	4616      	mov	r6, r2
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	e7bc      	b.n	800904e <_printf_i+0x146>
 80090d4:	6833      	ldr	r3, [r6, #0]
 80090d6:	2100      	movs	r1, #0
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	6032      	str	r2, [r6, #0]
 80090dc:	681e      	ldr	r6, [r3, #0]
 80090de:	6862      	ldr	r2, [r4, #4]
 80090e0:	4630      	mov	r0, r6
 80090e2:	f000 fa17 	bl	8009514 <memchr>
 80090e6:	b108      	cbz	r0, 80090ec <_printf_i+0x1e4>
 80090e8:	1b80      	subs	r0, r0, r6
 80090ea:	6060      	str	r0, [r4, #4]
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	2300      	movs	r3, #0
 80090f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090f6:	e7aa      	b.n	800904e <_printf_i+0x146>
 80090f8:	4632      	mov	r2, r6
 80090fa:	4649      	mov	r1, r9
 80090fc:	4640      	mov	r0, r8
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	47d0      	blx	sl
 8009102:	3001      	adds	r0, #1
 8009104:	d0ad      	beq.n	8009062 <_printf_i+0x15a>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	079b      	lsls	r3, r3, #30
 800910a:	d413      	bmi.n	8009134 <_printf_i+0x22c>
 800910c:	68e0      	ldr	r0, [r4, #12]
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	4298      	cmp	r0, r3
 8009112:	bfb8      	it	lt
 8009114:	4618      	movlt	r0, r3
 8009116:	e7a6      	b.n	8009066 <_printf_i+0x15e>
 8009118:	2301      	movs	r3, #1
 800911a:	4632      	mov	r2, r6
 800911c:	4649      	mov	r1, r9
 800911e:	4640      	mov	r0, r8
 8009120:	47d0      	blx	sl
 8009122:	3001      	adds	r0, #1
 8009124:	d09d      	beq.n	8009062 <_printf_i+0x15a>
 8009126:	3501      	adds	r5, #1
 8009128:	68e3      	ldr	r3, [r4, #12]
 800912a:	9903      	ldr	r1, [sp, #12]
 800912c:	1a5b      	subs	r3, r3, r1
 800912e:	42ab      	cmp	r3, r5
 8009130:	dcf2      	bgt.n	8009118 <_printf_i+0x210>
 8009132:	e7eb      	b.n	800910c <_printf_i+0x204>
 8009134:	2500      	movs	r5, #0
 8009136:	f104 0619 	add.w	r6, r4, #25
 800913a:	e7f5      	b.n	8009128 <_printf_i+0x220>
 800913c:	0800a0f4 	.word	0x0800a0f4
 8009140:	0800a105 	.word	0x0800a105

08009144 <_scanf_chars>:
 8009144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009148:	4615      	mov	r5, r2
 800914a:	688a      	ldr	r2, [r1, #8]
 800914c:	4680      	mov	r8, r0
 800914e:	460c      	mov	r4, r1
 8009150:	b932      	cbnz	r2, 8009160 <_scanf_chars+0x1c>
 8009152:	698a      	ldr	r2, [r1, #24]
 8009154:	2a00      	cmp	r2, #0
 8009156:	bf14      	ite	ne
 8009158:	f04f 32ff 	movne.w	r2, #4294967295
 800915c:	2201      	moveq	r2, #1
 800915e:	608a      	str	r2, [r1, #8]
 8009160:	2700      	movs	r7, #0
 8009162:	6822      	ldr	r2, [r4, #0]
 8009164:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80091f4 <_scanf_chars+0xb0>
 8009168:	06d1      	lsls	r1, r2, #27
 800916a:	bf5f      	itttt	pl
 800916c:	681a      	ldrpl	r2, [r3, #0]
 800916e:	1d11      	addpl	r1, r2, #4
 8009170:	6019      	strpl	r1, [r3, #0]
 8009172:	6816      	ldrpl	r6, [r2, #0]
 8009174:	69a0      	ldr	r0, [r4, #24]
 8009176:	b188      	cbz	r0, 800919c <_scanf_chars+0x58>
 8009178:	2801      	cmp	r0, #1
 800917a:	d107      	bne.n	800918c <_scanf_chars+0x48>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	781a      	ldrb	r2, [r3, #0]
 8009180:	6963      	ldr	r3, [r4, #20]
 8009182:	5c9b      	ldrb	r3, [r3, r2]
 8009184:	b953      	cbnz	r3, 800919c <_scanf_chars+0x58>
 8009186:	2f00      	cmp	r7, #0
 8009188:	d031      	beq.n	80091ee <_scanf_chars+0xaa>
 800918a:	e022      	b.n	80091d2 <_scanf_chars+0x8e>
 800918c:	2802      	cmp	r0, #2
 800918e:	d120      	bne.n	80091d2 <_scanf_chars+0x8e>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009198:	071b      	lsls	r3, r3, #28
 800919a:	d41a      	bmi.n	80091d2 <_scanf_chars+0x8e>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	3701      	adds	r7, #1
 80091a0:	06da      	lsls	r2, r3, #27
 80091a2:	bf5e      	ittt	pl
 80091a4:	682b      	ldrpl	r3, [r5, #0]
 80091a6:	781b      	ldrbpl	r3, [r3, #0]
 80091a8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80091ac:	682a      	ldr	r2, [r5, #0]
 80091ae:	686b      	ldr	r3, [r5, #4]
 80091b0:	3201      	adds	r2, #1
 80091b2:	602a      	str	r2, [r5, #0]
 80091b4:	68a2      	ldr	r2, [r4, #8]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	3a01      	subs	r2, #1
 80091ba:	606b      	str	r3, [r5, #4]
 80091bc:	60a2      	str	r2, [r4, #8]
 80091be:	b142      	cbz	r2, 80091d2 <_scanf_chars+0x8e>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dcd7      	bgt.n	8009174 <_scanf_chars+0x30>
 80091c4:	4629      	mov	r1, r5
 80091c6:	4640      	mov	r0, r8
 80091c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80091cc:	4798      	blx	r3
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d0d0      	beq.n	8009174 <_scanf_chars+0x30>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	f013 0310 	ands.w	r3, r3, #16
 80091d8:	d105      	bne.n	80091e6 <_scanf_chars+0xa2>
 80091da:	68e2      	ldr	r2, [r4, #12]
 80091dc:	3201      	adds	r2, #1
 80091de:	60e2      	str	r2, [r4, #12]
 80091e0:	69a2      	ldr	r2, [r4, #24]
 80091e2:	b102      	cbz	r2, 80091e6 <_scanf_chars+0xa2>
 80091e4:	7033      	strb	r3, [r6, #0]
 80091e6:	2000      	movs	r0, #0
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	443b      	add	r3, r7
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f2:	bf00      	nop
 80091f4:	08009fe3 	.word	0x08009fe3

080091f8 <_scanf_i>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	460c      	mov	r4, r1
 80091fe:	4698      	mov	r8, r3
 8009200:	4b72      	ldr	r3, [pc, #456]	@ (80093cc <_scanf_i+0x1d4>)
 8009202:	b087      	sub	sp, #28
 8009204:	4682      	mov	sl, r0
 8009206:	4616      	mov	r6, r2
 8009208:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800920c:	ab03      	add	r3, sp, #12
 800920e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009212:	4b6f      	ldr	r3, [pc, #444]	@ (80093d0 <_scanf_i+0x1d8>)
 8009214:	69a1      	ldr	r1, [r4, #24]
 8009216:	4a6f      	ldr	r2, [pc, #444]	@ (80093d4 <_scanf_i+0x1dc>)
 8009218:	4627      	mov	r7, r4
 800921a:	2903      	cmp	r1, #3
 800921c:	bf08      	it	eq
 800921e:	461a      	moveq	r2, r3
 8009220:	68a3      	ldr	r3, [r4, #8]
 8009222:	9201      	str	r2, [sp, #4]
 8009224:	1e5a      	subs	r2, r3, #1
 8009226:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800922a:	bf81      	itttt	hi
 800922c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009230:	eb03 0905 	addhi.w	r9, r3, r5
 8009234:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009238:	60a3      	strhi	r3, [r4, #8]
 800923a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800923e:	bf98      	it	ls
 8009240:	f04f 0900 	movls.w	r9, #0
 8009244:	463d      	mov	r5, r7
 8009246:	f04f 0b00 	mov.w	fp, #0
 800924a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800924e:	6023      	str	r3, [r4, #0]
 8009250:	6831      	ldr	r1, [r6, #0]
 8009252:	ab03      	add	r3, sp, #12
 8009254:	2202      	movs	r2, #2
 8009256:	7809      	ldrb	r1, [r1, #0]
 8009258:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800925c:	f000 f95a 	bl	8009514 <memchr>
 8009260:	b328      	cbz	r0, 80092ae <_scanf_i+0xb6>
 8009262:	f1bb 0f01 	cmp.w	fp, #1
 8009266:	d159      	bne.n	800931c <_scanf_i+0x124>
 8009268:	6862      	ldr	r2, [r4, #4]
 800926a:	b92a      	cbnz	r2, 8009278 <_scanf_i+0x80>
 800926c:	2108      	movs	r1, #8
 800926e:	6822      	ldr	r2, [r4, #0]
 8009270:	6061      	str	r1, [r4, #4]
 8009272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009276:	6022      	str	r2, [r4, #0]
 8009278:	6822      	ldr	r2, [r4, #0]
 800927a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800927e:	6022      	str	r2, [r4, #0]
 8009280:	68a2      	ldr	r2, [r4, #8]
 8009282:	1e51      	subs	r1, r2, #1
 8009284:	60a1      	str	r1, [r4, #8]
 8009286:	b192      	cbz	r2, 80092ae <_scanf_i+0xb6>
 8009288:	6832      	ldr	r2, [r6, #0]
 800928a:	1c51      	adds	r1, r2, #1
 800928c:	6031      	str	r1, [r6, #0]
 800928e:	7812      	ldrb	r2, [r2, #0]
 8009290:	f805 2b01 	strb.w	r2, [r5], #1
 8009294:	6872      	ldr	r2, [r6, #4]
 8009296:	3a01      	subs	r2, #1
 8009298:	2a00      	cmp	r2, #0
 800929a:	6072      	str	r2, [r6, #4]
 800929c:	dc07      	bgt.n	80092ae <_scanf_i+0xb6>
 800929e:	4631      	mov	r1, r6
 80092a0:	4650      	mov	r0, sl
 80092a2:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80092a6:	4790      	blx	r2
 80092a8:	2800      	cmp	r0, #0
 80092aa:	f040 8085 	bne.w	80093b8 <_scanf_i+0x1c0>
 80092ae:	f10b 0b01 	add.w	fp, fp, #1
 80092b2:	f1bb 0f03 	cmp.w	fp, #3
 80092b6:	d1cb      	bne.n	8009250 <_scanf_i+0x58>
 80092b8:	6863      	ldr	r3, [r4, #4]
 80092ba:	b90b      	cbnz	r3, 80092c0 <_scanf_i+0xc8>
 80092bc:	230a      	movs	r3, #10
 80092be:	6063      	str	r3, [r4, #4]
 80092c0:	6863      	ldr	r3, [r4, #4]
 80092c2:	4945      	ldr	r1, [pc, #276]	@ (80093d8 <_scanf_i+0x1e0>)
 80092c4:	6960      	ldr	r0, [r4, #20]
 80092c6:	1ac9      	subs	r1, r1, r3
 80092c8:	f000 f888 	bl	80093dc <__sccl>
 80092cc:	f04f 0b00 	mov.w	fp, #0
 80092d0:	68a3      	ldr	r3, [r4, #8]
 80092d2:	6822      	ldr	r2, [r4, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d03d      	beq.n	8009354 <_scanf_i+0x15c>
 80092d8:	6831      	ldr	r1, [r6, #0]
 80092da:	6960      	ldr	r0, [r4, #20]
 80092dc:	f891 c000 	ldrb.w	ip, [r1]
 80092e0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d035      	beq.n	8009354 <_scanf_i+0x15c>
 80092e8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80092ec:	d124      	bne.n	8009338 <_scanf_i+0x140>
 80092ee:	0510      	lsls	r0, r2, #20
 80092f0:	d522      	bpl.n	8009338 <_scanf_i+0x140>
 80092f2:	f10b 0b01 	add.w	fp, fp, #1
 80092f6:	f1b9 0f00 	cmp.w	r9, #0
 80092fa:	d003      	beq.n	8009304 <_scanf_i+0x10c>
 80092fc:	3301      	adds	r3, #1
 80092fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8009302:	60a3      	str	r3, [r4, #8]
 8009304:	6873      	ldr	r3, [r6, #4]
 8009306:	3b01      	subs	r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	6073      	str	r3, [r6, #4]
 800930c:	dd1b      	ble.n	8009346 <_scanf_i+0x14e>
 800930e:	6833      	ldr	r3, [r6, #0]
 8009310:	3301      	adds	r3, #1
 8009312:	6033      	str	r3, [r6, #0]
 8009314:	68a3      	ldr	r3, [r4, #8]
 8009316:	3b01      	subs	r3, #1
 8009318:	60a3      	str	r3, [r4, #8]
 800931a:	e7d9      	b.n	80092d0 <_scanf_i+0xd8>
 800931c:	f1bb 0f02 	cmp.w	fp, #2
 8009320:	d1ae      	bne.n	8009280 <_scanf_i+0x88>
 8009322:	6822      	ldr	r2, [r4, #0]
 8009324:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009328:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800932c:	d1c4      	bne.n	80092b8 <_scanf_i+0xc0>
 800932e:	2110      	movs	r1, #16
 8009330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009334:	6061      	str	r1, [r4, #4]
 8009336:	e7a2      	b.n	800927e <_scanf_i+0x86>
 8009338:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800933c:	6022      	str	r2, [r4, #0]
 800933e:	780b      	ldrb	r3, [r1, #0]
 8009340:	f805 3b01 	strb.w	r3, [r5], #1
 8009344:	e7de      	b.n	8009304 <_scanf_i+0x10c>
 8009346:	4631      	mov	r1, r6
 8009348:	4650      	mov	r0, sl
 800934a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800934e:	4798      	blx	r3
 8009350:	2800      	cmp	r0, #0
 8009352:	d0df      	beq.n	8009314 <_scanf_i+0x11c>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	05d9      	lsls	r1, r3, #23
 8009358:	d50d      	bpl.n	8009376 <_scanf_i+0x17e>
 800935a:	42bd      	cmp	r5, r7
 800935c:	d909      	bls.n	8009372 <_scanf_i+0x17a>
 800935e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009362:	4632      	mov	r2, r6
 8009364:	4650      	mov	r0, sl
 8009366:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800936a:	f105 39ff 	add.w	r9, r5, #4294967295
 800936e:	4798      	blx	r3
 8009370:	464d      	mov	r5, r9
 8009372:	42bd      	cmp	r5, r7
 8009374:	d028      	beq.n	80093c8 <_scanf_i+0x1d0>
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	f012 0210 	ands.w	r2, r2, #16
 800937c:	d113      	bne.n	80093a6 <_scanf_i+0x1ae>
 800937e:	702a      	strb	r2, [r5, #0]
 8009380:	4639      	mov	r1, r7
 8009382:	6863      	ldr	r3, [r4, #4]
 8009384:	4650      	mov	r0, sl
 8009386:	9e01      	ldr	r6, [sp, #4]
 8009388:	47b0      	blx	r6
 800938a:	f8d8 3000 	ldr.w	r3, [r8]
 800938e:	6821      	ldr	r1, [r4, #0]
 8009390:	1d1a      	adds	r2, r3, #4
 8009392:	f8c8 2000 	str.w	r2, [r8]
 8009396:	f011 0f20 	tst.w	r1, #32
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	d00f      	beq.n	80093be <_scanf_i+0x1c6>
 800939e:	6018      	str	r0, [r3, #0]
 80093a0:	68e3      	ldr	r3, [r4, #12]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60e3      	str	r3, [r4, #12]
 80093a6:	2000      	movs	r0, #0
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	1bed      	subs	r5, r5, r7
 80093ac:	445d      	add	r5, fp
 80093ae:	442b      	add	r3, r5
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	b007      	add	sp, #28
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	f04f 0b00 	mov.w	fp, #0
 80093bc:	e7ca      	b.n	8009354 <_scanf_i+0x15c>
 80093be:	07ca      	lsls	r2, r1, #31
 80093c0:	bf4c      	ite	mi
 80093c2:	8018      	strhmi	r0, [r3, #0]
 80093c4:	6018      	strpl	r0, [r3, #0]
 80093c6:	e7eb      	b.n	80093a0 <_scanf_i+0x1a8>
 80093c8:	2001      	movs	r0, #1
 80093ca:	e7f2      	b.n	80093b2 <_scanf_i+0x1ba>
 80093cc:	08009f7c 	.word	0x08009f7c
 80093d0:	08008415 	.word	0x08008415
 80093d4:	08009685 	.word	0x08009685
 80093d8:	0800a126 	.word	0x0800a126

080093dc <__sccl>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	780b      	ldrb	r3, [r1, #0]
 80093e0:	4604      	mov	r4, r0
 80093e2:	2b5e      	cmp	r3, #94	@ 0x5e
 80093e4:	bf0b      	itete	eq
 80093e6:	784b      	ldrbeq	r3, [r1, #1]
 80093e8:	1c4a      	addne	r2, r1, #1
 80093ea:	1c8a      	addeq	r2, r1, #2
 80093ec:	2100      	movne	r1, #0
 80093ee:	bf08      	it	eq
 80093f0:	2101      	moveq	r1, #1
 80093f2:	3801      	subs	r0, #1
 80093f4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80093f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80093fc:	42a8      	cmp	r0, r5
 80093fe:	d1fb      	bne.n	80093f8 <__sccl+0x1c>
 8009400:	b90b      	cbnz	r3, 8009406 <__sccl+0x2a>
 8009402:	1e50      	subs	r0, r2, #1
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	f081 0101 	eor.w	r1, r1, #1
 800940a:	4610      	mov	r0, r2
 800940c:	54e1      	strb	r1, [r4, r3]
 800940e:	4602      	mov	r2, r0
 8009410:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009414:	2d2d      	cmp	r5, #45	@ 0x2d
 8009416:	d005      	beq.n	8009424 <__sccl+0x48>
 8009418:	2d5d      	cmp	r5, #93	@ 0x5d
 800941a:	d016      	beq.n	800944a <__sccl+0x6e>
 800941c:	2d00      	cmp	r5, #0
 800941e:	d0f1      	beq.n	8009404 <__sccl+0x28>
 8009420:	462b      	mov	r3, r5
 8009422:	e7f2      	b.n	800940a <__sccl+0x2e>
 8009424:	7846      	ldrb	r6, [r0, #1]
 8009426:	2e5d      	cmp	r6, #93	@ 0x5d
 8009428:	d0fa      	beq.n	8009420 <__sccl+0x44>
 800942a:	42b3      	cmp	r3, r6
 800942c:	dcf8      	bgt.n	8009420 <__sccl+0x44>
 800942e:	461a      	mov	r2, r3
 8009430:	3002      	adds	r0, #2
 8009432:	3201      	adds	r2, #1
 8009434:	4296      	cmp	r6, r2
 8009436:	54a1      	strb	r1, [r4, r2]
 8009438:	dcfb      	bgt.n	8009432 <__sccl+0x56>
 800943a:	1af2      	subs	r2, r6, r3
 800943c:	3a01      	subs	r2, #1
 800943e:	42b3      	cmp	r3, r6
 8009440:	bfa8      	it	ge
 8009442:	2200      	movge	r2, #0
 8009444:	1c5d      	adds	r5, r3, #1
 8009446:	18ab      	adds	r3, r5, r2
 8009448:	e7e1      	b.n	800940e <__sccl+0x32>
 800944a:	4610      	mov	r0, r2
 800944c:	e7da      	b.n	8009404 <__sccl+0x28>

0800944e <__submore>:
 800944e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009452:	460c      	mov	r4, r1
 8009454:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009456:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800945a:	4299      	cmp	r1, r3
 800945c:	d11b      	bne.n	8009496 <__submore+0x48>
 800945e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009462:	f7ff f92d 	bl	80086c0 <_malloc_r>
 8009466:	b918      	cbnz	r0, 8009470 <__submore+0x22>
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009474:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009476:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800947a:	6360      	str	r0, [r4, #52]	@ 0x34
 800947c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009480:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009484:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009488:	7043      	strb	r3, [r0, #1]
 800948a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800948e:	7003      	strb	r3, [r0, #0]
 8009490:	6020      	str	r0, [r4, #0]
 8009492:	2000      	movs	r0, #0
 8009494:	e7ea      	b.n	800946c <__submore+0x1e>
 8009496:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009498:	0077      	lsls	r7, r6, #1
 800949a:	463a      	mov	r2, r7
 800949c:	f000 f856 	bl	800954c <_realloc_r>
 80094a0:	4605      	mov	r5, r0
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0e0      	beq.n	8009468 <__submore+0x1a>
 80094a6:	eb00 0806 	add.w	r8, r0, r6
 80094aa:	4601      	mov	r1, r0
 80094ac:	4632      	mov	r2, r6
 80094ae:	4640      	mov	r0, r8
 80094b0:	f000 f83e 	bl	8009530 <memcpy>
 80094b4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80094b8:	f8c4 8000 	str.w	r8, [r4]
 80094bc:	e7e9      	b.n	8009492 <__submore+0x44>

080094be <memmove>:
 80094be:	4288      	cmp	r0, r1
 80094c0:	b510      	push	{r4, lr}
 80094c2:	eb01 0402 	add.w	r4, r1, r2
 80094c6:	d902      	bls.n	80094ce <memmove+0x10>
 80094c8:	4284      	cmp	r4, r0
 80094ca:	4623      	mov	r3, r4
 80094cc:	d807      	bhi.n	80094de <memmove+0x20>
 80094ce:	1e43      	subs	r3, r0, #1
 80094d0:	42a1      	cmp	r1, r4
 80094d2:	d008      	beq.n	80094e6 <memmove+0x28>
 80094d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094dc:	e7f8      	b.n	80094d0 <memmove+0x12>
 80094de:	4601      	mov	r1, r0
 80094e0:	4402      	add	r2, r0
 80094e2:	428a      	cmp	r2, r1
 80094e4:	d100      	bne.n	80094e8 <memmove+0x2a>
 80094e6:	bd10      	pop	{r4, pc}
 80094e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094f0:	e7f7      	b.n	80094e2 <memmove+0x24>
	...

080094f4 <_sbrk_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	2300      	movs	r3, #0
 80094f8:	4d05      	ldr	r5, [pc, #20]	@ (8009510 <_sbrk_r+0x1c>)
 80094fa:	4604      	mov	r4, r0
 80094fc:	4608      	mov	r0, r1
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	f7fa fecc 	bl	800429c <_sbrk>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_sbrk_r+0x1a>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_sbrk_r+0x1a>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	20000528 	.word	0x20000528

08009514 <memchr>:
 8009514:	4603      	mov	r3, r0
 8009516:	b510      	push	{r4, lr}
 8009518:	b2c9      	uxtb	r1, r1
 800951a:	4402      	add	r2, r0
 800951c:	4293      	cmp	r3, r2
 800951e:	4618      	mov	r0, r3
 8009520:	d101      	bne.n	8009526 <memchr+0x12>
 8009522:	2000      	movs	r0, #0
 8009524:	e003      	b.n	800952e <memchr+0x1a>
 8009526:	7804      	ldrb	r4, [r0, #0]
 8009528:	3301      	adds	r3, #1
 800952a:	428c      	cmp	r4, r1
 800952c:	d1f6      	bne.n	800951c <memchr+0x8>
 800952e:	bd10      	pop	{r4, pc}

08009530 <memcpy>:
 8009530:	440a      	add	r2, r1
 8009532:	4291      	cmp	r1, r2
 8009534:	f100 33ff 	add.w	r3, r0, #4294967295
 8009538:	d100      	bne.n	800953c <memcpy+0xc>
 800953a:	4770      	bx	lr
 800953c:	b510      	push	{r4, lr}
 800953e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009542:	4291      	cmp	r1, r2
 8009544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009548:	d1f9      	bne.n	800953e <memcpy+0xe>
 800954a:	bd10      	pop	{r4, pc}

0800954c <_realloc_r>:
 800954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	4607      	mov	r7, r0
 8009552:	4614      	mov	r4, r2
 8009554:	460d      	mov	r5, r1
 8009556:	b921      	cbnz	r1, 8009562 <_realloc_r+0x16>
 8009558:	4611      	mov	r1, r2
 800955a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	f7ff b8af 	b.w	80086c0 <_malloc_r>
 8009562:	b92a      	cbnz	r2, 8009570 <_realloc_r+0x24>
 8009564:	f7ff f842 	bl	80085ec <_free_r>
 8009568:	4625      	mov	r5, r4
 800956a:	4628      	mov	r0, r5
 800956c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009570:	f000 f88a 	bl	8009688 <_malloc_usable_size_r>
 8009574:	4284      	cmp	r4, r0
 8009576:	4606      	mov	r6, r0
 8009578:	d802      	bhi.n	8009580 <_realloc_r+0x34>
 800957a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800957e:	d8f4      	bhi.n	800956a <_realloc_r+0x1e>
 8009580:	4621      	mov	r1, r4
 8009582:	4638      	mov	r0, r7
 8009584:	f7ff f89c 	bl	80086c0 <_malloc_r>
 8009588:	4680      	mov	r8, r0
 800958a:	b908      	cbnz	r0, 8009590 <_realloc_r+0x44>
 800958c:	4645      	mov	r5, r8
 800958e:	e7ec      	b.n	800956a <_realloc_r+0x1e>
 8009590:	42b4      	cmp	r4, r6
 8009592:	4622      	mov	r2, r4
 8009594:	4629      	mov	r1, r5
 8009596:	bf28      	it	cs
 8009598:	4632      	movcs	r2, r6
 800959a:	f7ff ffc9 	bl	8009530 <memcpy>
 800959e:	4629      	mov	r1, r5
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7ff f823 	bl	80085ec <_free_r>
 80095a6:	e7f1      	b.n	800958c <_realloc_r+0x40>

080095a8 <_strtoul_l.isra.0>:
 80095a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095ac:	4686      	mov	lr, r0
 80095ae:	460d      	mov	r5, r1
 80095b0:	4e33      	ldr	r6, [pc, #204]	@ (8009680 <_strtoul_l.isra.0+0xd8>)
 80095b2:	4628      	mov	r0, r5
 80095b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095b8:	5d37      	ldrb	r7, [r6, r4]
 80095ba:	f017 0708 	ands.w	r7, r7, #8
 80095be:	d1f8      	bne.n	80095b2 <_strtoul_l.isra.0+0xa>
 80095c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80095c2:	d110      	bne.n	80095e6 <_strtoul_l.isra.0+0x3e>
 80095c4:	2701      	movs	r7, #1
 80095c6:	782c      	ldrb	r4, [r5, #0]
 80095c8:	1c85      	adds	r5, r0, #2
 80095ca:	f033 0010 	bics.w	r0, r3, #16
 80095ce:	d115      	bne.n	80095fc <_strtoul_l.isra.0+0x54>
 80095d0:	2c30      	cmp	r4, #48	@ 0x30
 80095d2:	d10d      	bne.n	80095f0 <_strtoul_l.isra.0+0x48>
 80095d4:	7828      	ldrb	r0, [r5, #0]
 80095d6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80095da:	2858      	cmp	r0, #88	@ 0x58
 80095dc:	d108      	bne.n	80095f0 <_strtoul_l.isra.0+0x48>
 80095de:	786c      	ldrb	r4, [r5, #1]
 80095e0:	3502      	adds	r5, #2
 80095e2:	2310      	movs	r3, #16
 80095e4:	e00a      	b.n	80095fc <_strtoul_l.isra.0+0x54>
 80095e6:	2c2b      	cmp	r4, #43	@ 0x2b
 80095e8:	bf04      	itt	eq
 80095ea:	782c      	ldrbeq	r4, [r5, #0]
 80095ec:	1c85      	addeq	r5, r0, #2
 80095ee:	e7ec      	b.n	80095ca <_strtoul_l.isra.0+0x22>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f6      	bne.n	80095e2 <_strtoul_l.isra.0+0x3a>
 80095f4:	2c30      	cmp	r4, #48	@ 0x30
 80095f6:	bf14      	ite	ne
 80095f8:	230a      	movne	r3, #10
 80095fa:	2308      	moveq	r3, #8
 80095fc:	f04f 38ff 	mov.w	r8, #4294967295
 8009600:	fbb8 f8f3 	udiv	r8, r8, r3
 8009604:	2600      	movs	r6, #0
 8009606:	fb03 f908 	mul.w	r9, r3, r8
 800960a:	4630      	mov	r0, r6
 800960c:	ea6f 0909 	mvn.w	r9, r9
 8009610:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009614:	f1bc 0f09 	cmp.w	ip, #9
 8009618:	d810      	bhi.n	800963c <_strtoul_l.isra.0+0x94>
 800961a:	4664      	mov	r4, ip
 800961c:	42a3      	cmp	r3, r4
 800961e:	dd1e      	ble.n	800965e <_strtoul_l.isra.0+0xb6>
 8009620:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009624:	d007      	beq.n	8009636 <_strtoul_l.isra.0+0x8e>
 8009626:	4580      	cmp	r8, r0
 8009628:	d316      	bcc.n	8009658 <_strtoul_l.isra.0+0xb0>
 800962a:	d101      	bne.n	8009630 <_strtoul_l.isra.0+0x88>
 800962c:	45a1      	cmp	r9, r4
 800962e:	db13      	blt.n	8009658 <_strtoul_l.isra.0+0xb0>
 8009630:	2601      	movs	r6, #1
 8009632:	fb00 4003 	mla	r0, r0, r3, r4
 8009636:	f815 4b01 	ldrb.w	r4, [r5], #1
 800963a:	e7e9      	b.n	8009610 <_strtoul_l.isra.0+0x68>
 800963c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009640:	f1bc 0f19 	cmp.w	ip, #25
 8009644:	d801      	bhi.n	800964a <_strtoul_l.isra.0+0xa2>
 8009646:	3c37      	subs	r4, #55	@ 0x37
 8009648:	e7e8      	b.n	800961c <_strtoul_l.isra.0+0x74>
 800964a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800964e:	f1bc 0f19 	cmp.w	ip, #25
 8009652:	d804      	bhi.n	800965e <_strtoul_l.isra.0+0xb6>
 8009654:	3c57      	subs	r4, #87	@ 0x57
 8009656:	e7e1      	b.n	800961c <_strtoul_l.isra.0+0x74>
 8009658:	f04f 36ff 	mov.w	r6, #4294967295
 800965c:	e7eb      	b.n	8009636 <_strtoul_l.isra.0+0x8e>
 800965e:	1c73      	adds	r3, r6, #1
 8009660:	d106      	bne.n	8009670 <_strtoul_l.isra.0+0xc8>
 8009662:	2322      	movs	r3, #34	@ 0x22
 8009664:	4630      	mov	r0, r6
 8009666:	f8ce 3000 	str.w	r3, [lr]
 800966a:	b932      	cbnz	r2, 800967a <_strtoul_l.isra.0+0xd2>
 800966c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009670:	b107      	cbz	r7, 8009674 <_strtoul_l.isra.0+0xcc>
 8009672:	4240      	negs	r0, r0
 8009674:	2a00      	cmp	r2, #0
 8009676:	d0f9      	beq.n	800966c <_strtoul_l.isra.0+0xc4>
 8009678:	b106      	cbz	r6, 800967c <_strtoul_l.isra.0+0xd4>
 800967a:	1e69      	subs	r1, r5, #1
 800967c:	6011      	str	r1, [r2, #0]
 800967e:	e7f5      	b.n	800966c <_strtoul_l.isra.0+0xc4>
 8009680:	08009fe3 	.word	0x08009fe3

08009684 <_strtoul_r>:
 8009684:	f7ff bf90 	b.w	80095a8 <_strtoul_l.isra.0>

08009688 <_malloc_usable_size_r>:
 8009688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800968c:	1f18      	subs	r0, r3, #4
 800968e:	2b00      	cmp	r3, #0
 8009690:	bfbc      	itt	lt
 8009692:	580b      	ldrlt	r3, [r1, r0]
 8009694:	18c0      	addlt	r0, r0, r3
 8009696:	4770      	bx	lr

08009698 <_init>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	bf00      	nop
 800969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969e:	bc08      	pop	{r3}
 80096a0:	469e      	mov	lr, r3
 80096a2:	4770      	bx	lr

080096a4 <_fini>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr
